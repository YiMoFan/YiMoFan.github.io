<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胥帆</title>
  <icon>https://www.gravatar.com/avatar/f90a8deeb07db0e48636ee95a27b26f3</icon>
  <subtitle>不善言辞，胆小认生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-12T11:58:41.169Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>胥帆</name>
    <email>1747380107@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>连续子数组的最大和</title>
    <link href="http://yoursite.com/2020/11/12/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <id>http://yoursite.com/2020/11/12/连续子数组的最大和/</id>
    <published>2020-11-12T11:35:45.250Z</published>
    <updated>2020-11-12T11:58:41.169Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1) </p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>[1,-2,3,10,-4,7,2,-5]</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>18</p><a id="more"></a> <h5 id="方法一-动态规划"><a href="#方法一-动态规划" class="headerlink" title="方法一 动态规划"></a>方法一 动态规划</h5><p>状态定义：dp[i]表示以i结尾的连续子数组的最大和。所以最终要求dp[n-1] </p><p>状态转移方程：dp[i] = max(array[i], dp[i-1]+array[i]) </p><p>解释：如果当前元素为整数，并且dp[i-1]为负数，那么当然结果就是只选当前元素 </p><p>技巧：这里为了统一代码的书写，定义dp[i]表示前i个元素的连续子数组的最大和，结尾元素为array[i-1] </p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = <span class="built_in">array</span>.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(sz+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 表示没有元素</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=sz; ++i) &#123;</span><br><span class="line">            dp[i] = max(<span class="built_in">array</span>[i<span class="number">-1</span>], dp[i<span class="number">-1</span>]+<span class="built_in">array</span>[i<span class="number">-1</span>]);</span><br><span class="line">            ret = max(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxNum = -<span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            maxNum = array[i] &gt; array[i] + maxNum ? array[i] : array[i] + maxNum;</span><br><span class="line">            res = res &gt; maxNum ? res : maxNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>思想很简单，就是对下标为i的元素array[i]，先试探的加上array[i], 如果和为负数，显然，以i结尾的元素对整个结果不作贡献。<br>具体过程：</p><ol><li>初始化：维护一个变量tmp = 0</li><li>如果tmp+array[i] &lt; 0, 说明以i结尾的不作贡献，重新赋值tmp = 0</li><li>否则更新tmp = tmp + array[i]<br>最后判断tmp是否等于0， 如果等于0， 说明数组都是负数，选取一个最大值为答案。</li></ol><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> k : <span class="built_in">array</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp + k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp += k;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = max(ret, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="keyword">return</span> *max_element(<span class="built_in">array</span>.begin(), <span class="built_in">array</span>.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1) &lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;p&gt;[1,-2,3,10,-4,7,2,-5]&lt;/p&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;p&gt;18&lt;/p&gt;
    
    </summary>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>数组中出现次数超过一半的数字</title>
    <link href="http://yoursite.com/2020/11/09/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/11/09/数组中出现次数超过一半的数字/</id>
    <published>2020-11-09T08:44:24.319Z</published>
    <updated>2020-11-09T09:14:08.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字，例如输入一个长度为9的数组[1,2,3,2,2,2,5,4,2]，由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2，如果不存在则输出0；</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>[1,2,3,2,2,2,5,4,2]</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>2</p><a id="more"></a><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>现将数组排序，如果有超过数组长度一半的元素则该值一定会出现在数组的中间，然后将数组中间的该元素的个数判断一下是否有超过数组长度的一半。</p><p>时间复杂度：O(nlogn)</p><p>空间复杂度：O(1)</p><h5 id="方法二-候选法-最优解"><a href="#方法二-候选法-最优解" class="headerlink" title="方法二(候选法)最优解"></a>方法二(候选法)最优解</h5><p>首先先找出数组中的众数，然后判断该众数的个数是否超过了数组长度的一半。</p><p>具体做法：</p><ol><li>初始化当前众数值preValue = -1，以及目前出现该preValue的次数count = 0；</li><li>遍历数组：判断count是否 = 0，若为0，说明当前不存在众数值preValue，则把当前值存为preValue，次数为记为1，若不为0，说明当前存在众数值preValue且次数为count，则判断当前值是否与preValue相等，若相等则次数count+1，若不想等则次数count -1。</li><li>遍历完之后preValue中保存的则为数组中的众数，在判断此preValue的count是否超过数组长度的一半。若存在相等的情况，则preValue保存的为最后一次的众数值，但此情况下一定不存在次数超过数组长度一半的数字。</li></ol><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> preValued = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                preValued = array[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                count = preValued == array[i] ? count + <span class="number">1</span> : count - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] == preValued) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt; array.length/<span class="number">2</span> ? preValued : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        n = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            arr[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.print(solution.MoreThanHalfNum_Solution(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字，例如输入一个长度为9的数组[1,2,3,2,2,2,5,4,2]，由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2，如果不存在则输出0；&lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;p&gt;[1,2,3,2,2,2,5,4,2]&lt;/p&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;p&gt;2&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>字符串的排列</title>
    <link href="http://yoursite.com/2020/11/03/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>http://yoursite.com/2020/11/03/字符串的排列/</id>
    <published>2020-11-03T10:16:37.512Z</published>
    <updated>2020-11-03T10:34:14.140Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个字符串，按字典序列打印出该字符串中字符的所有排列，例如输入字符串abc，则按照字典序打印出由字符a、b、c所能排列出来的所有的字符串为</p><p>abc,acb,bac,bca,cab,cba。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>输入一个字符串，长度不超过9，(可能有字符重复)，字符只包括大小写字母。</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>该字符串按照字典序的全排列</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这种从固定的数组/String中取出元素进行排列组合，是经典的permutation问题，只是本题的要求是需要返回所有不重复的排列组合，而不是返回多少种情况，所以需要新建一个String的ArrayList来储存所有排列出的不重复的字符串。</p><p>基本思想是采用递归从字符串中不断选取某个字符来进行匹配。</p><p>定义一个方法：用于递归的循环的向下寻找所有可能的排列组合，其中有三个参数。</p><p>第一个str为当前剩下的可以取的String，第二个是cur，为当前所组合的字符串，第三个是res，为符合条件的字符串的合集。</p><p>递归结束条件为：当前剩下的String长度为0时表示所有字符已经取完，此时的cur为排列出的一种情况，若res中没有则加入res。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Perm</span><span class="params">(String str, String cur, ArrayList&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!res.contains(cur)) &#123;</span><br><span class="line">                res.add(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); ++i) &#123;</span><br><span class="line">            Perm(str.substring(<span class="number">0</span>,i)+str.substring(i+<span class="number">1</span>),cur+str.charAt(i),res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">Permutation</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(str);</span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringBuffer.length();) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !(stringBuffer.charAt(i) &lt;= <span class="string">'z'</span> &amp;&amp; stringBuffer.charAt(i) &gt;= <span class="string">'A'</span>)) &#123;</span><br><span class="line">                stringBuffer.deleteCharAt(i);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        str = stringBuffer.toString();</span><br><span class="line">        <span class="keyword">if</span> (str.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Perm(str,<span class="string">""</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = input.next();</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.print(solution.Permutation(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;输入一个字符串，按字典序列打印出该字符串中字符的所有排列，例如输入字符串abc，则按照字典序打印出由字符a、b、c所能排列出来的所有的字符串为&lt;/p&gt;
&lt;p&gt;abc,acb,bac,bca,cab,cba。&lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个字符串，长度不超过9，(可能有字符重复)，字符只包括大小写字母。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;该字符串按照字典序的全排列&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>顺时针打印矩阵</title>
    <link href="http://yoursite.com/2020/11/01/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2020/11/01/顺时针打印矩阵/</id>
    <published>2020-11-01T09:21:49.638Z</published>
    <updated>2020-11-01T13:54:23.449Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输一个矩阵，按照从外向里一顺时针的顺序依次打印出每一个数字，例如，如果输入如下4×4的矩阵：</p><p>1 2 3 4</p><p>5 6 7 8</p><p>9 10 11 12</p><p>13 14 15 16</p><p>则依次打印出的数字为：</p><p>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10.</p><a id="more"></a><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><blockquote><p>[[1,2],[3,4]]</p></blockquote><p>输出</p><blockquote><p>[1,2,4,3]</p></blockquote><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p><div align="center"> <img src="/2020/11/01/顺时针打印矩阵/1.png" alt></div></p></blockquote><p>定义四个变量分别代表范围大小：up、down、left、right</p><p>第一步：向右走存入整行的值，以left、right作为行的左右边界，当存入之后，将上边界+1，表示第一行已经存入了，同时判断是否超过了下边界。</p><p>第二步：右侧向下遍历整列的值，以up、down作为列的上下边界，当存入之后，将右边界-1，表示最右侧的边界已经存入，同时判断是否超过了左边界。</p><p>第三步：下边界向左遍历整行的值，以rigth、left作为右左边界，当存入之后，将下边界-1，表示最下侧的边界已经存入，同时判断是否超过了上边界。</p><p>第四步：左边界向上遍历整列的值，以down、up作为下上边界，当存入之后，将左边界+1，表示最左侧的边界已经存入，同时判断是否超过了右边界。</p><p><strong>复杂度</strong></p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> up = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> down = matrix.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = matrix[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = left;i &lt;= right; ++i) &#123;</span><br><span class="line">                arrayList.add(matrix[up][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((++up) &gt; down) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down; ++i) &#123;</span><br><span class="line">                arrayList.add(matrix[i][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((--right) &lt; left) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left; --i) &#123;</span><br><span class="line">                arrayList.add(matrix[down][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((--down) &lt; up) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up; --i) &#123;</span><br><span class="line">                arrayList.add(matrix[i][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((++left) &gt; right) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> row = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> col = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> [][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i) &#123;</span><br><span class="line"><span class="comment">//            String str = input.next();</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j) &#123;</span><br><span class="line">                arr[i][j] = input.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[<span class="number">0</span>].length; ++j) &#123;</span><br><span class="line">                System.out.print(arr[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        arrayList = solution.printMatrix(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); ++i) &#123;</span><br><span class="line">            System.out.print(arrayList.get(i) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种简单的方法(python)</p><ol><li>将矩阵的第一行截取出来。</li><li>判断截取之后是否还存在行数，若不存在，结束循环。</li><li>将矩阵向左转置，即向左旋转90度。</li><li>重复1步骤</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printMatrix</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res.extend(matrix[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> len(matrix) &gt; <span class="number">1</span>:</span><br><span class="line">                matrix = matrix[<span class="number">1</span>::]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            matrix = [ [row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>)]  <span class="comment"># 矩阵装置，向左转90度</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    info = list(map(int, input().split(<span class="string">" "</span>)))</span><br><span class="line">    arr = [[<span class="number">0</span>] * info[<span class="number">1</span>]] * info[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(info[<span class="number">0</span>]):</span><br><span class="line">        arr[i] = list(map(int, input().split(<span class="string">" "</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># arr = [[row[i] for row in arr] for i in range(len(arr[0]) - 1, -1, -1)]</span></span><br><span class="line">    <span class="comment"># print(arr)</span></span><br><span class="line">    print(Solution().printMatrix(arr))</span><br></pre></td></tr></table></figure><h4 id="Integer-类和-int-的区别"><a href="#Integer-类和-int-的区别" class="headerlink" title="Integer 类和 int 的区别"></a>Integer 类和 int 的区别</h4><ol><li>Integer 是 int 包装类，int 是八大基本数据类型之一(byte,char,short,int,long,float,double,boolean)</li><li>Integer 是类，默认值是null，int是基本数据类型，默认值是0；</li><li>Integer 表示的是对象，用一个引用指向这个对象，而int是基本数据类型，直接储存数据。</li></ol><p><strong>Integer的自动拆箱和装箱</strong></p><ol><li><p><strong>自动装箱</strong></p><p>一般创建一个类的时候是通过关键字new，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>但是对于Integer类，可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">128</span>;</span><br></pre></td></tr></table></figure><p>这是因为：通过反编译工具可以看到，生成的class文件是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer a = Integer.valueOf(<span class="number">128</span>);</span><br></pre></td></tr></table></figure><p>这就是基本数据类型的自动装箱，128是基本数据类型，然后被解析成Integer类。</p></li><li><p><strong>自动拆箱</strong></p><p>将Integer类表示的数据赋值给基本数据类型int，就执行了自动拆箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line"><span class="keyword">int</span> m = a;</span><br></pre></td></tr></table></figure><p>反编译生成的class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line"><span class="keyword">int</span> m = a.intValue();</span><br></pre></td></tr></table></figure><p>简单的说：自动装箱就是<code>Integer.valueOf(int i)</code>；自动拆箱就是<code>i.intValue()</code>；</p></li></ol><p><strong>Arrays，list，Arraylist 的区别</strong></p><p>List是接口，ArrayList是用一个数组实现的List类。</p><p>ArrayList是自动扩容的Arrays，有add(),remove()方法。</p><p>ArrayList相比于Arrays少了[]操作，而是利用get(i)配合索引值来取值。</p><p>ArrayList<integer>不能写成ArrayList<int></int></integer></p><p>Array(数组)是基于索引(index)的数据结构，使用索引在数组中搜索和读取数据是很快的。</p><p>获取数据的时间复杂度是O(1)，但是要删除数据开销很大，要重排数组中的所有数据。</p><p>List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。</p><p>List是一个接口，不能写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> List&lt;Integer&gt;(); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>ArrayList可以看成是能够自动增长容量的数组。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;输一个矩阵，按照从外向里一顺时针的顺序依次打印出每一个数字，例如，如果输入如下4×4的矩阵：&lt;/p&gt;
&lt;p&gt;1 2 3 4&lt;/p&gt;
&lt;p&gt;5 6 7 8&lt;/p&gt;
&lt;p&gt;9 10 11 12&lt;/p&gt;
&lt;p&gt;13 14 15 16&lt;/p&gt;
&lt;p&gt;则依次打印出的数字为：&lt;/p&gt;
&lt;p&gt;1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10.&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>回文数（java）</title>
    <link href="http://yoursite.com/2020/10/10/%E5%9B%9E%E6%96%87%E6%95%B0%EF%BC%88java%EF%BC%89/"/>
    <id>http://yoursite.com/2020/10/10/回文数（java）/</id>
    <published>2020-10-10T03:04:41.737Z</published>
    <updated>2020-10-10T04:35:25.043Z</updated>
    
    <content type="html"><![CDATA[<p>牛客练习赛71，题一：</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/2020/10/10/回文数（java）/one.png" alt="题目描述"></p><a id="more"></a><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>一行10个自然数，分别表示数码0~9的出现次数</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>如果无解，只输出”-1”（不含引号）</p><p>否则，输出一个数表示最小的解</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote><p>输入</p><p>0 2 4 2 0 2 0 0 0 0</p><p>输出</p><p>1223553221</p></blockquote><blockquote><p>1 1 4 5 1 4 0 0 0 0</p><p>-1</p></blockquote><blockquote><p>4 0 2 3 0 0 0 2 0 0</p><p>20037373002</p></blockquote><blockquote><p>2 0 0 0 0 0 0 0 0 1</p><p>-1</p></blockquote><blockquote><p>1 0 0 0 0 0 0 0 0 0</p><p>0</p></blockquote><p>备注： 保证输入的所有数都不超过10，且至少一个数大于0；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Main.solution(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for(int n : arr) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print(n + (n == arr[arr.length-1] ? "\n": " "));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(arr.toString());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> odd_count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">            sum += n;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) odd_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (odd_count&gt;<span class="number">1</span>) System.out.print(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((sum-arr[<span class="number">1</span>])==<span class="number">1</span> &amp;&amp; arr[<span class="number">1</span>] != <span class="number">0</span>) System.out.print(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String end = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    end = String.valueOf(i - <span class="number">1</span>);</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[i] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(String.valueOf(i - <span class="number">1</span>));</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(String.valueOf(i - <span class="number">1</span>));</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(sb + end + sb.reverse());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;牛客练习赛71，题一：&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2020/10/10/回文数（java）/one.png&quot; alt=&quot;题目描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>链表操作(java)</title>
    <link href="http://yoursite.com/2020/09/29/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C-java/"/>
    <id>http://yoursite.com/2020/09/29/链表操作-java/</id>
    <published>2020-09-29T11:19:39.125Z</published>
    <updated>2020-09-29T11:26:12.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表的各种操作"><a href="#链表的各种操作" class="headerlink" title="链表的各种操作"></a>链表的各种操作</h3><p>概念：一种重要的数据结构，储存带院是不连续的，每个结点由两部分组成：<br>储存的数值+前序结点和后序结点的指针，既有前序结点和指针又有后序结点的指针的链表称为双向链表，<br>只包含后序指针的链表为单链表。</p><a id="more"></a><h4 id="链表结点的实体类"><a href="#链表结点的实体类" class="headerlink" title="链表结点的实体类"></a>链表结点的实体类</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    ListNode next = <span class="literal">null</span>;  <span class="comment">//下一个结点</span></span><br><span class="line">    int <span class="keyword">data</span>;  <span class="comment">//结点数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ListNode(int <span class="keyword">data</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span> = <span class="keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ListNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.util.LinkMouseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ListNodeOperation &#123;</span><br><span class="line">    ListNode head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表添加结点</span></span><br><span class="line"><span class="comment">     * 找到链表的末尾结点，把新添加的数据作为末尾结点的后续结点</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addListNode(<span class="keyword">int</span> data) &#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(data);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.<span class="keyword">next</span> = newNode;</span><br><span class="line">        newNode.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> printLink() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.<span class="keyword">print</span>(cur.data + (cur.<span class="keyword">next</span> == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="string">" "</span>));</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表删除结点；</span></span><br><span class="line"><span class="comment">     * 把待删除前的一个结点的next指向下一个结点。</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> deleteListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">// 判断链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.data == val) &#123;  <span class="comment">// 若删除头指针</span></span><br><span class="line">            head = head.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode pre = head;</span><br><span class="line">        ListNode temp = head.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;  <span class="comment">// 遍历链表</span></span><br><span class="line">            <span class="keyword">if</span> (temp.data == val) &#123;</span><br><span class="line">                pre.<span class="keyword">next</span> = temp.<span class="keyword">next</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = temp;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回链表长度</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length() &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">count</span>++;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表结点排序，并返回排序后的头结点；</span></span><br><span class="line"><span class="comment">     * 选择排序算法，即每次都选出未排序结点中最小的结点，与第一个未排序的结点交换</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode LinkSort() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode nextNode = cur.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">while</span> (nextNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.data &gt;= nextNode.data) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = cur.data;</span><br><span class="line">                    cur.data = nextNode.data;</span><br><span class="line">                    nextNode.data = temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                nextNode = nextNode.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除重复元素；</span></span><br><span class="line"><span class="comment">     * 需要额外的储存空间hashtable,调用hashtable.containsKey()来判断重复结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> distinctLink() &#123;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        Hashtable&lt;Integer, Integer&gt; hb = <span class="keyword">new</span> Hashtable&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (hb.containsKey(temp.data)) &#123;  <span class="comment">// 如果hashtable中已存在该结点，则跳过该结点</span></span><br><span class="line">                pre.<span class="keyword">next</span> = temp.<span class="keyword">next</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果hashtable中不存在该结点，将结点存到hashtable中</span></span><br><span class="line">                hb.put(temp.data, <span class="number">1</span>);</span><br><span class="line">                pre = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> deleteDuplecate() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = cur.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp.data == cur.data) &#123;</span><br><span class="line">                    temp.<span class="keyword">next</span> = temp.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp = temp.<span class="keyword">next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回倒数第k个结点；</span></span><br><span class="line"><span class="comment">     * 两个指针，第一个指针向前移动k-1次，之后两个指针共同前进；</span></span><br><span class="line"><span class="comment">     * 当前面的指针到达末尾时，后面的指针所在的位置就是倒数第k个位置</span></span><br><span class="line"><span class="comment">     * @param k</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findReverNode(<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k-<span class="number">1</span>; ++i) first = first.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (first.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.<span class="keyword">next</span>;</span><br><span class="line">            second = second.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找正数第k个元素</span></span><br><span class="line"><span class="comment">     * @param k</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findNode (<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( k &lt; <span class="number">1</span> || k &gt; length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k-<span class="number">1</span>; ++i) &#123;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表，在反转指针前必须保存下个结点的指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reserveLink() &#123;</span><br><span class="line">        ListNode curNode = head;</span><br><span class="line">        ListNode preNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (curNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode nextNode = curNode.<span class="keyword">next</span>;</span><br><span class="line">            curNode.<span class="keyword">next</span> = preNode;</span><br><span class="line">            preNode = curNode;</span><br><span class="line">            curNode = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        head = preNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反向输出链表，三种方式：</span></span><br><span class="line"><span class="comment">     * 方法一：先反转链表，再输出链表，需要链表遍历两次。</span></span><br><span class="line"><span class="comment">     * 方法二：把链表中的数字放入栈中再输出，需要维护额外的栈空间</span></span><br><span class="line"><span class="comment">     * 方法三：依据方法二中栈的思想，通过递归来实现，递归起始就是将先执行的数据压入栈中，再一次出栈。</span></span><br><span class="line"><span class="comment">     * @param node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reservePrt(ListNode node) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            reservePrt(node.<span class="keyword">next</span>);</span><br><span class="line">            System.out.<span class="keyword">print</span>(node.data + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找单链表的中间结点：</span></span><br><span class="line"><span class="comment">     * 方法一：先求出链表的长度，再遍历1/2链表长度，寻找出链表的中间结点</span></span><br><span class="line"><span class="comment">     * 方法二：用两个指针遍历链表，一个快指针，一个慢指针，</span></span><br><span class="line"><span class="comment">     * 快指针每次向前移动2个结点，慢指针一次向前移动一个结点；</span></span><br><span class="line"><span class="comment">     * 当快指针移动到链表的末尾，慢指针所在的位置即为中间结点所在的位置。</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findMiddleNode() &#123;</span><br><span class="line">        ListNode slowPoint = head;</span><br><span class="line">        ListNode quickPoint = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// quickPoint.next == null 是链表结点个数为奇数时，快指针已经走到最后</span></span><br><span class="line">        <span class="comment">// quickPoint.next.next == null 是链表结点数为偶数时，快指针已经走到倒数第二个结点</span></span><br><span class="line">        <span class="comment">// 链表结点个数为奇数时，返回的是中间结点；链表结点个数为偶数时，返回的是中间两个结点中的前一个</span></span><br><span class="line">        <span class="keyword">while</span> (quickPoint.<span class="keyword">next</span> != <span class="keyword">null</span> &amp;&amp; quickPoint.<span class="keyword">next</span>.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slowPoint = slowPoint.<span class="keyword">next</span>;</span><br><span class="line">            quickPoint = quickPoint.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断链表是否有环；</span></span><br><span class="line"><span class="comment">     * 设置快指针和慢指针，慢指针每次走一步，快指针每次走两步</span></span><br><span class="line"><span class="comment">     * 当快指针与慢指针相等时，就说明该链表有环</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isRinged() &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode slowNode = head;</span><br><span class="line">        ListNode quickNode = head;</span><br><span class="line">        <span class="keyword">while</span> (quickNode.<span class="keyword">next</span> != <span class="keyword">null</span> &amp;&amp; quickNode.<span class="keyword">next</span>.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slowNode = slowNode.<span class="keyword">next</span>;</span><br><span class="line">            quickNode = quickNode.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">if</span> (quickNode == slowNode) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个链表是否相交；</span></span><br><span class="line"><span class="comment">     * 两个链表相交，则他们的尾结点一定相同，比较两个链表的尾结点是否相同即可</span></span><br><span class="line"><span class="comment">     * @param head1</span></span><br><span class="line"><span class="comment">     * @param head2</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isCross(ListNode head1, ListNode head2) &#123;</span><br><span class="line">        ListNode temp1 = head1;</span><br><span class="line">        ListNode temp2 = head2;</span><br><span class="line">        <span class="keyword">while</span> (temp1.<span class="keyword">next</span> != <span class="keyword">null</span>) temp1 = temp1.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp2.<span class="keyword">next</span> != <span class="keyword">null</span>) temp2 = temp2.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (temp1 == temp2) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果两个链表相交，求链表相交的起始点；</span></span><br><span class="line"><span class="comment">     * 首先判断链表是否相交，如果两个链表不相交，则求相交起点没有意义</span></span><br><span class="line"><span class="comment">     * 求出两个链表长度之差，length = len1 - len2</span></span><br><span class="line"><span class="comment">     * 让较长的链表先走len步</span></span><br><span class="line"><span class="comment">     * 然后两个链表同步向前移动，每移动一次就比较他们的结点是否相等，第一个相等的结点即为他们的第一个相交点</span></span><br><span class="line"><span class="comment">     * @param listNodeOperation1</span></span><br><span class="line"><span class="comment">     * @param listNodeOperation2</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findFirstCrossPoint(ListNodeOperation listNodeOperation1, ListNodeOperation listNodeOperation2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCross(listNodeOperation1.head,listNodeOperation2.head)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = listNodeOperation1.length();</span><br><span class="line">            <span class="keyword">int</span> len2 = listNodeOperation2.length();</span><br><span class="line">            ListNode cur1 = listNodeOperation1.head;</span><br><span class="line">            ListNode cur2 = listNodeOperation2.head;</span><br><span class="line">            <span class="keyword">int</span> length = len1 - len2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) cur1 = cur1.<span class="keyword">next</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) cur2 = cur2.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.<span class="keyword">next</span>;</span><br><span class="line">                cur2 = cur2.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链表的各种操作&quot;&gt;&lt;a href=&quot;#链表的各种操作&quot; class=&quot;headerlink&quot; title=&quot;链表的各种操作&quot;&gt;&lt;/a&gt;链表的各种操作&lt;/h3&gt;&lt;p&gt;概念：一种重要的数据结构，储存带院是不连续的，每个结点由两部分组成：&lt;br&gt;储存的数值+前序结点和后序结点的指针，既有前序结点和指针又有后序结点的指针的链表称为双向链表，&lt;br&gt;只包含后序指针的链表为单链表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字</title>
    <link href="http://yoursite.com/2020/09/24/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/09/24/旋转数组的最小数字/</id>
    <published>2020-09-24T06:59:56.751Z</published>
    <updated>2020-11-09T08:47:16.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组[3,4,5,1,2]为[1,2,3,4,5]的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 </p><a id="more"></a><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入一个非递减排序的数组的一个旋转，所有元素都大于0</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出改旋转数组的最小元素，若数组大小为0，返回0。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>二分查找</strong></p><p>二分查找不仅仅只适用于在有序数组上，如果能够明确二分之后，答案存在于二分的某一侧，就可以使用二分。</p><p>这种二分查找的难点就难在，<code>arr[mid]</code>跟谁进行比较。</p><p>我们的目的是：当进行一次比较的时候，一定能够确定答案就在mid的某一侧，一次比较为<code>arr[mid]</code>跟谁比的问题。</p><p>一般的比较原则是：</p><ul><li>如果有目标值target，那么直接让<code>arr[mid]</code>和target比较即可。</li><li>如果没有目标值，一般可以考虑<strong>端点</strong></li></ul><p>这里我们把target看作是右端点，来进行分析，那就要分析以下三种情况，看是否可以达到上述目标。</p><ol><li><p>情况1，<code>arr[mid] &gt; target: 4 5 6 1 2 3</code></p><ul><li><code>arr[mid] = 6</code>，右端点为3，<code>arr[mid] &gt; target</code>，说明<code>[first ... mid]</code>都是 &gt;= <code>target</code>的，因为原始数组是非递减的，所以可以确定答案为<code>[mid+1 .. last]</code>之间，所以<code>first = mid + 1</code></li></ul></li><li><p>情况2，<code>arr[mid] &lt; target: 5 6 1 2 3 4</code></p><ul><li><code>arr[mid] = 1</code>，<code>target</code>为右端点4，<code>arr[mid] &lt; target</code>，说明答案肯定不在<code>[mid+1 ... last]</code>，但是<code>arr[mid]</code>有可能是答案，所以答案在<code>[first,mid]</code>区间，所以<code>last = mid</code>；</li></ul></li><li><p>情况3，<code>arr[mid] == target</code>:</p><ul><li><p>如果是1 0 1 1 1，<code>arr[mid] = target = 1</code>，答案在左边</p></li><li><p>如果是1 1 1 0 1，<code>arr[mid] = target = 1</code>，答案在右边</p><p>所以这种情况，不能确定答案在左边还是右边，那么就让<code>last = last - 1</code>，慢慢的缩小区间，同时也不会错过答案。</p></li></ul></li></ol><hr><p>举个栗子：</p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/one.png" alt></div></p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/two.png" alt></div></p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/three.png" alt></div></p><hr><p>python3(3.5.2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        lenArray = len(rotateArray)</span><br><span class="line">        <span class="keyword">if</span> lenArray == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            first = <span class="number">0</span></span><br><span class="line">            last = lenArray<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> first &lt; last:</span><br><span class="line">                mid = int((first + last) / <span class="number">2</span> <span class="keyword">if</span> (first + last) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> (first + last - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> (rotateArray[mid] &gt; rotateArray[last]):</span><br><span class="line">                    first = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> (rotateArray[mid] &lt; rotateArray[last]):</span><br><span class="line">                    last = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    last -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rotateArray[first]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组[3,4,5,1,2]为[1,2,3,4,5]的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>xxx.github.io 拒绝访问</title>
    <link href="http://yoursite.com/2020/09/24/xxx-github-io-%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2020/09/24/xxx-github-io-拒绝访问/</id>
    <published>2020-09-24T02:14:01.185Z</published>
    <updated>2020-09-24T04:03:29.692Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>hexo 搭建个人博客中<code>hexo s -g</code>能在本地<code>localhost:4000</code>看到生成的博客页面，但是<code>hexo d -g</code>之后出现</p><p><code>xxxx.github.io</code>拒绝了我们的请求，无法访问此网站</p><a id="more"></a><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/one.png" alt="拒绝访问"></div></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在本地dos先<code>ping</code>一下个人博客地址，</p><p>若<code>loss = 0%</code>时，很可能就是出现了访问被服务端拦截，也就是被墙了。</p><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/two.png" alt="ping xxx.github.io"></div></p><p>此时只需要<a href="https://jingyan.baidu.com/article/b87fe19e4e1faf5218356839.html" target="_blank" rel="noopener">修改一下本地DNS</a>就为<code>114.114.114.114</code>就可以了。</p><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/three.png" alt="修改本地DNS"></div></p><p>若<code>loss = 100%</code>就是博客部署有问题，检查与github仓库是否连接，查看ssh密钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;hexo 搭建个人博客中&lt;code&gt;hexo s -g&lt;/code&gt;能在本地&lt;code&gt;localhost:4000&lt;/code&gt;看到生成的博客页面，但是&lt;code&gt;hexo d -g&lt;/code&gt;之后出现&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xxxx.github.io&lt;/code&gt;拒绝了我们的请求，无法访问此网站&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>考研这一路上</title>
    <link href="http://yoursite.com/2019/12/24/%E8%80%83%E7%A0%94%E8%BF%99%E4%B8%80%E8%B7%AF%E4%B8%8A/"/>
    <id>http://yoursite.com/2019/12/24/考研这一路上/</id>
    <published>2019-12-24T02:23:18.656Z</published>
    <updated>2020-09-24T03:20:31.640Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>阈值分割</title>
    <link href="http://yoursite.com/2019/08/23/%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2/"/>
    <id>http://yoursite.com/2019/08/23/阈值分割/</id>
    <published>2019-08-23T05:20:32.378Z</published>
    <updated>2019-03-09T08:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="otsu阈值分割算法及其改进"><a href="#otsu阈值分割算法及其改进" class="headerlink" title="otsu阈值分割算法及其改进"></a>otsu阈值分割算法及其改进</h2><h3 id="一、阈值分割简介"><a href="#一、阈值分割简介" class="headerlink" title="一、阈值分割简介"></a>一、阈值分割简介</h3><p>阈值分隔是一种区域分割技术，它适用于物体与背景有较强对比的景物分割。它计算简单，而且总能用封闭而且连通的边界定义不交叠的区域。当使用阈值规则进行图像分割时，所有灰度值大于或等于某阈值的像素都被判属于物体。 一维Otsu算法有计算简洁、稳定、自适应强等优点，被广泛用于图像分割中。但一维Otsu算法没有考虑图像像素点之间的关系，当图像中有噪声时，会导致分割的效果不理想。因此，刘健庄等人在1993年提出了二维的Otsu算法，提升了算法的抗噪声能力。</p><a id="more"></a><h3 id="二、算法思想及其过程："><a href="#二、算法思想及其过程：" class="headerlink" title="二、算法思想及其过程："></a>二、算法思想及其过程：</h3><blockquote><p>1、统计灰度级中每个像素在整幅图像中的个数。<br>2、计算每个像素在整幅图像的概率分布。<br>3、对灰度级进行遍历搜索，计算当前灰度值下前景背景类间概率。<br>4、通过目标函数计算出类内与类间方差下对应的阈值。</p></blockquote><p>由上述Ostu的基本原理得知，经典的OTSU算法能够很好的分割图像中直方图波峰和波谷不明显的图像，但计算量比较大，即遍历整个图像X的灰度值，并计算每个灰度值的类间方差，然后找出其中最大值，才最终得到最佳阈值，当图像X的尺寸增加时，该算法的计算量急剧增加，效率不高。下面来介绍一种改进的Ostu算法，即二维的Ostu算法。</p><h3 id="三、二维Otsu算法"><a href="#三、二维Otsu算法" class="headerlink" title="三、二维Otsu算法"></a>三、二维Otsu算法</h3><p>同时考虑像素的灰度值分布和它们邻域像素的平均灰度值分布，因此形成的阈值是一个二维矢量，最佳的阈值在一个二维的测度准则下确定最大值时得到。</p><p>（1）设图像I(x,y),的灰度级为L级，那么图像的邻域平均灰度也分为L级。<br>（2）设f(x,y)为像素点(x,y)的灰度值，g(x,y)为像素点(x,y)为中心的K*K的像素点集合的灰度平均值。令f(x,y)=i,g(x,y)=j，然后就形成了一个二元组(i,j)。<br>（3）设二元组（i,j）出现的次数为fij，然后求出二元组对应的概率密度Pij，Pij=fij/N, i,j=1,2，…，L，其中N为图像像素点总数。<br>（4）任意选取一个阈值向量(s,t)选取的阈值向量将图像的二维直方图划分为4个区域，B、C区域代表图像的前景和背景，A、D区域代表噪声点。<br>（5）设C、B两个区域对应的概率分别为w1，w2，对应的均值矢量为u1，u2。整个图片所对应的均值矢量为uT。</p><p><div align="center"><img src="/2019/08/23/阈值分割/one.png" alt title="二维Otsu算法"></div></p><h3 id="四、基于模拟退火的Otsu阈值分割算法"><a href="#四、基于模拟退火的Otsu阈值分割算法" class="headerlink" title="四、基于模拟退火的Otsu阈值分割算法"></a>四、基于模拟退火的Otsu阈值分割算法</h3><h4 id="4-1、模拟退火算法的原理"><a href="#4-1、模拟退火算法的原理" class="headerlink" title="4.1、模拟退火算法的原理"></a>4.1、模拟退火算法的原理</h4><p>模拟退火算法本质上也是一种贪心算法，在每一次迭代时总体上都选择一个当前最优解，但在它搜索的过程中引入了适当的随机因素，能够以一定的概率接受一个恶化解，因而能跳出局部最优的陷阱，求的全局最优解。<br>假设f(x)为优化函数，g(x)为状态产生函数，R为可行解空间，模拟退火的基本描述如下，<br>1、任选一初始状态，计算其目标函数值f(x)，并选择初始控制温度，T0和markov链的长度；<br>2、在R中产生一个随机扰动，令x1=g(x)，计算其目标函数值f(x1)；<br>3、根据状态接受函数判断是否接受，如果f(x1) &lt; f(x0)，则接受新状态x1为当前状态否则按Metropolis准则判决是否接受x1，若接受，则令当前状态等于x1，若不接受，则令当前状态等于x0；<br>4、根据某个收敛准则，判断抽样过程是否终止，是则转5，否则转2；<br>5、按照某个温度冷却方案降低控制温度T；<br>6、根据某个收敛准则，判断模拟退火过程是否终止，是则转7，否则转2；<br>7、当前解作为最优解输出。</p><h4 id="4-2、模拟退火优化的图像和阈值分割算法"><a href="#4-2、模拟退火优化的图像和阈值分割算法" class="headerlink" title="4.2、模拟退火优化的图像和阈值分割算法"></a>4.2、模拟退火优化的图像和阈值分割算法</h4><p>算法的<strong>基本思想</strong>是：以模拟退火智能算法代替原OTSU算法的穷举运算，在解空间中跳跃的搜索图像分割的最佳阈值，减少传统算法的运算量，在获得较好的图像分割效果的基础上，提高算法的效率，Otsu-Sa算法首先绘制图像的直方图，并计算图像像素的灰度均值及累加概率，调用模拟退火算法计算最佳阈值。<br>Ostu-Sa算法的具体描述如下：<br>算法名称：Otsu-Sa<br>输入：原始图像<br>输出：二值化分割图像</p><h4 id="4-2-算法步骤"><a href="#4-2-算法步骤" class="headerlink" title="4.2 算法步骤"></a>4.2 算法步骤</h4><blockquote><p>一：绘制图像的直方图；<br>二：计算图像的灰度总均值；<br>三：计算前i个像素的灰度均值；<br>四：计算像素的累加概率；<br>五：选择优化函数，调用模拟退火算法Sa，计算最佳阈值；<br>六：以步骤五返回的最佳阈值对图像进行二值化分割；</p></blockquote><h3 id="五、处理结果"><a href="#五、处理结果" class="headerlink" title="五、处理结果"></a>五、处理结果</h3><h4 id="GUI导入图片后界面"><a href="#GUI导入图片后界面" class="headerlink" title=" GUI导入图片后界面 "></a><strong> GUI导入图片后界面 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo1.png" alt title="导入图片"></div></p></blockquote><h4 id="Otsu算法结果"><a href="#Otsu算法结果" class="headerlink" title=" Otsu算法结果 "></a><strong> Otsu算法结果 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo2.png" alt title="Otsu阈值分割"></div></p></blockquote><h4 id="二维Otsu算法结果"><a href="#二维Otsu算法结果" class="headerlink" title=" 二维Otsu算法结果 "></a><strong> 二维Otsu算法结果 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo3.png" alt="二维Otsu算法灰度直方图" title="二维Otsu算法灰度直方图"></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo4.png" alt="二维Otsu算法结果对比" title="二维Otsu算法结果对比"></div></p></blockquote><h3 id="六、所有代码及文件"><a href="#六、所有代码及文件" class="headerlink" title="六、所有代码及文件"></a>六、所有代码及文件</h3><p><a href="https://github.com/YiMoFan/Otsu" title="阈值分割" target="_blank" rel="noopener"><strong> 阈值分割 </strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;otsu阈值分割算法及其改进&quot;&gt;&lt;a href=&quot;#otsu阈值分割算法及其改进&quot; class=&quot;headerlink&quot; title=&quot;otsu阈值分割算法及其改进&quot;&gt;&lt;/a&gt;otsu阈值分割算法及其改进&lt;/h2&gt;&lt;h3 id=&quot;一、阈值分割简介&quot;&gt;&lt;a href=&quot;#一、阈值分割简介&quot; class=&quot;headerlink&quot; title=&quot;一、阈值分割简介&quot;&gt;&lt;/a&gt;一、阈值分割简介&lt;/h3&gt;&lt;p&gt;阈值分隔是一种区域分割技术，它适用于物体与背景有较强对比的景物分割。它计算简单，而且总能用封闭而且连通的边界定义不交叠的区域。当使用阈值规则进行图像分割时，所有灰度值大于或等于某阈值的像素都被判属于物体。 一维Otsu算法有计算简洁、稳定、自适应强等优点，被广泛用于图像分割中。但一维Otsu算法没有考虑图像像素点之间的关系，当图像中有噪声时，会导致分割的效果不理想。因此，刘健庄等人在1993年提出了二维的Otsu算法，提升了算法的抗噪声能力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>母牛的故事</title>
    <link href="http://yoursite.com/2019/08/23/%E6%AF%8D%E7%89%9B%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2019/08/23/母牛的故事/</id>
    <published>2019-08-23T05:20:32.376Z</published>
    <updated>2020-09-24T07:05:42.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，<br>每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，<br>n的含义如题目中描述。n=0表示输入数据的结束，不做处理。</p></blockquote><a id="more"></a><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>对于每个测试实例，输出在第n年的时候母牛的数量。<br>每个输出占一行。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote><p>2<br>4<br>5<br>0</p></blockquote><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote><p>2<br>4<br>6</p></blockquote><p>将每一年的牛数分为母牛数和小牛数，然后分别列举出前五年的母牛数和小牛数</p><table><thead><tr><th style="text-align:center">年份</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">母牛数</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">小牛数</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">3</td></tr></tbody></table><p>小牛每四年变为母牛，则第五年之后的每一年的母牛数就为前一年的母牛数加上第前三年的母牛数<br>（不是小牛数是因为这个时候的小牛数包括这一年的母牛数和前几年的母牛数，而这一年产生的小牛数就等于这一年的母牛数）,<br>a为母牛，b为小牛。则<code>a[i] = a[i-1]+a[i-3]</code><br>第五年之后的小牛数就为该年的母牛数前面算的为<code>a[i-1]+a[i-3]</code>加上前一年的小牛数<code>b[i-1]</code>在减去这一年从小牛变为母牛的数量<code>a[i-3]</code>。<br>所以<code>b[i] = a[i-1]+a[i-3]+b[i-1]-a[i-3] = a[i-1]+b[i-1]</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">10000</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[<span class="number">10000</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">3</span>) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[n<span class="number">-1</span>]+b[n<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; n; ++i) &#123;</span><br><span class="line">a[i] = a[i<span class="number">-1</span>] + a[i<span class="number">-3</span>];</span><br><span class="line">b[i] = b[i<span class="number">-1</span>] + a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[n<span class="number">-1</span>] + b[n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，&lt;br&gt;每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&amp;lt;n&amp;lt;55)，&lt;br&gt;n的含义如题目中描述。n=0表示输入数据的结束，不做处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="递推" scheme="http://yoursite.com/tags/%E9%80%92%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>数学建模国赛</title>
    <link href="http://yoursite.com/2019/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/08/23/数学建模国赛/</id>
    <published>2019-08-23T05:20:32.372Z</published>
    <updated>2019-08-30T09:12:19.306Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
      <category term="数学建模" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理</title>
    <link href="http://yoursite.com/2019/08/23/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/23/数字图像处理/</id>
    <published>2019-08-23T05:20:32.369Z</published>
    <updated>2020-09-24T04:03:11.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字图像处理基础"><a href="#数字图像处理基础" class="headerlink" title="数字图像处理基础"></a>数字图像处理基础</h2><p>首先是读取图片文件<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clc;<span class="built_in">close</span>;</span><br><span class="line"><span class="built_in">clear</span> all;</span><br><span class="line"></span><br><span class="line">num_I = imread(<span class="string">'pathname'</span>);</span><br><span class="line">imfinfo =(<span class="string">'pathname'</span>)  % 输出图像的基本信息</span><br></pre></td></tr></table></figure></p><p>其中pathname为路径名，最好为绝对路径，如果为相对路径必须让matlab的工作路径与图片路径一致。</p><a id="more"></a><p>然后就会的得到图像的图像矩阵，格式为uint8<br>如果为rgb图像就会是一个三维的矩阵，灰度图就是一个一维的图像矩阵。<br>所以只需要对图像的数字矩阵处理。</p><p>比如简单的将图像分割为四个部分</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">clc;close;</span><br><span class="line">clear all;</span><br><span class="line">num = imread(<span class="string">'cameraman.tif'</span>);</span><br><span class="line">[row,col] = <span class="built_in">size</span>(num);  <span class="comment">% 提取矩阵的行和列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span>:<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> jj = <span class="number">1</span>:<span class="number">2</span></span><br><span class="line">        <span class="comment">% 将图片分割成四部分组成一个元胞数组</span></span><br><span class="line">        image&#123;ii,jj&#125;=num((ii<span class="number">-1</span>)*col/<span class="number">2</span>+<span class="number">1</span>:ii*col/<span class="number">2</span>,(jj<span class="number">-1</span>)*col/<span class="number">2</span>+<span class="number">1</span>:jj*col/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(image&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(image&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(image&#123;<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(image&#123;<span class="number">2</span>,<span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure><p>基本的方法就是将原图像矩阵分割成相同大小的四个子矩阵。</p><p>还有图像的加减乘除运算：<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Z</span>=imadd(<span class="keyword">X</span>,<span class="keyword">Y</span>);  %图像的加运算，<span class="keyword">X</span>,<span class="keyword">Y</span>是输入的两幅图像，其中一个可以是常数</span><br><span class="line"><span class="keyword">Z</span>=imsubtract(<span class="keyword">X</span>,<span class="keyword">Y</span>);  %图像的减运算，<span class="keyword">Y</span>可以是常数</span><br><span class="line"><span class="keyword">Z</span>=immiltiply(<span class="keyword">X</span>,y);  %图像的乘运算，<span class="keyword">Y</span>也可以是常数</span><br><span class="line"><span class="keyword">Z</span>=imdivide(<span class="keyword">X</span>,y);  %图像的除运算，<span class="keyword">Y</span>也可以是常数</span><br></pre></td></tr></table></figure></p><p>图像的输出为：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imshow(<span class="built_in">image</span>);  % <span class="built_in">image</span> 为图像矩阵</span><br></pre></td></tr></table></figure></p><p>然后就是图像类型格式转换的一些函数，主要的作用就是改变图像的格式，可以对图像矩阵进行处理。</p><p>常用的有：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I=rgb2gray(RGB)%将一副灰度图转换为真彩色图</span><br><span class="line">[X,map]=rgb2ind(RGB,n)%将RGB图转换为索引色图</span><br><span class="line">BW=im2bw(I,level)%将真彩色图或灰度图转换为二值图，level为阈值</span><br></pre></td></tr></table></figure></p><p>因为现阶段的图像处理一般都是对灰度图像的处理，所以一般都会用到<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image</span> = rgb2gray(I)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>然后统计图像的灰度值的分布称为直方图<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imhist<span class="comment">(img)</span>; <span class="meta">%</span> img 为矩阵图像的灰度值</span><br></pre></td></tr></table></figure></p><p>二值化图像就是图像矩阵中只有0和1两个元素，称为逻辑矩阵。<br>将一个图片转换为二值化图片的过程为图像二值化，确定阈值的方法为阈值分割。</p><p>介绍一种常用的方法为：<strong>otsu阈值分割算法</strong></p><blockquote><p>对图像I(x,y)，前景和背景的分割阈值记作T，<br>前景像素点数占整幅图像的比例为ω0，其平均灰度μ0；<br>背景像素点数占整幅图像的比例为ω1，其平均灰度μ1；<br>图像的总平均灰度记为μ=ω0∗μ0 +ω1∗μ1；<br>类间方差记为g。<br>假设：<br>背景较暗，且图像的大小为M×N，<br>图像中，<br>像素灰度值小于阈值T的像素个数记作N0，<br>像素灰度值大于阈值T的像素个数记作N1，<br>则有：</p></blockquote><p>　　　　　　ω0 = N0 / M×N ；      (1)</p><p>　　　　　　ω1 = N1 / M×N ；      (2)</p><p>　　　　　　N0 + N1 = M×N ；       (3)</p><p>　　　　　　ω0+ω1=1；           (4)</p><p>　　　　　　μ=ω0<em>μ0+ω1</em>μ1；  (5)</p><p>　　　　　　g =ω0(μ0-μ)^2+ω1(μ1-μ)^2；(6)</p><blockquote><p>将式(5)代入式(6),得到等价公式:</p></blockquote><p>　　　　　　g=ω0<em>ω1</em>(μ0-μ1)^2; 　(7)　这就是类间方差</p><blockquote><p>采用遍历的方法得到使类间方差g最大的阈值T,即为所求。</p></blockquote><p>在matlab中有一个函数可以直接运行：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I = imread('chepai.jpg')<span class="comment">;</span></span><br><span class="line">I = rgb2gray(<span class="name">I</span>)<span class="comment">;</span></span><br><span class="line">T2 = graythresh(<span class="name">I</span>)<span class="comment">;</span></span><br><span class="line">num2 = im2bw(<span class="name">I</span>,T2)<span class="comment">;</span></span><br><span class="line">imshow(<span class="name">num2</span>)</span><br></pre></td></tr></table></figure></p><h2 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h2><blockquote><p>1、数学建模的重要性，能参加的最好参加一下，涉及的知识面很广，提高眼界。<br>2、队友，不一定非要求理学院，计算机学院，经济学院<br>3、心态很重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数字图像处理基础&quot;&gt;&lt;a href=&quot;#数字图像处理基础&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理基础&quot;&gt;&lt;/a&gt;数字图像处理基础&lt;/h2&gt;&lt;p&gt;首先是读取图片文件&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clc;&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;clear&lt;/span&gt; all;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num_I = imread(&lt;span class=&quot;string&quot;&gt;&#39;pathname&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imfinfo =(&lt;span class=&quot;string&quot;&gt;&#39;pathname&#39;&lt;/span&gt;)  % 输出图像的基本信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中pathname为路径名，最好为绝对路径，如果为相对路径必须让matlab的工作路径与图片路径一致。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数字图像处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>我的简历</title>
    <link href="http://yoursite.com/2019/08/23/MyResume/"/>
    <id>http://yoursite.com/2019/08/23/MyResume/</id>
    <published>2019-08-23T05:20:32.365Z</published>
    <updated>2020-09-24T06:27:40.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyResume"><a href="#MyResume" class="headerlink" title="MyResume"></a>MyResume</h1><hr><h2 id="胥帆"><a href="#胥帆" class="headerlink" title="胥帆"></a>胥帆</h2><blockquote><p><strong>基本信息</strong>：<br>性别：男<br>出生年月：1999.05.01<br>学历：本科<br>专业：通信工程<br>Email: <a href="mailto:ctgu_xufan@foxmail.com" target="_blank" rel="noopener">ctgu_xufan@foxmail.com</a><br>个人博客：<a href="https://yimofan.github.io" target="_blank" rel="noopener">https://yimofan.github.io</a><br><a id="more"></a></p></blockquote><blockquote><ul><li>工科男一枚，程序员一只。</li><li>喜欢学习各种技术，热爱科研及编程。</li><li>热爱生活，积极进取。</li><li>性格随和，宽容大方。</li></ul></blockquote><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><table><thead><tr><th style="text-align:left">三峡大学</th><th style="text-align:left">专业：通信工程</th><th style="text-align:left">2016.9-2020.6 宜昌</th></tr></thead><tbody><tr><td style="text-align:left"><strong>平均成绩：89.05</strong></td><td style="text-align:left"><strong>专业排名：3/66</strong></td><td style="text-align:left"><strong>GPA：3.416/4.0</strong></td></tr></tbody></table><div align="center"></div><div style="float:left"></div><div style="float:right"></div><div style="float:left"></div><div align="center"></div><div style="float:right"></div><p><strong>论文发表</strong>：<a href="https://ieeexplore.ieee.org/document/8950159" target="_blank" rel="noopener">Z. Cai, Z. Xiong, K. Wan, Y. Xu and F. Xu, “A Node Selecting Approach for Traffic Network Based on Artificial Slime Mold,” in IEEE Access, vol. 8, pp. 8436-8448, 2020.</a> </p><h2 id="奖学金及学习情况"><a href="#奖学金及学习情况" class="headerlink" title="奖学金及学习情况"></a>奖学金及学习情况</h2><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">奖学金</th><th style="text-align:center">班级成绩排名</th><th style="text-align:center">年级成绩排名</th><th style="text-align:center">综测排名</th></tr></thead><tbody><tr><td style="text-align:center">2016-2017</td><td style="text-align:center">国家励志奖学金校二等奖学金</td><td style="text-align:center">1/36</td><td style="text-align:center">5/131</td><td style="text-align:center">5/131</td></tr><tr><td style="text-align:center">2017-2018</td><td style="text-align:center">国家励志奖学金校一等奖</td><td style="text-align:center">1/37</td><td style="text-align:center">3/66</td><td style="text-align:center">2/66</td></tr><tr><td style="text-align:center">2018-2019</td><td style="text-align:center">国家励志奖学金校二等奖</td><td style="text-align:center">2/37</td><td style="text-align:center">5/66</td><td style="text-align:center">5/66</td></tr><tr><td style="text-align:center">2019-2020</td><td style="text-align:center">国家励志奖学金校一等奖</td><td style="text-align:center">1/37</td><td style="text-align:center">3/66</td><td style="text-align:center">3/66</td></tr></tbody></table><h2 id="学科竞赛"><a href="#学科竞赛" class="headerlink" title="学科竞赛"></a>学科竞赛</h2><h4 id="国家级竞赛"><a href="#国家级竞赛" class="headerlink" title="国家级竞赛"></a>国家级竞赛</h4><ul><li>2019年美国大学生数学建模国家一等奖（Escape From the Louver）</li><li>2018年全国大学生电工数学建模竞赛国家一等奖（海南省主要城市房价的分析与预测）</li><li>2019年全国大学生电工数学建模竞赛国家二等奖（停车场车位的排布与规划）</li></ul><h4 id="省部级竞赛"><a href="#省部级竞赛" class="headerlink" title="省部级竞赛"></a>省部级竞赛</h4><ul><li>2017年高教杯全国大学生数学建模竞赛省二等奖（CT系统参数标定及成像）</li><li>2019年第十届湖北省蓝桥杯C/C++组二等奖</li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><ul><li><strong>去雾算法gui</strong>：<a href="https://github.com/YiMoFan/diqilun_gui" target="_blank" rel="noopener">去雾算法</a></li><li><strong>2018年国赛程序</strong>：<a href="https://github.com/YiMoFan/2018guosai" target="_blank" rel="noopener">国赛程序</a></li><li><strong>hexo搭建的个人博客</strong>：<a href="https://github.com/YiMoFan/YiMoFan.github.io" target="_blank" rel="noopener">个人博客</a></li><li><strong>蓝桥杯训练</strong>：<a href="https://github.com/YiMoFan/lanqiaobeixunlian" target="_blank" rel="noopener">蓝桥杯训练</a></li><li><strong>图像处理阈值分割</strong>：<a href="https://github.com/YiMoFan/Otsu" target="_blank" rel="noopener">阈值分割</a></li></ul><h2 id="资格证书"><a href="#资格证书" class="headerlink" title="资格证书"></a>资格证书</h2><blockquote><p> 1、通过了CET-4考试，具有较好的英文阅读能力，能阅读英文技术书籍和文档，能进行基本的口语交流。<br>2、计算机三级网络技术，具有一定计算机运行能力和知识。</p></blockquote><h2 id="担任职务"><a href="#担任职务" class="headerlink" title="担任职务"></a>担任职务</h2><blockquote><h3 id="启明星创新实验室软件组组长"><a href="#启明星创新实验室软件组组长" class="headerlink" title="启明星创新实验室软件组组长"></a><a href="https://baike.baidu.com/item/%E4%B8%89%E5%B3%A1%E5%A4%A7%E5%AD%A6%E5%90%AF%E6%98%8E%E6%98%9F%E5%88%9B%E6%96%B0%E5%AE%9E%E9%AA%8C%E5%AE%A4/18559411?fr=aladdin" target="_blank" rel="noopener">启明星创新实验室</a>软件组组长</h3><blockquote><p><strong>单位</strong>：<a href="https://www.ctguqmx.com/" target="_blank" rel="noopener">三峡大学计算机与信息学院启明星创新实验室</a><br><strong>时间</strong>：2017-2018<br><strong>职责</strong>：负责管理启明星工作室软件组的各项事务，包括规章制度的制定，人员招新管理，每周总结的例会及每周签到的监督，承接各老师给予的各项项目的制作等工作。<br><strong>收获</strong>：使自己在管理及与人交流方面的能力得到较高的提升，学会对自己进行自我控制，学会了每周对自己的学习成果进行总结，同时提升了自己的眼界，了解到许多在计算机软件方面的知识和结识了很多的大佬。</p></blockquote><h3 id="数学建模助理教练"><a href="#数学建模助理教练" class="headerlink" title="数学建模助理教练"></a>数学建模助理教练</h3><blockquote><p><strong>单位</strong>：三峡大学理学院<br><strong>时间</strong>：2018.3-2019.3<br><strong>职责</strong>：负责管理参加数学建模国赛队伍的培训，讲座及讲评论文。协助教练老师组安排数学建模国赛期间的各队伍的机位，后勤工作。<br><strong>收获</strong>：在教别人数学建模的知识的同时也巩固了自己所学到的数学建模的知识，在编程方面能够更加熟练的掌握各个算法的思路，在改卷的过程中也能评判出好文章的好处和差文章的不足，方便自己在以后比赛的过程中为文章添加更多的亮点。</p></blockquote></blockquote><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ol><li>具有较强的数学功底和数学分析能力，高等数学（上：99  下：93）和数值分析（99）都取得了较高的成绩， 参加了各类数学建模大型赛事幵都取得了成绩，之后还担仸了一年的数学建模助理教练，加强了自身的数学思 维和编程能力。熟悉数学建模中数学公式的建立和分析以及求解。 </li><li>本科阶段动手能力和编程能力较强，对各种技术和科研充满热情，做过部分的图像处理方面的研究，包括otsu 阈值分割算法及其的改进（课设：95 分），图像去雾算法的研究及程序的实现，看过何凯文的Guided Image Filtering及程序的实现</li><li>大学期间一直在启明星创新实验室中学习，在其严格的规章制度下每周都会参加算法竞赛幵举行周例会做周总 结，还自主通过hexo和github搭建了个人博客幵把自己所学知识进行更博。 </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MyResume&quot;&gt;&lt;a href=&quot;#MyResume&quot; class=&quot;headerlink&quot; title=&quot;MyResume&quot;&gt;&lt;/a&gt;MyResume&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;胥帆&quot;&gt;&lt;a href=&quot;#胥帆&quot; class=&quot;headerlink&quot; title=&quot;胥帆&quot;&gt;&lt;/a&gt;胥帆&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本信息&lt;/strong&gt;：&lt;br&gt;性别：男&lt;br&gt;出生年月：1999.05.01&lt;br&gt;学历：本科&lt;br&gt;专业：通信工程&lt;br&gt;Email: &lt;a href=&quot;mailto:ctgu_xufan@foxmail.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ctgu_xufan@foxmail.com&lt;/a&gt;&lt;br&gt;个人博客：&lt;a href=&quot;https://yimofan.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yimofan.github.io&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="简历" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>快速幂取模</title>
    <link href="http://yoursite.com/2019/08/23/%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/"/>
    <id>http://yoursite.com/2019/08/23/快速幂取模/</id>
    <published>2019-08-23T05:20:32.363Z</published>
    <updated>2020-09-24T07:04:01.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速幂取模"><a href="#快速幂取模" class="headerlink" title="快速幂取模"></a>快速幂取模</h2><p>我们先从简单的例子入手：求a^b mod c = 几。</p><a id="more"></a><p>算法1.首先直接地来设计这个算法：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">ans</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">1</span>;<span class="built_in">i</span>&lt;=b;<span class="built_in">i</span>++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> * a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> <span class="comment">% c;</span></span><br></pre></td></tr></table></figure></p><p>这个算法的时间复杂度体现在for循环中，为O（b）.这个算法存在着明显的问题，如果a和b过大，很容易就会溢出。</p><p>那么，我们先来看看第一个改进方案：在讲这个方案之前，要先有这样一个公式：</p><p>a^b mod c = (a mod c)^b mod c</p><p><img src="/2019/08/23/快速幂取模/one.png" alt></p><p>上面公式为下面公式的引理，即积的取余等于取余的积的取余。</p><p><img src="/2019/08/23/快速幂取模/two.png" alt></p><p>证明了以上的公式以后，我们可以先让a关于c取余，这样可以大大减少a的大小，</p><p>于是不用思考的进行了改进：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">ans</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = a <span class="comment">% c; //加上这一句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">1</span>;<span class="built_in">i</span>&lt;=b;<span class="built_in">i</span>++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> * a <span class="comment">% c;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> <span class="comment">% c;</span></span><br></pre></td></tr></table></figure></p><p>这个算法在时间复杂度上没有改进，仍为O(b)，不过已经好很多的，但是在c过大的条件下，还是很有可能超时，所以，我们推出以下的快速幂算法。</p><p>快速幂算法依赖于以下明显的公式，我就不证明了。</p><p><img src="/2019/08/23/快速幂取模/three.png" alt></p><p>有了上述两个公式后，我们可以得出以下的结论：</p><p>1.如果b是偶数，我们可以记k = a^2 mod c，那么求(k)^(b/2) mod c就可以了。</p><p>2.如果b是奇数，我们也可以记k = a^2 mod c，那么求((k)^(b/2) mod c × a ) mod c =((k)^(b/2) mod c * a) mod c 就可以了。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nt ans = <span class="number">1</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span> = a % c<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">if(b%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = (ans * a) mod c<span class="comment">; //如果是奇数，要多求一步，可以提前算到ans中</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">k</span> = (a*a) % c<span class="comment">; //我们取a2而不是a</span></span><br><span class="line"></span><br><span class="line">for(int i = <span class="number">1</span><span class="comment">;i&lt;=b/2;i++)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = (ans * k) % c<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = ans % c<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到，我们把时间复杂度变成了O(b/2).当然，这样子治标不治本。但我们可以看到，当我们令k = (a * a) mod c时，状态已经发生了变化，我们所要求的最终结果即为(k)b/2 mod c而不是原来的ab mod c，所以我们发现这个过程是可以迭代下去的。当然，对于奇数的情形会多出一项a mod c，所以为了完成迭代，当b是奇数时，我们通过</p><p>ans = (ans * a) % c;来弥补多出来的这一项，此时剩余的部分就可以进行迭代了。</p><p>形如上式的迭代下去后，当b=0时，所有的因子都已经相乘，算法结束。于是便可以在O（log b）的时间内完成了。于是，有了最终的算法：快速幂算法。</p><p><div align="right">——–摘自百度文库</div></p><hr><p>当几个数连续乘最后取模时，可以将每个数字先取模，最后在取模，即%对于*具有结合律，但是如果当用来取模的数本身就很大，采取上述方法就不行了，这个时候可以借鉴快速幂取模的方法，来达到取模的效果，即<strong>当快速幂的数据范围超过long long时，可以通过快速幂中套快速乘的方法防止溢出</strong>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(ans+a)%p;</span><br><span class="line">a=(a+a)%p;</span><br><span class="line">b=b&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Mode</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> base = a%p;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span> (b&amp;<span class="number">1</span>) ans=<span class="built_in">pow</span>(ans,base,p)%p;</span><br><span class="line">base =<span class="built_in">pow</span>(base,base,p)%p;</span><br><span class="line">b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;a,&amp;b,&amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Mode(a,b,p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速幂取模&quot;&gt;&lt;a href=&quot;#快速幂取模&quot; class=&quot;headerlink&quot; title=&quot;快速幂取模&quot;&gt;&lt;/a&gt;快速幂取模&lt;/h2&gt;&lt;p&gt;我们先从简单的例子入手：求a^b mod c = 几。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>买不到的数目</title>
    <link href="http://yoursite.com/2019/08/23/%E4%B9%B0%E4%B8%8D%E5%88%B0%E7%9A%84%E6%95%B0%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/08/23/买不到的数目/</id>
    <published>2019-08-23T05:20:32.360Z</published>
    <updated>2020-09-24T08:22:09.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。<br>小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买  10  颗糖。<br>你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。<br>本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>两个正整数，表示每种包装中糖的颗数(都不多于1000) </p></blockquote><a id="more"></a><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>一个正整数，表示最大不能买到的糖数 </p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote><p>4  7 </p></blockquote><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote><p>17</p></blockquote><p><strong> 方法一 </strong><br>对于题中的两个数a和b，假设较小的为a，只需要确定从a开始的第一次出现a个连续的可以被a和b组合出来的数。<br>因为这个之后的每个数都可以是这些数加a或者加b得到的，然后在将这连续的数中的第一个数减一就可以的<br>得到最大的不能组合出来的数。举个例子：<br>4和7，第一次出现的连续4个可以被组合的数是18,19,20,21，则之后的22=18+4,23=19+4，，，。最大的就是18-1=17。</p><p><strong> 方法二 </strong><br>对于题中的数a和b，可以确定的是他们的最大公倍数之后的数肯定是能够被组合的，所以可以通过从最大的公<br>倍数依次减一判断能否组合，（判断的方法：先判断能否被a或者被b整数，若不能，减a，判断能否被b整数，若<br>不能，再减a，知道该数小于a）；</p><p><strong> 方法三 </strong><br><strong><em> 扩展欧几里得 </em></strong>： 自然数a,b互质,则不能表示成ax+by（x,y为非负整数）的最大整数是ab-a-b。<br>证明：</p><p>a或者b是1的情况下容易证明.<br>以下情况都是a&gt;1且b&gt;1的情况.<br>首先证明ab-a-b不能表示成ax+by<br>假设ab-a-b=ax+by,那么ab=am+bn (m,n都大于等于1)<br>左边是a的倍数,右边am是a的倍数,那么要求bn也要是a的倍数<br>b不是a的倍数,只能要求n是a的倍数,这样的话,bn=bn’a&gt;=ba<br>那么am=ab-bn所以am1矛盾.<br>接着证明ab-a-b+i能表示成ax+by(i&gt;0)<br>因为ab互质,最大公约数就是1,根据辗转相减的方法知ma+nb=1,<br>不妨假设m&gt;0,n1(m=0意味着nb=1不可能的),所以ab-a-b+i(ma+nb)=(im-1)a+(a+in-1)b<br>im-1&gt;0,现在只要证明a+in-1&gt;=0,因为ima+inb=i<br>如果,|in|&gt;ja其中j&gt;0,那么ima=i+|in|b&gt;jab,所以im&gt;jb<br>所以ima+inb=(im-jb)a-(|in|-ja)b=i,说明|in|&gt;ja时,我们就能调整im,in使得|in|</p><p>二程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (b == <span class="number">0</span> ? a:(gcd(b,a%b)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bei</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a*b/gcd(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = bei(a,b);</span><br><span class="line"><span class="keyword">int</span> temp = ans;</span><br><span class="line"><span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp % a == <span class="number">0</span> || temp % b == <span class="number">0</span>)</span><br><span class="line">temp = --ans;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">temp -= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fun(a,b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。&lt;br&gt;小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买  10  颗糖。&lt;br&gt;你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。&lt;br&gt;本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;两个正整数，表示每种包装中糖的颗数(都不多于1000) &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>DSB-SC通信系统的设计与实现</title>
    <link href="http://yoursite.com/2019/08/23/DSB-SC%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/23/DSB-SC通信系统的设计与实现/</id>
    <published>2019-08-23T05:20:32.357Z</published>
    <updated>2019-03-07T07:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DSB-SC通信系统的设计与实现"><a href="#DSB-SC通信系统的设计与实现" class="headerlink" title="DSB-SC通信系统的设计与实现"></a>DSB-SC通信系统的设计与实现</h2><h3 id="一、课程设计主要内容"><a href="#一、课程设计主要内容" class="headerlink" title="一、课程设计主要内容"></a>一、课程设计主要内容</h3><p>DSB-SC通信系统(含调制、加性信道、解调系统等单元)的设计与实现；（要 求：信源、载波、高斯白噪声等的参数自己设定；设计结果要有已调信号的时域波形、频谱、解调信号波形、频谱等）</p><a id="more"></a><h3 id="二、设计原理"><a href="#二、设计原理" class="headerlink" title="二、设计原理"></a>二、设计原理</h3><h4 id="2-1-调制"><a href="#2-1-调制" class="headerlink" title="2.1 调制"></a>2.1 调制</h4><p>调制在通信过程中起着极其重要的作用：无线电通信是通过空间辐射方式传输号的，调制过程可以将信号的频谱搬移到容易一电磁波形式辐射的较高频范围；此外，调制过程可以将不同的信号通过频谱搬移托付至不同频率的载波上，实现多路复用，不至于互相干扰。<br>设调制函数为f(t) ，载 波 函 数 为 cos(Wct)，则调制后的函数表达式为SDSB(t) = f(t)cosWct，<br>振幅调制是一种实用很广的连续波调制方式。调幅信号X(t)主要有调制信号和载波信号组成。调幅器原理如图1所示：</p><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/one.png" alt="调幅器原理框图" title="调幅器原理框图"><br>其中载波信号C(t)用于搭载有用信号，其频率较高。幅度调制信号含有有用信息，其频率比较低。</div></p><h4 id="2-2解调"><a href="#2-2解调" class="headerlink" title="2.2解调"></a>2.2解调</h4><p>相干解调就是将得到的调制后信号乘以载波函数， 然后通过低通滤波器， 就可以恢复出原始信号。 将原始信号做 fft 变换就可以得到其频率特性。其原理框图为：</p><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/two.png" alt="解调器原理框图" title="解调器原理框图"></div></p><h4 id="2-3频谱分析"><a href="#2-3频谱分析" class="headerlink" title="2.3频谱分析"></a>2.3频谱分析</h4><p>当制信号f(t)为确定信号时，已调信号的频谱为 SDSB = 1/2F(W-Wc)+1/2F(W+Wc)</p><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/three.png" alt="双边带调幅频谱图" title="双边带调幅频谱图"></div></p><h3 id="三、设计思路及程序代码"><a href="#三、设计思路及程序代码" class="headerlink" title="三、设计思路及程序代码"></a>三、设计思路及程序代码</h3><blockquote><p>1、设定该通信系统的各类参数。<br>2、设定调制信号并绘出调制信号的波形，计算出该调制信号的频谱并绘出频谱图，设定载波并画出载波波形和载波频谱图，然后将调制信号与载波相乘设定已调信号并画出已调信号的波形和频谱图。<br>3、设定信道噪声参数并画出噪声频谱，然后将噪声与已调信号相加画出信号中有噪声的信号波形和频谱，并根据该信号的频谱设定接收端理想的带通滤波器的参数画出该带通滤波器的传输函数。<br>4、将信道中的信号通过带通滤波器画出通过滤波器之后的接收波形及其频谱，然后将该波形进行相干解调，与本地载波相乘得到混频信号画出波形及其频谱。<br>5、设定混频之后的理想低通滤波器的参数并画出其传输函数波形，然后将混频信号通过低通滤波器得到接收信号画出信号波形及其频谱与调制信号进行比较。</p></blockquote><p><strong> 程序 </strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">close all;</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 系统参数设定</span></span><br><span class="line">a0 = <span class="number">1</span>;  <span class="comment">% 调制信号的幅度</span></span><br><span class="line">fw = <span class="number">50</span>;  <span class="comment">% 调制信号频率</span></span><br><span class="line">fc = <span class="number">100</span>;  <span class="comment">% 载波频率</span></span><br><span class="line">t0 = <span class="number">0.15</span>;  <span class="comment">% 信号时长</span></span><br><span class="line">snr = <span class="number">30</span>;  <span class="comment">% 解调器输入信噪比</span></span><br><span class="line">dt = (<span class="number">4</span>/fc)*<span class="number">0.001</span>;  <span class="comment">% 系统的时域采样间隔</span></span><br><span class="line">fs = <span class="number">1</span>/dt;  <span class="comment">% 系统采样频率</span></span><br><span class="line">df = <span class="number">0.2</span>;  <span class="comment">% 所需的频率分辨率</span></span><br><span class="line">t = <span class="number">0</span>:dt:t0;</span><br><span class="line">len = <span class="built_in">length</span>(t);</span><br><span class="line">snr_lin = <span class="number">10</span>^(snr/<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 调制信号波形及频谱</span></span><br><span class="line">mt = a0*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fw*t);  <span class="comment">% 调制信号</span></span><br><span class="line">[Mmt,m,df1,f] = T2F(mt,dt,df,fs);  <span class="comment">% 调制信号的频谱</span></span><br><span class="line">[Bw] = signalband(Mmt,df,t0);  <span class="comment">% 调制信号的等效带宽</span></span><br><span class="line">f_start = fc-Bw;</span><br><span class="line">f_cutoff = fc + Bw;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,mt,<span class="string">'r'</span>);  <span class="comment">% 调制信号的波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'调制信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(mt)*<span class="number">1.1</span> <span class="built_in">max</span>(mt)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(Mmt)),<span class="string">'r'</span>);  <span class="comment">% 调制信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);ylabel(<span class="string">'调制信号的频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fw <span class="number">2</span>*fw <span class="built_in">min</span>(<span class="built_in">abs</span>(Mmt)) <span class="built_in">max</span>(<span class="built_in">abs</span>(Mmt)*<span class="number">1.1</span>)]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">ct = <span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fc*t);  <span class="comment">% 载波</span></span><br><span class="line"><span class="built_in">plot</span>(t,ct,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'载波'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(ct)*<span class="number">1.1</span> <span class="built_in">max</span>(ct)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">[C,ct,df1,f] = T2F(ct,dt,df,fs);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(C)),<span class="string">'r'</span>)  <span class="comment">% 载波频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);ylabel(<span class="string">'载波频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(C)) <span class="built_in">max</span>(<span class="built_in">abs</span>(C))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">u = mt(<span class="number">1</span>:len).*ct(<span class="number">1</span>:len);</span><br><span class="line"><span class="built_in">plot</span>(t,u,<span class="string">'r'</span>);  <span class="comment">% 已调信号</span></span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,mt,<span class="string">'k--'</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,-mt,<span class="string">'k--'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'已调信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(u)*<span class="number">1.1</span> <span class="built_in">max</span>(u)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">[U,u,df1,f] = T2F(u,dt,df,fs);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(U)),<span class="string">'r'</span>)  <span class="comment">% 已调信号频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);ylabel(<span class="string">'已调信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*(fc+fw) <span class="number">2</span>*(fc+fw) <span class="built_in">min</span>(<span class="built_in">abs</span>(U)) <span class="built_in">max</span>(<span class="built_in">abs</span>(U))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 已调信号送入信道</span></span><br><span class="line">signal_power = power_x(u(<span class="number">1</span>:len)); <span class="comment">%已调信号的平均功率</span></span><br><span class="line">noise_power=(signal_power*fs)/(snr_lin*(<span class="number">2</span>* Bw));<span class="comment">%求出噪声方差（噪声均值为0）</span></span><br><span class="line">noise_std = <span class="built_in">sqrt</span>(noise_power); <span class="comment">%噪声标准偏差</span></span><br><span class="line">noise = noise_std*<span class="built_in">randn</span>(<span class="number">1</span>,len); <span class="comment">%产生噪声</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,noise,<span class="string">'r'</span>);<span class="comment">% 画出噪声波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'噪声信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(noise) <span class="built_in">max</span>(noise)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">[noisef,noise,df1,f]=T2F(noise,dt,df,fs);<span class="comment">%噪声频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(noisef)),<span class="string">'r'</span>)<span class="comment">% 画出噪声频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'噪声频谱'</span>);</span><br><span class="line">s_dsb=u(<span class="number">1</span>:len)+noise(<span class="number">1</span>:len);<span class="comment">%叠加了噪声的已调信号</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">%画出叠加了噪声的已调信号波形</span></span><br><span class="line"><span class="built_in">plot</span>(t,s_dsb,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'信道中的信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(s_dsb) <span class="built_in">max</span>(s_dsb)]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">[s_dsb_f,s_dsb,df1,f]=T2F(s_dsb,dt,df,fs);<span class="comment">%求出叠加了噪声的已调信号频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(s_dsb_f)),<span class="string">'r'</span>)<span class="comment">% 画出叠加了噪声的已调信号频谱</span></span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(s_dsb_f)) <span class="built_in">max</span>(<span class="built_in">abs</span>(s_dsb_f))*<span class="number">1.1</span>]);</span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'信道中信号频谱'</span>);</span><br><span class="line">[H,f]=bp_f(<span class="built_in">length</span>(s_dsb),f_start,f_cutoff,df1,fs,<span class="number">1</span>);<span class="comment">%求带通滤波器</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(H)),<span class="string">'r'</span>)<span class="comment">% 画出带通滤波器</span></span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(H)) <span class="built_in">max</span>(<span class="built_in">abs</span>(H))*<span class="number">1.1</span>]);</span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'带通滤波器'</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 接收信号输入带通和解调器</span></span><br><span class="line">DEM = H.*s_dsb_f; <span class="comment">%滤波器输出的频谱</span></span><br><span class="line">[dem]=F2T(DEM,fs);<span class="comment">%滤波器的输出波形</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)<span class="comment">%经过理想带通滤波器后的信号波形</span></span><br><span class="line"><span class="built_in">plot</span>(t,dem(<span class="number">1</span>:len),<span class="string">'r'</span>)<span class="comment">%画出经过理想带通滤波器后的信号波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'理想BPF输出信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(dem(<span class="number">1</span>:len)) <span class="built_in">max</span>(dem(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br><span class="line">[demf,dem,df1,f]=T2F(dem(<span class="number">1</span>:len),dt,df,fs);<span class="comment">%求经过理想带通滤波器后信号频谱</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(demf)),<span class="string">'r'</span>);<span class="comment">% 画出经过理想带通滤波器后信号频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'理想BPF输出信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(demf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(demf))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,ct(<span class="number">1</span>:len),<span class="string">'r'</span>);</span><br><span class="line"><span class="comment">% axis([0 t0 -1.2 1.2]);</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'本地载波'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(ct(<span class="number">1</span>:len))*<span class="number">1.1</span> <span class="built_in">max</span>(ct(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)  <span class="comment">% 载波频谱</span></span><br><span class="line">[C,ct,df1,f]=T2F(ct(<span class="number">1</span>:len),dt,df,fs);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(C)),<span class="string">'r'</span>)  <span class="comment">% 画出载波频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'本地载波频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(C))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(C))*<span class="number">1.1</span>]);</span><br><span class="line">der=dem(<span class="number">1</span>:len).*ct(<span class="number">1</span>:len);<span class="comment">%混频</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>)<span class="comment">%画出混频后的信号</span></span><br><span class="line"><span class="built_in">plot</span>(t,der,<span class="string">'r'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(der)*<span class="number">1.1</span> <span class="built_in">max</span>(der)*<span class="number">1.1</span>]);</span><br><span class="line"><span class="comment">% axis([0 t0 -R R]);</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'混频后的信号'</span>);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">[derf,der,df1,f]=T2F(der,dt,df,fs);<span class="comment">%求混频后的信号频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(derf)),<span class="string">'r'</span>)<span class="comment">%画出混频后的信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'混频后信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(derf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(derf))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 混频信号输入低通滤波器</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>)</span><br><span class="line">[LPF,f]=lp_f(<span class="built_in">length</span>(der),Bw,df1,fs,<span class="number">2</span>);<span class="comment">%求低通滤波器</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(LPF)),<span class="string">'r'</span>);<span class="comment">% 画出理想低通滤波器</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'理想LPF'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(LPF))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(LPF))*<span class="number">1.1</span>]);</span><br><span class="line">DM = LPF.*derf; <span class="comment">%理想低通滤波器输出的频谱</span></span><br><span class="line">[dm]=F2T(DM,fs);<span class="comment">%滤波器的输出波形</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,dm(<span class="number">1</span>:len),<span class="string">'r'</span>);<span class="comment">%画出经过低通滤波器后的解调出的波形</span></span><br><span class="line"><span class="comment">% axis([0 t0 -R R]);</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'LPF输出信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(dm(<span class="number">1</span>:len))*<span class="number">1.1</span> <span class="built_in">max</span>(dm(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">[dmf,dm,df1,f]=T2F(dm(<span class="number">1</span>:len),dt,df,fs);<span class="comment">%求LPF输出信号的频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(dmf)),<span class="string">'r'</span>);<span class="comment">%画出LPF输出信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'LPF输出信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-1.5</span>*fw <span class="number">1.5</span>*fw <span class="built_in">min</span>(<span class="built_in">abs</span>(dmf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(dmf))*<span class="number">1.1</span>]);</span><br><span class="line">dmd=dm(<span class="number">1</span>:len)-<span class="built_in">mean</span>(dm(<span class="number">1</span>:len));</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,dmd,<span class="string">'r'</span>);<span class="comment">%画出恢复信号(去除直流分量)</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'恢复信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(dmd)*<span class="number">1.1</span> <span class="built_in">max</span>(dmd)*<span class="number">1.1</span>]);</span><br><span class="line">[dmdf,dmd,df1,f]=T2F(dmd,dt,df,fs);<span class="comment">%求恢复信号的频谱</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(dmdf)),<span class="string">'r'</span>);<span class="comment">%画出恢复信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'恢复信号的频谱'</span>);</span><br><span class="line">axis([<span class="number">-1.5</span>*fw <span class="number">1.5</span>*fw <span class="built_in">min</span>(<span class="built_in">abs</span>(dmdf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(dmdf))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,m(<span class="number">1</span>:len),<span class="string">'r'</span>);<span class="comment">% 画出调制信号波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'调制信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(m(<span class="number">1</span>:len))*<span class="number">1.1</span> <span class="built_in">max</span>(m(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br></pre></td></tr></table></figure></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[H,f]</span>=<span class="title">bp_f</span><span class="params">(n,f_start,f_cutoff,df1,fs,p)</span></span></span><br><span class="line"><span class="comment">%带通滤波器函数 输入设计的滤波器参数，产生带通滤波器频率特性函数H和频率向量f</span></span><br><span class="line"><span class="comment">%------------------------输入参数</span></span><br><span class="line"><span class="comment">%n 带通滤波器的输入信号长度</span></span><br><span class="line"><span class="comment">%f_start 通带起始频率</span></span><br><span class="line"><span class="comment">%f_cutoff 带通滤波器的截止频率</span></span><br><span class="line"><span class="comment">%df1 频率分辨率</span></span><br><span class="line"><span class="comment">%fs 抽样频率</span></span><br><span class="line"><span class="comment">%p 滤波器幅度</span></span><br><span class="line"><span class="comment">%----------------------输出(返回)参数</span></span><br><span class="line"><span class="comment">%H 带通滤波器频率响应</span></span><br><span class="line"><span class="comment">%f 频率向量</span></span><br><span class="line"><span class="comment">%设计滤波器</span></span><br><span class="line">n_cutoff = <span class="built_in">floor</span>(f_cutoff/df1);</span><br><span class="line">n_start = <span class="built_in">floor</span>(f_start/df1);</span><br><span class="line">f = [<span class="number">0</span>:df1:df1*(n<span class="number">-1</span>)] -fs/<span class="number">2</span>; <span class="comment">%频率向量</span></span><br><span class="line">H = <span class="built_in">zeros</span>(<span class="built_in">size</span>(f));</span><br><span class="line">H(n_start+<span class="number">1</span>:n_cutoff) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff-n_start);</span><br><span class="line">H(<span class="built_in">length</span>(f) - n_cutoff+<span class="number">1</span>:<span class="built_in">length</span>(f)-n_start) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff-n_start);</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[m]</span>=<span class="title">F2T</span><span class="params">(M,fs)</span></span></span><br><span class="line"><span class="comment">%-------------------------输入参数</span></span><br><span class="line"><span class="comment">%M：信号的频谱</span></span><br><span class="line"><span class="comment">%fs:系统采样频率</span></span><br><span class="line"><span class="comment">%--------------------输出(返回)参数</span></span><br><span class="line"><span class="comment">%m:傅里叶逆变换后的信号，注意其长度为2的整数次幂，利用其画波形时，要注意选取m的一部分，选取长度和所给时间序列t的长度要一致，plot(t,m(1:length(t)))，否则会出错。</span></span><br><span class="line">m = <span class="built_in">real</span>(ifft(M))*fs;</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function [M,m,df]=fftseq(m,ts,df)</span><br><span class="line">%各参数含义与子函数T2F中的完全相同，完成</span><br><span class="line">fs = 1/ts;</span><br><span class="line">if nargin ==2</span><br><span class="line">n1 =0;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">n1 = fs/df;</span><br><span class="line">end</span><br><span class="line">n2 = length(m);</span><br><span class="line">n = 2^(max(nextpow2(n1),nextpow2(n2)));</span><br><span class="line">M = fft(m,n);</span><br><span class="line">m = [m,zeros(1,n-n2)];</span><br><span class="line">df = fs/n;</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[H,f]</span>=<span class="title">lp_f</span><span class="params">(n,f_cutoff,df1,fs,p)</span></span></span><br><span class="line"><span class="comment">%低通滤波器函数 输入设计的滤波器参数，产生低通滤波器频率特性函数H和频率向量f</span></span><br><span class="line"><span class="comment">%------------------------输入参数</span></span><br><span class="line"><span class="comment">%n 低通滤波器的输入信号长度</span></span><br><span class="line"><span class="comment">%f_cutoff 低通滤波器的截止频率</span></span><br><span class="line"><span class="comment">%df1 频率分辨率</span></span><br><span class="line"><span class="comment">%fs 抽样频率</span></span><br><span class="line"><span class="comment">%p 滤波器幅度</span></span><br><span class="line"><span class="comment">%---------------------输出(返回)参数</span></span><br><span class="line"><span class="comment">%H 低通滤波器频率响应</span></span><br><span class="line"><span class="comment">%f 频率向量</span></span><br><span class="line">n_cutoff = <span class="built_in">floor</span>(f_cutoff/df1); <span class="comment">%设计滤波器</span></span><br><span class="line">f = [<span class="number">0</span>:df1:df1*(n<span class="number">-1</span>)] -fs/<span class="number">2</span>; <span class="comment">%频率向量</span></span><br><span class="line">H = <span class="built_in">zeros</span>(<span class="built_in">size</span>(f));</span><br><span class="line">H(<span class="number">1</span>:n_cutoff) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff);</span><br><span class="line">H(<span class="built_in">length</span>(f) - n_cutoff+<span class="number">1</span>:<span class="built_in">length</span>(f)) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff);</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function p=power_x(<span class="keyword">x</span>)</span><br><span class="line"><span class="symbol">%x</span>:输入信号</span><br><span class="line"><span class="symbol">%p</span>:返回信号的<span class="keyword">x</span>功率</span><br><span class="line">p=(norm(<span class="keyword">x</span>).^<span class="number">2</span>)./length(<span class="keyword">x</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[Bw_eq]</span>=<span class="title">signalband</span><span class="params">(sf,df,T)</span></span></span><br><span class="line"><span class="comment">%计算信号等效带宽</span></span><br><span class="line"><span class="comment">%sf：信号频谱</span></span><br><span class="line"><span class="comment">%df:频率分辨率</span></span><br><span class="line"><span class="comment">%T：信号持续时间</span></span><br><span class="line">sf_max=<span class="built_in">max</span>(<span class="built_in">abs</span>(sf));</span><br><span class="line">Bw_eq=sum(<span class="built_in">abs</span>(sf).^<span class="number">2</span>)*df/T/sf_max.^<span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function [M,m,df1,f]=T2F(m,ts,df,fs)</span><br><span class="line"><span class="tag">%</span>------------------------输入参数</span><br><span class="line"><span class="tag">%<span class="selector-tag">m</span></span>:信号</span><br><span class="line"><span class="tag">%<span class="selector-tag">ts</span></span>:系统时域采样间隔</span><br><span class="line"><span class="tag">%<span class="selector-tag">df</span></span>:所需的频率分辨率</span><br><span class="line"><span class="tag">%<span class="selector-tag">fs</span></span>:系统采样频率</span><br><span class="line"><span class="tag">%</span>---------------------输出(返回)参数</span><br><span class="line"><span class="tag">%<span class="selector-tag">M</span></span>:傅里叶变换后的频谱序列</span><br><span class="line"><span class="tag">%<span class="selector-tag">m</span></span>: 输入信号参与过傅里叶变换后对应的序列，需要注意的是，该序列与输入信号m的区别，其长度是不一样的，输入的m长度不一定是2的整数次幂，而傅里叶变换要求输入信号长度为2的整数次幂，故傅里叶变换前需对输入的m信号进行补零，其长度有所增加，故输出参数中的m为补零后的输入信号，其长度与输入参数m不一样，但与M,f长度是一样的，并且，其与时间序列t所对应的序列m(1:length(t))与输入参数中的m是一致的。</span><br><span class="line"><span class="tag">%<span class="selector-tag">df1</span></span>:返回的频率分辨率</span><br><span class="line"><span class="tag">%<span class="selector-tag">f</span></span>:与M相对应的频率序列</span><br><span class="line">[M,m,df1]=fftseq(m,ts,df);</span><br><span class="line">f = [0:df1:df1*(length(m)-1)] -fs/2; %频率向量</span><br><span class="line">M=M/fs;</span><br></pre></td></tr></table></figure><h3 id="四、设计结果"><a href="#四、设计结果" class="headerlink" title="四、设计结果"></a>四、设计结果</h3><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo1.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo2.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo3.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo4.png" alt></div></p></blockquote><h3 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h3><p>设定调制信号是频率为50的正弦信号，载波是频率为100的余弦信号，由于软件仿真中是用的数字信号代替的<br>模拟信号，故得到的频谱图为频率在+50和-50的频谱图，又因为此处为了更加清楚的观察调制信号和载波的频谱图，<br>所以此处我限制坐标范围为-100到100，所以看到的为不准确的频谱图，载波频谱图亦是如此。然后将载波与调制信<br>号相乘得到已调信号的波形图并作出其包络，可以清楚的观察其频谱图，然后设定高斯噪声的参数并与已调信号<br> 相加得到加噪信号并作出频谱图，然后得到的理想带通滤波器的中心频率为-100和100，带宽为200，然后将加噪信<br>号通过带通滤波器得到的波形与已调信号几乎一致，然后与本地载波相乘得到混频信号并观察其频谱，然后设定<br>低通滤波器的中心频率为0，带宽为100，并将混频信号通过该低通滤波器得到恢复信号并作出其频谱图与调制信号<br>几乎一致，故该仿真结果正确。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DSB-SC通信系统的设计与实现&quot;&gt;&lt;a href=&quot;#DSB-SC通信系统的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;DSB-SC通信系统的设计与实现&quot;&gt;&lt;/a&gt;DSB-SC通信系统的设计与实现&lt;/h2&gt;&lt;h3 id=&quot;一、课程设计主要内容&quot;&gt;&lt;a href=&quot;#一、课程设计主要内容&quot; class=&quot;headerlink&quot; title=&quot;一、课程设计主要内容&quot;&gt;&lt;/a&gt;一、课程设计主要内容&lt;/h3&gt;&lt;p&gt;DSB-SC通信系统(含调制、加性信道、解调系统等单元)的设计与实现；（要 求：信源、载波、高斯白噪声等的参数自己设定；设计结果要有已调信号的时域波形、频谱、解调信号波形、频谱等）&lt;/p&gt;
    
    </summary>
    
    
      <category term="通信原理" scheme="http://yoursite.com/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>AMI/HDB3编译码设计与实现</title>
    <link href="http://yoursite.com/2019/08/23/AMI-HDB3%E7%BC%96%E8%AF%91%E7%A0%81%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/23/AMI-HDB3编译码设计与实现/</id>
    <published>2019-08-23T05:20:32.355Z</published>
    <updated>2019-03-07T07:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AMI-HDB3编译码设计与实现"><a href="#AMI-HDB3编译码设计与实现" class="headerlink" title="AMI/HDB3编译码设计与实现"></a>AMI/HDB3编译码设计与实现</h2><h3 id="一、课程设计主要内容"><a href="#一、课程设计主要内容" class="headerlink" title="一、课程设计主要内容"></a>一、课程设计主要内容</h3><p>熟悉AMI/HDB3码的编译码规则，了解AMI/HDB3码编译码的实现方法，运用MATLAB实现AMI/HDB3码编译码的仿真并分析。</p><a id="more"></a><h3 id="二、设计原理"><a href="#二、设计原理" class="headerlink" title="二、设计原理"></a>二、设计原理</h3><p>AMI码的全称是传号交替反转码。这是一种将消息代码0（空号）和1（传号）按如下规则进行编码的码：代码的0仍变换为传输码的0，而把代码中的1交替地变换为传输码的＋1、－1、＋1、－1…<br>由于AMI码的信号交替反转，故由它决定的基带信号将出现正负脉冲交替，而0电位保持不变的规律。由此看出，这种基带信号无直流成分，且只有很小的低频成分，因而它特别适宜在不允许这些成分通过的信道中传输。<br>从AMI码的编码规则看出，它已从一个二进制符号序列变成了一个三进制符号序列，而且也是一个二进制符号变换成一个三进制符号。把一个二进制符号变换成一个三进制符号所构成的码称为1B／1T码型。<br>AMI码除有上述特点外，还有编译码电路简单及便于观察误码情况等优点，它是一种基本的线路码，并得到广泛采用。但是，AMI码有一个重要缺点，即当它用来获取定时信息时，由于它可能出现长的连0串，因而会造成提取定时信号的困难。<br>为了保持AMI码的优点而克服其缺点，人们提出了许多改进的方法，HDB3码就是其中有代表性的一种。<br>  HDB3码是三阶高密度码的简称。HDB3码保留了AMI码所有的优点（如前所述），还可将连“0”码限制在3个以内，克服了AMI码出现长连“0”过多，对提取定时钟不利的缺点。HDB3码的功率谱基本上与AMI码类似。由于HDB3码诸多优点，所以CCITT建议把HDB3码作为PCM传输系统的线路码型。<br>    如何由二进制码转换成HDB3码呢？<br><strong> HDB3码编码规则如下 </strong>：<br>1．二进制序列中的“0”码在HDB3码中仍编为“0”码，但当出现四个连“0”码时，用取代节000V或B00V代替四个连“0”码。取代节中的V码、B码均代表“1”码，它们可正可负（即V+=＋1，V-=－1，B+=＋1，B-=－1）。<br>2．取代节的安排顺序是：先用000V，当它不能用时，再用B00V。000V取代节的安排要满足以下两个要求：<br>（1）各取代节之间的V码要极性交替出现（为了保证传号码极性交替出现，不引入直流成份）。<br>（2）V码要与前一个传号码的极性相同（为了在接收端能识别出哪个是原始传号码，哪个是V码？以恢复成原二进制码序列）。<br>    当上述两个要求能同时满足时，用000V代替原二进制码序列中的4个连“0”（用000V+或000V-）；而当上述两个要求不能同时满足时，则改用B00V（B+00V+或B-00V-，实质上是将取代节000V中第一个“0”码改成B码）。<br>3．HDB3码序列中的传号码（包括“1”码、V码和B码）除V码外要满足极性交替出现的原则。</p><h3 id="三、设计思路及程序代码"><a href="#三、设计思路及程序代码" class="headerlink" title="三、设计思路及程序代码"></a>三、设计思路及程序代码</h3><blockquote><p>1、随机生成一组数列。<br>2、使其中的1交替变为1和-1实现AMI码的编码。<br>3、将AMI码中4个0的情况按照HDB3码的编码规则实现HDB3码的编码。<br>4、将AMI码中的所以的-1变为1实现AMI码的译码。<br>5、判断HDB3码中两个0和三个0的情况并做比较实现HDB3码的译码。</p></blockquote><p><strong> 程序 </strong>：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">N = <span class="number">20</span>;</span><br><span class="line">yuanma = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,N));</span><br><span class="line">len_yuan = <span class="built_in">length</span>(yuanma);</span><br><span class="line">yuanma_4 = yuanma(<span class="number">4</span>);</span><br><span class="line"><span class="comment">%% AMI 编码</span></span><br><span class="line">AMI = <span class="built_in">zeros</span>(<span class="number">1</span>,len_yuan);</span><br><span class="line">v = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:len_yuan</span><br><span class="line">    <span class="keyword">if</span> yuanma(<span class="built_in">i</span>) == <span class="number">1</span></span><br><span class="line">        AMI(<span class="built_in">i</span>) = v;</span><br><span class="line">        v = v*(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'原码：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(yuanma);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'AMI码：'</span>)</span><br><span class="line"><span class="built_in">disp</span>(AMI);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% HDB3 编码</span></span><br><span class="line">HDB3 = AMI;</span><br><span class="line">v = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">4</span>:len_yuan</span><br><span class="line">    <span class="keyword">if</span> HDB3(<span class="built_in">i</span>) == <span class="number">0</span> &amp;&amp; HDB3(<span class="built_in">i</span><span class="number">-1</span>) == <span class="number">0</span> &amp;&amp; HDB3(<span class="built_in">i</span><span class="number">-2</span>) == <span class="number">0</span> &amp;&amp; HDB3(<span class="built_in">i</span><span class="number">-3</span>) == <span class="number">0</span></span><br><span class="line">        HDB3(<span class="built_in">i</span>) = v;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="built_in">i</span>+<span class="number">1</span>:len_yuan</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(HDB3(<span class="built_in">j</span>)) == <span class="number">1</span></span><br><span class="line">               <span class="keyword">if</span> flag &amp;&amp; HDB3(<span class="built_in">j</span>)*HDB3(<span class="built_in">i</span>) &lt; <span class="number">0</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   flag = <span class="number">0</span>;</span><br><span class="line">                   HDB3(<span class="built_in">j</span>) = HDB3(<span class="built_in">j</span>)*(<span class="number">-1</span>);</span><br><span class="line">               <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">i</span><span class="number">-4</span> &gt; <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> HDB3(<span class="built_in">i</span><span class="number">-4</span>)*HDB3(<span class="built_in">i</span>) &lt; <span class="number">0</span></span><br><span class="line">                <span class="comment">% HDB3(i-3) = HDB3(i)*3/2;</span></span><br><span class="line">                HDB3(<span class="built_in">i</span><span class="number">-3</span>) = HDB3(<span class="built_in">i</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        v = v*(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'HDB3码：'</span>)</span><br><span class="line"><span class="built_in">disp</span>(HDB3);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% AMI解码</span></span><br><span class="line">jie_AMI = <span class="built_in">abs</span>(AMI);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'AMI解码：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(jie_AMI);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% HDB3解码</span></span><br><span class="line">jie_HDB3 = HDB3;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">3</span>:len_yuan<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> jie_HDB3(<span class="built_in">i</span>) == <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) ~= <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span><span class="number">-1</span>) == <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">i</span><span class="number">-3</span> &lt;=<span class="number">0</span>)</span><br><span class="line">            jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) = yuanma_4;</span><br><span class="line">        <span class="keyword">elseif</span> (jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) == <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span><span class="number">-3</span>)*jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) &gt; <span class="number">0</span>)</span><br><span class="line">            jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">elseif</span> jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) ~= <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) * jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) &gt; <span class="number">0</span></span><br><span class="line">            jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) = <span class="number">0</span>;</span><br><span class="line">            jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">jie_HDB3 = <span class="built_in">abs</span>(jie_HDB3);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'HDB3解码：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(jie_HDB3);</span><br></pre></td></tr></table></figure></p><h3 id="四、设计结果"><a href="#四、设计结果" class="headerlink" title="四、设计结果"></a>四、设计结果</h3><p><img src="/2019/08/23/AMI-HDB3编译码设计与实现/one.png" alt="实验结果" title="实验结果"></p><h3 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h3><p>当原码随机成上述序列时，AMI码符合编码规则使其中的1交替变成1和-1,，故AMI码编码正确，<br>HDB3码中出现第一次四个零时将最后的一个零变为+v与前面第一个非零的1极性相同，故不<br>需要加B，当第二次出现四个0时，将最后一个0变为-v，此时的极性与前面一个非零的-1相同，<br>故不需要加B，所以HDB3码的编码正确。AMI码的译码中将其中所有的-1变为1得到的译码与原码<br>一致，故AMI码的译码正确。HDB3码的译码中出现三个0时第四个数的极性与前一个非0的数极<br>性一致，故将第四个非0的数置0，当出现第二次三个0时，第四个非0的数与前一个数的极性<br>一致，故将第四个非0的数置0，所以HDB3码的译码与原码一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AMI-HDB3编译码设计与实现&quot;&gt;&lt;a href=&quot;#AMI-HDB3编译码设计与实现&quot; class=&quot;headerlink&quot; title=&quot;AMI/HDB3编译码设计与实现&quot;&gt;&lt;/a&gt;AMI/HDB3编译码设计与实现&lt;/h2&gt;&lt;h3 id=&quot;一、课程设计主要内容&quot;&gt;&lt;a href=&quot;#一、课程设计主要内容&quot; class=&quot;headerlink&quot; title=&quot;一、课程设计主要内容&quot;&gt;&lt;/a&gt;一、课程设计主要内容&lt;/h3&gt;&lt;p&gt;熟悉AMI/HDB3码的编译码规则，了解AMI/HDB3码编译码的实现方法，运用MATLAB实现AMI/HDB3码编译码的仿真并分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="通信原理" scheme="http://yoursite.com/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2PSK通信系统的设计与实现</title>
    <link href="http://yoursite.com/2019/08/23/2PSK%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/23/2PSK通信系统的设计与实现/</id>
    <published>2019-08-23T05:20:32.352Z</published>
    <updated>2019-03-09T06:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2PSK通信系统的设计与实现"><a href="#2PSK通信系统的设计与实现" class="headerlink" title="2PSK通信系统的设计与实现"></a>2PSK通信系统的设计与实现</h2><h3 id="一、课程设计主要内容"><a href="#一、课程设计主要内容" class="headerlink" title="一、课程设计主要内容"></a>一、课程设计主要内容</h3><p>2PSK通信系统（含调制、加性信道、解调系统等单元）的设计与实现；根据通信原理，设计出各个模块的参数，观察仿真并进行波形分析及系统的性能分析。</p><a id="more"></a><h3 id="二、设计原理"><a href="#二、设计原理" class="headerlink" title="二、设计原理"></a>二、设计原理</h3><h4 id="2-1-2PSK信号的定义"><a href="#2-1-2PSK信号的定义" class="headerlink" title="2.1 2PSK信号的定义"></a>2.1 2PSK信号的定义</h4><p>2PSK二进制移相键控方式，是键控的载波相位按基带脉冲序列的规律而改变的一种数字调制方式。就是根据数字基带信号的两个电平(或符号)使载波相位在两个不同的数值之间切换的一种相位调制方法。两个载波相位通常相差180度，此时称为反向键控(PSK),也称为绝对相移方式。</p><h4 id="2-2-2PSK信号的调制方法"><a href="#2-2-2PSK信号的调制方法" class="headerlink" title="2.2 2PSK信号的调制方法"></a>2.2 2PSK信号的调制方法</h4><p>2psk的调制方法有模拟调制和数字键控法两种，分别如图1、图2所示。2PSK的产生：模拟法和数字键控法，就模拟调制法而言，与产生2ASK信号的方法比较，只是对s(t)要求不同，因此2PSK信号可以看作是双极性基带信号作用下的DSB调幅信号。而就键控法来说，用数字基带信号s(t)控制开关电路，选择不同相位的载波输出，这时s(t)为单极性NRZ或双极性NRZ脉冲序列信号均可。</p><p>2PSK信号与2ASK信号的时域表达式在形式上是完全相同的，所不同的只是两者基带信号s(t)的构成，一个由双极性NRZ码组成，另一个由单极性NRZ码组成。因此，求2PSK信号的功率谱密度时，也可采用与求2ASK信号功率谱密度相同的方法。</p><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/one.png" alt="2psk模拟调制法 &quot;2psk模拟调制法&quot;"></div></p><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/two.png" alt="2psk检控调制法 &quot;2psk键控调制法&quot;"></div></p><h3 id="三、设计思路及程序代码"><a href="#三、设计思路及程序代码" class="headerlink" title="三、设计思路及程序代码"></a>三、设计思路及程序代码</h3><blockquote><p>1、设定2PSK通信系统中的各类参数。<br>2、随机生成一个基带信号并进行码变换，画出基带信号的波形及其频谱，求出等效带宽，设定载波并画出载波波形及其频谱，然后将基带信号与载波相乘得到已调信号画出波形及其频谱。<br>3、设定高斯噪声的参数画出噪声波形及其频谱图，然后将噪声与已调信号相加得到加噪信号画出波形图及其频谱图，然后设定带通滤波器的参数并画出带通滤波器的传输函数。<br>4、将加噪信号通过带通滤波器得到接收信号画出波形及其频谱图，然后将该接收信号与本地载波相乘进行相干解调画出混频信号的波形及其频谱图。<br>5、设定理想低通滤波器的参数并画出该滤波器的传输函数，将混频信号通过理想低通滤波器得到输出信号，画出波形及其频谱图，然后对输出信号进行抽样判决得到输出的双极性基带信号，然后对该信号进行码变换得到原基带信号。</p></blockquote><p><strong> 程序 </strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span>;  <span class="comment">% 基带信号码元数</span></span><br><span class="line">t0 = <span class="number">5</span>;  <span class="comment">% 时域信号时长</span></span><br><span class="line">t = <span class="built_in">linspace</span>(<span class="number">0</span>,t0,t0*<span class="number">1000</span>);</span><br><span class="line">fc = <span class="number">2</span>;  <span class="comment">% 载波频率</span></span><br><span class="line">fm = n/t0;  <span class="comment">% 码元速率</span></span><br><span class="line">B = <span class="number">2</span>*fm;  <span class="comment">% 信号带宽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 产生基带和载波信号</span></span><br><span class="line">a = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,n));  <span class="comment">% 随机产生基带信号</span></span><br><span class="line">st1 = t;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">if</span> a(<span class="built_in">i</span>) &lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st1(<span class="built_in">j</span>) = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st1(<span class="built_in">j</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">st0 = st1;</span><br><span class="line">st0(st0==<span class="number">-1</span>)=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st0,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'单极性基带信号str1'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st0)*<span class="number">1.1</span> <span class="built_in">max</span>(st0)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st0)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st0)*<span class="number">1.1</span>);</span><br><span class="line">y_0 = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(t));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,y_0,<span class="string">'k--'</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st1,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'双极性基带信号str1'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st1)*<span class="number">1.1</span> <span class="built_in">max</span>(st1)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st1)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st1)*<span class="number">1.1</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,y_0,<span class="string">'k--'</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">s1 = <span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fc*t);</span><br><span class="line"><span class="built_in">plot</span>(t,s1,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'载波波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(s1)*<span class="number">1.1</span> <span class="built_in">max</span>(s1)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(s1)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(s1)*<span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 调制和加加性噪声</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">st2 = st1.*s1;</span><br><span class="line"><span class="built_in">plot</span>(t,st2,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'2PSK已调信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st2)*<span class="number">1.1</span> <span class="built_in">max</span>(st2)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st2)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st2)*<span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">st3 = st2+<span class="built_in">randn</span>(<span class="number">1</span>,<span class="built_in">length</span>(t));</span><br><span class="line"><span class="built_in">plot</span>(t,st3,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'2PSK已调信号加噪声信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st3)*<span class="number">1.1</span> <span class="built_in">max</span>(st3)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line"><span class="comment">% set(gca,'YTick',min(st3)*1.1:1:max(st3)*1.1);</span></span><br><span class="line">set(gca,<span class="string">'YTickLabel'</span>,&#123;<span class="built_in">floor</span>(<span class="built_in">min</span>(st3)*<span class="number">1.1</span>) <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="built_in">max</span>(st3)*<span class="number">1.1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 相干解调和抽样判决</span></span><br><span class="line">st4 = st3.*s1;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st4,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);title(<span class="string">'相干载波相乘后的波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st4)*<span class="number">1.1</span> <span class="built_in">max</span>(st4)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line"><span class="comment">% set(gca,'YTick',min(st4)*1.1:1:max(st4)*1.1);</span></span><br><span class="line">set(gca,<span class="string">'YTickLabel'</span>,&#123;<span class="built_in">floor</span>(<span class="built_in">min</span>(st4)*<span class="number">1.1</span>) <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="built_in">max</span>(st4)*<span class="number">1.1</span>&#125;);</span><br><span class="line"></span><br><span class="line">[f,af] = T2F(t,st4);</span><br><span class="line">[t,psk] = lpf(f,af,B);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,psk,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);title(<span class="string">'低通滤波后的波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(psk)*<span class="number">1.1</span> <span class="built_in">max</span>(psk)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line"><span class="comment">% set(gca,'YTick',min(st4)*1.1:1:max(st4)*1.1);</span></span><br><span class="line">set(gca,<span class="string">'YTickLabel'</span>,&#123;<span class="built_in">floor</span>(<span class="built_in">min</span>(psk)*<span class="number">1.1</span>) <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="built_in">max</span>(psk)*<span class="number">1.1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">if</span> psk(<span class="number">1</span>,(<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+(<span class="built_in">length</span>(t)/n)/<span class="number">2</span>) &lt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st5(<span class="built_in">j</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st5(<span class="built_in">j</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st5,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);title(<span class="string">'相干解调之后的波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st5)*<span class="number">1.1</span> <span class="built_in">max</span>(st5)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st5)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st5)*<span class="number">1.1</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function [t,st]=F2T(f,sf)</span><br><span class="line">%脚本文件F2T.m定义了函数F2T，计算信号的反傅立叶变换。</span><br><span class="line">%This function calculate the time signal using ifft function for the input</span><br><span class="line"></span><br><span class="line">df = f(2)-f(1);</span><br><span class="line"></span><br><span class="line">Fmx = ( f(end)-f(1) +df);</span><br><span class="line"></span><br><span class="line">dt = 1/Fmx;</span><br><span class="line"></span><br><span class="line">N = length(sf);</span><br><span class="line"></span><br><span class="line">T = dt*N;</span><br><span class="line"></span><br><span class="line"><span class="section">%t=-T/2:dt:T/2-dt;</span></span><br><span class="line"></span><br><span class="line">t = 0:dt:T-dt;</span><br><span class="line"></span><br><span class="line">sff = fftshift(sf);</span><br><span class="line"></span><br><span class="line">st = Fmx*ifft(sff);</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function [t,st]=lpf(f,sf,B)</span><br><span class="line">%This function<span class="built_in"> filter </span>an input data using a lowpass filter</span><br><span class="line">%Inputs: f: frequency samples</span><br><span class="line">% sf: input data spectrum samples</span><br><span class="line">% B: lowpass bandwidth with a rectangle lowpass</span><br><span class="line">%Outputs: t: time samples</span><br><span class="line">% st: output data time samples</span><br><span class="line"></span><br><span class="line">df = f(2)-f(1);</span><br><span class="line"></span><br><span class="line">T = 1/df;</span><br><span class="line"></span><br><span class="line">hf = zeros(1,length(f));%全零矩阵</span><br><span class="line"></span><br><span class="line">bf = [-floor( B/df ): floor( B/df )] + floor( length(f)/2 );</span><br><span class="line"></span><br><span class="line">hf(bf)=1;</span><br><span class="line"></span><br><span class="line"><span class="attribute">yf</span>=hf.*sf;</span><br><span class="line"></span><br><span class="line">[t,st]=F2T(f,yf);</span><br><span class="line"></span><br><span class="line">st = real(st);</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function [f,sf]= T2F(<span class="built_in">t</span>,st)</span><br><span class="line">%利用FFT计算信号的频谱并与信号的真实频谱的抽样比较。</span><br><span class="line">%脚本文件T2F.m定义了函数T2F，计算信号的傅立叶变换。</span><br><span class="line">%Input is the <span class="built_in">time</span> <span class="built_in">and</span> the signal vectors,the length of <span class="built_in">time</span> must greater</span><br><span class="line">%than <span class="number">2</span></span><br><span class="line">%Output is the <span class="built_in">frequency</span> <span class="built_in">and</span> the signal spectrum</span><br><span class="line">dt = <span class="built_in">t</span>(<span class="number">2</span>)-<span class="built_in">t</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">T</span>=<span class="built_in">t</span>(end);</span><br><span class="line">df = <span class="number">1</span>/<span class="built_in">T</span>;</span><br><span class="line"><span class="built_in">N</span> = length(st);</span><br><span class="line">f=-<span class="built_in">N</span>/<span class="number">2</span>*df <span class="symbol">:</span> df <span class="symbol">:</span> <span class="built_in">N</span>/<span class="number">2</span>*df-df;</span><br><span class="line">sf = fft(st);</span><br><span class="line">sf = <span class="built_in">T</span>/<span class="built_in">N</span>*fftshift(sf);</span><br></pre></td></tr></table></figure><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo1.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo2.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo3.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo4.png" alt></div></p></blockquote><h3 id="四、结果分析"><a href="#四、结果分析" class="headerlink" title="四、结果分析"></a>四、结果分析</h3><p>随机一个基带序列进行码变换转换为双极性基带信号并通过等间隔模拟成一个模拟基带信号，画出频谱图，然后设定本地载波画出波形及其频谱图，然后将基带信号与本地载波相乘得到已调基带信号为两个相位不同的正弦函数并画出其频谱图，然后设定一个高斯白噪声与原基带信号相加得到加性基带已调信号并画出其频谱图，然后设定带通滤波器并将加性已调基带信号通过该带通滤波器得到接收波形，然后将该接收波形与本地载波相乘得到混频信号，并设定低通滤波器得到通过低通滤波器之后的接收波形，然后对该信号进行抽样判决得到双极性的基带信号，最后对该双极性基带信号进行码变换转换为原单极性基带信号与原基带信号一致，故可验证该仿真结果正确。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2PSK通信系统的设计与实现&quot;&gt;&lt;a href=&quot;#2PSK通信系统的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;2PSK通信系统的设计与实现&quot;&gt;&lt;/a&gt;2PSK通信系统的设计与实现&lt;/h2&gt;&lt;h3 id=&quot;一、课程设计主要内容&quot;&gt;&lt;a href=&quot;#一、课程设计主要内容&quot; class=&quot;headerlink&quot; title=&quot;一、课程设计主要内容&quot;&gt;&lt;/a&gt;一、课程设计主要内容&lt;/h3&gt;&lt;p&gt;2PSK通信系统（含调制、加性信道、解调系统等单元）的设计与实现；根据通信原理，设计出各个模块的参数，观察仿真并进行波形分析及系统的性能分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="通信原理" scheme="http://yoursite.com/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
