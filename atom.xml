<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胥帆</title>
  <icon>https://www.gravatar.com/avatar/f90a8deeb07db0e48636ee95a27b26f3</icon>
  <subtitle>不善言辞，胆小认生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-07T12:43:36.067Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>胥帆</name>
    <email>1747380107@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>和为S的两个数字</title>
    <link href="http://yoursite.com/2020/12/07/%E5%92%8C%E4%B8%BAS%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/12/07/和为S的两个数字/</id>
    <published>2020-12-07T12:20:27.224Z</published>
    <updated>2020-12-07T12:43:36.067Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>一个递增排序的数组和一个数字S</p><blockquote><p>[1,2,4,7,11,15],15</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>数字和等于S 的两个数，输出两个数，小的先输出。</p><blockquote><p>[4,11]</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p><strong>方法一：双指针</strong></p><p>因为数组是有序的，所以可以用双指针，指向数组的首尾，具体步骤如下：</p><p>1，初始化：指针low指向数组首，指针high指向数组尾部。</p><p>2，如果arr[low] + arr[high] == sum，说明可能是解，判断是否乘积最小。</p><p>3，如果arr[low] + arr[high] &lt; sum，说明和太小，所以应该low++。</p><p>4，如果arr[low] + arr[high]  &gt; sum，说明和太大，所以应该high–。</p><p><strong>时间复杂度：</strong>O(n)</p><p><strong>空间复杂度：</strong>O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Solution;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">FindNumbersWithSum</span><span class="params">(<span class="keyword">int</span> [] array,<span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxFlag = <span class="number">9999999</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[low] + array[high] == sum) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[low] * array[high] &lt; maxFlag) &#123;</span><br><span class="line">                    arrayList.clear();</span><br><span class="line">                    arrayList.add(array[low]);</span><br><span class="line">                    arrayList.add(array[high]);</span><br><span class="line">                    maxFlag = array[low] * array[high];</span><br><span class="line">                &#125;</span><br><span class="line">                low++;</span><br><span class="line">                high--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[low] + array[high] &lt; sum) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n,k;</span><br><span class="line">        n = input.nextInt();</span><br><span class="line">        k = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; ++i) &#123;</span><br><span class="line">            arr[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line"></span><br><span class="line">        System.out.print(solution.FindNumbersWithSum(arr,k));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。&lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;p&gt;一个递增排序的数组和一个数字S&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[1,2,4,7,11,15],15&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;p&gt;数字和等于S 的两个数，输出两个数，小的先输出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[4,11]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>数字在升序数组中出现的次数</title>
    <link href="http://yoursite.com/2020/12/05/%E6%95%B0%E5%AD%97%E5%9C%A8%E5%8D%87%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <id>http://yoursite.com/2020/12/05/数字在升序数组中出现的次数/</id>
    <published>2020-12-05T07:44:22.898Z</published>
    <updated>2020-12-05T08:05:51.213Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>统计一个数字在升序数组中出现的次数。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>一个升序数组，和一个待统计的数字</p><blockquote><p>[1,2,3,3,3,3,4,5] , 3</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>数字的统计次数</p><blockquote><p>4</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p><strong>方法一：暴力求解</strong></p><p>直接定义两个index，一个从数组的头往后遍历，寻找第一个K值的下标，即寻找k值的上界，一个从数组的最后往前遍历，寻找k值的下界，下界减上界即是k值的个数。</p><p><strong>时间复杂度：</strong>O(n)</p><p><strong>空间复杂度：</strong>O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetNumberOfK</span><span class="params">(<span class="keyword">int</span> [] array , <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ( i &lt;= j ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] == array[j] &amp;&amp; array[i] == k) <span class="keyword">return</span> j-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (array[i] != k ) i++;</span><br><span class="line">            <span class="keyword">if</span> (array[j] != k ) j--;</span><br><span class="line"><span class="comment">//            System.out.print(i + " " + j + "\n");</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：二分</strong></p><p>考虑到有序数组，可以通过二分查找的方式找出k的上界和下界。</p><p>下界定义为：如果存在目标值，则指向第一个目标数，如果不存在，则指向大于目标值的第一个值。</p><p>上界定义为：不管目标是否存在，都指向大于目标值的第一个值。</p><p><div align="center"><img src="/2020/12/05/数字在升序数组中出现的次数/1.png" alt></div></p><p><div align="center"><img src="/2020/12/05/数字在升序数组中出现的次数/2.png" alt></div></p><p>最后的答案就是<code>right - left</code></p><p><strong>时间复杂度：</strong>O(logN)</p><p><strong>空间复杂度：</strong>O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetNumberOfK</span><span class="params">(<span class="keyword">int</span> [] array , <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = array.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (array[mid] &gt;= k) right = mid;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lbound = right;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = array.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (array[mid] &lt;= k) left = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ubound = left;</span><br><span class="line">        <span class="keyword">return</span> ubound-lbound;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;统计一个数字在升序数组中出现的次数。&lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;p&gt;一个升序数组，和一个待统计的数字&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[1,2,3,3,3,3,4,5] , 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;p&gt;数字的统计次数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第一个只出现一次的字符</title>
    <link href="http://yoursite.com/2020/12/03/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/12/03/第一个只出现一次的字符/</id>
    <published>2020-12-03T08:36:48.758Z</published>
    <updated>2020-12-03T08:47:07.537Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>在一个字符串(0&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.（从0开始计数） </p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>一个字符串(0&lt;=字符串长度&lt;=10000，全部由字母组成)，区分大小写。</p><blockquote><p>wohenhaowWOHENHAO</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>第一个只出现一次的字符的位置，如果没有输出-1，从0开始计数</p><blockquote><p>3</p></blockquote><a id="more"></a><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p><strong>哈希法</strong></p><p>先遍历一遍字符串统计每个字符出现的次数，然后在遍历一遍字符串，输出只出现一次的的字符的位置。</p><p><strong>时间复杂度</strong>：O(2n)，需要遍历两遍字符串</p><p><strong>空间复杂度</strong>：O(1)，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="string">'z'</span> - <span class="string">'A'</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            arr[str.charAt(i)-<span class="string">'A'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[str.charAt(i)-<span class="string">'A'</span>] == <span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        str = input.next();</span><br><span class="line"></span><br><span class="line">        System.out.print(str + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line"></span><br><span class="line">        System.out.print(solution.FirstNotRepeatingChar(str));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;在一个字符串(0&amp;lt;=字符串长度&amp;lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.（从0开始计数） &lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;p&gt;一个字符串(0&amp;lt;=字符串长度&amp;lt;=10000，全部由字母组成)，区分大小写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wohenhaowWOHENHAO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;p&gt;第一个只出现一次的字符的位置，如果没有输出-1，从0开始计数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>把数组排成最小的数</title>
    <link href="http://yoursite.com/2020/11/26/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
    <id>http://yoursite.com/2020/11/26/把数组排成最小的数/</id>
    <published>2020-11-26T07:59:16.617Z</published>
    <updated>2020-11-26T08:13:41.001Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个正整数数组，把数组里面所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3,32,321}，则打印出这三个数字能排成的最小数字为321323.</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>{3,32,321}</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>321323</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>将数组中的数字连接起来，排成一个最小的数字。将”大数“往后放，”小数“往前放</p><p>如何定义“大数”与“小数”，<strong>排序！！！</strong></p><p>例如当前两个数a和b</p><p>判断当前字符串a+b与字符串b+a对应的数字大小，如果ab&gt;ba。则a是大数，b是小数。</p><p>所以这道题变成了一个排序问题，将能把组合出来的数字变大的数字往后排，</p><p>这里我们只需要定义一个比较大小的判断。用冒泡排序如下：（其他排序类似）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; numbers.length; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(numbers[i]+<span class="string">""</span>+numbers[j]) &gt; Integer.parseInt((numbers[j]+<span class="string">""</span>+numbers[i]))) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp;</span><br><span class="line">                    temp = numbers[i];</span><br><span class="line">                    numbers[i] = numbers[j];</span><br><span class="line">                    numbers[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String str=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; ++i) &#123;</span><br><span class="line">            str = str + numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        n = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            arr[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.print(solution.PrintMinNumber(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;输入一个正整数数组，把数组里面所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3,32,321}，则打印出这三个数字能排成的最小数字为321323.&lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;{3,32,321}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;321323&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>连续子数组的最大和</title>
    <link href="http://yoursite.com/2020/11/12/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <id>http://yoursite.com/2020/11/12/连续子数组的最大和/</id>
    <published>2020-11-12T11:35:45.250Z</published>
    <updated>2020-11-12T11:58:41.169Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1) </p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>[1,-2,3,10,-4,7,2,-5]</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>18</p><a id="more"></a> <h5 id="方法一-动态规划"><a href="#方法一-动态规划" class="headerlink" title="方法一 动态规划"></a>方法一 动态规划</h5><p>状态定义：dp[i]表示以i结尾的连续子数组的最大和。所以最终要求dp[n-1] </p><p>状态转移方程：dp[i] = max(array[i], dp[i-1]+array[i]) </p><p>解释：如果当前元素为整数，并且dp[i-1]为负数，那么当然结果就是只选当前元素 </p><p>技巧：这里为了统一代码的书写，定义dp[i]表示前i个元素的连续子数组的最大和，结尾元素为array[i-1] </p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = <span class="built_in">array</span>.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(sz+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 表示没有元素</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=sz; ++i) &#123;</span><br><span class="line">            dp[i] = max(<span class="built_in">array</span>[i<span class="number">-1</span>], dp[i<span class="number">-1</span>]+<span class="built_in">array</span>[i<span class="number">-1</span>]);</span><br><span class="line">            ret = max(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxNum = -<span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            maxNum = array[i] &gt; array[i] + maxNum ? array[i] : array[i] + maxNum;</span><br><span class="line">            res = res &gt; maxNum ? res : maxNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>思想很简单，就是对下标为i的元素array[i]，先试探的加上array[i], 如果和为负数，显然，以i结尾的元素对整个结果不作贡献。<br>具体过程：</p><ol><li>初始化：维护一个变量tmp = 0</li><li>如果tmp+array[i] &lt; 0, 说明以i结尾的不作贡献，重新赋值tmp = 0</li><li>否则更新tmp = tmp + array[i]<br>最后判断tmp是否等于0， 如果等于0， 说明数组都是负数，选取一个最大值为答案。</li></ol><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> k : <span class="built_in">array</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp + k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp += k;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = max(ret, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="keyword">return</span> *max_element(<span class="built_in">array</span>.begin(), <span class="built_in">array</span>.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1) &lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;p&gt;[1,-2,3,10,-4,7,2,-5]&lt;/p&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;p&gt;18&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>数组中出现次数超过一半的数字</title>
    <link href="http://yoursite.com/2020/11/09/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/11/09/数组中出现次数超过一半的数字/</id>
    <published>2020-11-09T08:44:24.319Z</published>
    <updated>2020-11-09T09:14:08.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字，例如输入一个长度为9的数组[1,2,3,2,2,2,5,4,2]，由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2，如果不存在则输出0；</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>[1,2,3,2,2,2,5,4,2]</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>2</p><a id="more"></a><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>现将数组排序，如果有超过数组长度一半的元素则该值一定会出现在数组的中间，然后将数组中间的该元素的个数判断一下是否有超过数组长度的一半。</p><p>时间复杂度：O(nlogn)</p><p>空间复杂度：O(1)</p><h5 id="方法二-候选法-最优解"><a href="#方法二-候选法-最优解" class="headerlink" title="方法二(候选法)最优解"></a>方法二(候选法)最优解</h5><p>首先先找出数组中的众数，然后判断该众数的个数是否超过了数组长度的一半。</p><p>具体做法：</p><ol><li>初始化当前众数值preValue = -1，以及目前出现该preValue的次数count = 0；</li><li>遍历数组：判断count是否 = 0，若为0，说明当前不存在众数值preValue，则把当前值存为preValue，次数为记为1，若不为0，说明当前存在众数值preValue且次数为count，则判断当前值是否与preValue相等，若相等则次数count+1，若不想等则次数count -1。</li><li>遍历完之后preValue中保存的则为数组中的众数，在判断此preValue的count是否超过数组长度的一半。若存在相等的情况，则preValue保存的为最后一次的众数值，但此情况下一定不存在次数超过数组长度一半的数字。</li></ol><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> preValued = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                preValued = array[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                count = preValued == array[i] ? count + <span class="number">1</span> : count - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] == preValued) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt; array.length/<span class="number">2</span> ? preValued : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        n = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            arr[i] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.print(solution.MoreThanHalfNum_Solution(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字，例如输入一个长度为9的数组[1,2,3,2,2,2,5,4,2]，由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2，如果不存在则输出0；&lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;p&gt;[1,2,3,2,2,2,5,4,2]&lt;/p&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;p&gt;2&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>字符串的排列</title>
    <link href="http://yoursite.com/2020/11/03/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>http://yoursite.com/2020/11/03/字符串的排列/</id>
    <published>2020-11-03T10:16:37.512Z</published>
    <updated>2020-11-03T10:34:14.140Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个字符串，按字典序列打印出该字符串中字符的所有排列，例如输入字符串abc，则按照字典序打印出由字符a、b、c所能排列出来的所有的字符串为</p><p>abc,acb,bac,bca,cab,cba。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>输入一个字符串，长度不超过9，(可能有字符重复)，字符只包括大小写字母。</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>该字符串按照字典序的全排列</p></blockquote><a id="more"></a><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这种从固定的数组/String中取出元素进行排列组合，是经典的permutation问题，只是本题的要求是需要返回所有不重复的排列组合，而不是返回多少种情况，所以需要新建一个String的ArrayList来储存所有排列出的不重复的字符串。</p><p>基本思想是采用递归从字符串中不断选取某个字符来进行匹配。</p><p>定义一个方法：用于递归的循环的向下寻找所有可能的排列组合，其中有三个参数。</p><p>第一个str为当前剩下的可以取的String，第二个是cur，为当前所组合的字符串，第三个是res，为符合条件的字符串的合集。</p><p>递归结束条件为：当前剩下的String长度为0时表示所有字符已经取完，此时的cur为排列出的一种情况，若res中没有则加入res。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Perm</span><span class="params">(String str, String cur, ArrayList&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!res.contains(cur)) &#123;</span><br><span class="line">                res.add(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); ++i) &#123;</span><br><span class="line">            Perm(str.substring(<span class="number">0</span>,i)+str.substring(i+<span class="number">1</span>),cur+str.charAt(i),res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">Permutation</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(str);</span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringBuffer.length();) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !(stringBuffer.charAt(i) &lt;= <span class="string">'z'</span> &amp;&amp; stringBuffer.charAt(i) &gt;= <span class="string">'A'</span>)) &#123;</span><br><span class="line">                stringBuffer.deleteCharAt(i);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        str = stringBuffer.toString();</span><br><span class="line">        <span class="keyword">if</span> (str.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Perm(str,<span class="string">""</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = input.next();</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.print(solution.Permutation(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;输入一个字符串，按字典序列打印出该字符串中字符的所有排列，例如输入字符串abc，则按照字典序打印出由字符a、b、c所能排列出来的所有的字符串为&lt;/p&gt;
&lt;p&gt;abc,acb,bac,bca,cab,cba。&lt;/p&gt;
&lt;h4 id=&quot;输入描述&quot;&gt;&lt;a href=&quot;#输入描述&quot; class=&quot;headerlink&quot; title=&quot;输入描述&quot;&gt;&lt;/a&gt;输入描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个字符串，长度不超过9，(可能有字符重复)，字符只包括大小写字母。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;输出描述&quot;&gt;&lt;a href=&quot;#输出描述&quot; class=&quot;headerlink&quot; title=&quot;输出描述&quot;&gt;&lt;/a&gt;输出描述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;该字符串按照字典序的全排列&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>顺时针打印矩阵</title>
    <link href="http://yoursite.com/2020/11/01/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2020/11/01/顺时针打印矩阵/</id>
    <published>2020-11-01T09:21:49.638Z</published>
    <updated>2020-11-01T13:54:23.449Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输一个矩阵，按照从外向里一顺时针的顺序依次打印出每一个数字，例如，如果输入如下4×4的矩阵：</p><p>1 2 3 4</p><p>5 6 7 8</p><p>9 10 11 12</p><p>13 14 15 16</p><p>则依次打印出的数字为：</p><p>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10.</p><a id="more"></a><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><blockquote><p>[[1,2],[3,4]]</p></blockquote><p>输出</p><blockquote><p>[1,2,4,3]</p></blockquote><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p><div align="center"> <img src="/2020/11/01/顺时针打印矩阵/1.png" alt></div></p></blockquote><p>定义四个变量分别代表范围大小：up、down、left、right</p><p>第一步：向右走存入整行的值，以left、right作为行的左右边界，当存入之后，将上边界+1，表示第一行已经存入了，同时判断是否超过了下边界。</p><p>第二步：右侧向下遍历整列的值，以up、down作为列的上下边界，当存入之后，将右边界-1，表示最右侧的边界已经存入，同时判断是否超过了左边界。</p><p>第三步：下边界向左遍历整行的值，以rigth、left作为右左边界，当存入之后，将下边界-1，表示最下侧的边界已经存入，同时判断是否超过了上边界。</p><p>第四步：左边界向上遍历整列的值，以down、up作为下上边界，当存入之后，将左边界+1，表示最左侧的边界已经存入，同时判断是否超过了右边界。</p><p><strong>复杂度</strong></p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">//键盘扫描类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> up = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> down = matrix.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = matrix[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = left;i &lt;= right; ++i) &#123;</span><br><span class="line">                arrayList.add(matrix[up][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((++up) &gt; down) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down; ++i) &#123;</span><br><span class="line">                arrayList.add(matrix[i][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((--right) &lt; left) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left; --i) &#123;</span><br><span class="line">                arrayList.add(matrix[down][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((--down) &lt; up) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up; --i) &#123;</span><br><span class="line">                arrayList.add(matrix[i][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((++left) &gt; right) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> row = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> col = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> [][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i) &#123;</span><br><span class="line"><span class="comment">//            String str = input.next();</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j) &#123;</span><br><span class="line">                arr[i][j] = input.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[<span class="number">0</span>].length; ++j) &#123;</span><br><span class="line">                System.out.print(arr[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        arrayList = solution.printMatrix(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); ++i) &#123;</span><br><span class="line">            System.out.print(arrayList.get(i) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种简单的方法(python)</p><ol><li>将矩阵的第一行截取出来。</li><li>判断截取之后是否还存在行数，若不存在，结束循环。</li><li>将矩阵向左转置，即向左旋转90度。</li><li>重复1步骤</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printMatrix</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res.extend(matrix[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> len(matrix) &gt; <span class="number">1</span>:</span><br><span class="line">                matrix = matrix[<span class="number">1</span>::]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            matrix = [ [row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>])<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>)]  <span class="comment"># 矩阵装置，向左转90度</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    info = list(map(int, input().split(<span class="string">" "</span>)))</span><br><span class="line">    arr = [[<span class="number">0</span>] * info[<span class="number">1</span>]] * info[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(info[<span class="number">0</span>]):</span><br><span class="line">        arr[i] = list(map(int, input().split(<span class="string">" "</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># arr = [[row[i] for row in arr] for i in range(len(arr[0]) - 1, -1, -1)]</span></span><br><span class="line">    <span class="comment"># print(arr)</span></span><br><span class="line">    print(Solution().printMatrix(arr))</span><br></pre></td></tr></table></figure><h4 id="Integer-类和-int-的区别"><a href="#Integer-类和-int-的区别" class="headerlink" title="Integer 类和 int 的区别"></a>Integer 类和 int 的区别</h4><ol><li>Integer 是 int 包装类，int 是八大基本数据类型之一(byte,char,short,int,long,float,double,boolean)</li><li>Integer 是类，默认值是null，int是基本数据类型，默认值是0；</li><li>Integer 表示的是对象，用一个引用指向这个对象，而int是基本数据类型，直接储存数据。</li></ol><p><strong>Integer的自动拆箱和装箱</strong></p><ol><li><p><strong>自动装箱</strong></p><p>一般创建一个类的时候是通过关键字new，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>但是对于Integer类，可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">128</span>;</span><br></pre></td></tr></table></figure><p>这是因为：通过反编译工具可以看到，生成的class文件是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer a = Integer.valueOf(<span class="number">128</span>);</span><br></pre></td></tr></table></figure><p>这就是基本数据类型的自动装箱，128是基本数据类型，然后被解析成Integer类。</p></li><li><p><strong>自动拆箱</strong></p><p>将Integer类表示的数据赋值给基本数据类型int，就执行了自动拆箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line"><span class="keyword">int</span> m = a;</span><br></pre></td></tr></table></figure><p>反编译生成的class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line"><span class="keyword">int</span> m = a.intValue();</span><br></pre></td></tr></table></figure><p>简单的说：自动装箱就是<code>Integer.valueOf(int i)</code>；自动拆箱就是<code>i.intValue()</code>；</p></li></ol><p><strong>Arrays，list，Arraylist 的区别</strong></p><p>List是接口，ArrayList是用一个数组实现的List类。</p><p>ArrayList是自动扩容的Arrays，有add(),remove()方法。</p><p>ArrayList相比于Arrays少了[]操作，而是利用get(i)配合索引值来取值。</p><p>ArrayList<integer>不能写成ArrayList<int></int></integer></p><p>Array(数组)是基于索引(index)的数据结构，使用索引在数组中搜索和读取数据是很快的。</p><p>获取数据的时间复杂度是O(1)，但是要删除数据开销很大，要重排数组中的所有数据。</p><p>List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。</p><p>List是一个接口，不能写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> List&lt;Integer&gt;(); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>ArrayList可以看成是能够自动增长容量的数组。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;输一个矩阵，按照从外向里一顺时针的顺序依次打印出每一个数字，例如，如果输入如下4×4的矩阵：&lt;/p&gt;
&lt;p&gt;1 2 3 4&lt;/p&gt;
&lt;p&gt;5 6 7 8&lt;/p&gt;
&lt;p&gt;9 10 11 12&lt;/p&gt;
&lt;p&gt;13 14 15 16&lt;/p&gt;
&lt;p&gt;则依次打印出的数字为：&lt;/p&gt;
&lt;p&gt;1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10.&lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>回文数（java）</title>
    <link href="http://yoursite.com/2020/10/10/%E5%9B%9E%E6%96%87%E6%95%B0%EF%BC%88java%EF%BC%89/"/>
    <id>http://yoursite.com/2020/10/10/回文数（java）/</id>
    <published>2020-10-10T03:04:41.737Z</published>
    <updated>2020-10-10T04:35:25.043Z</updated>
    
    <content type="html"><![CDATA[<p>牛客练习赛71，题一：</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/2020/10/10/回文数（java）/one.png" alt="题目描述"></p><a id="more"></a><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>一行10个自然数，分别表示数码0~9的出现次数</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>如果无解，只输出”-1”（不含引号）</p><p>否则，输出一个数表示最小的解</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote><p>输入</p><p>0 2 4 2 0 2 0 0 0 0</p><p>输出</p><p>1223553221</p></blockquote><blockquote><p>1 1 4 5 1 4 0 0 0 0</p><p>-1</p></blockquote><blockquote><p>4 0 2 3 0 0 0 2 0 0</p><p>20037373002</p></blockquote><blockquote><p>2 0 0 0 0 0 0 0 0 1</p><p>-1</p></blockquote><blockquote><p>1 0 0 0 0 0 0 0 0 0</p><p>0</p></blockquote><p>备注： 保证输入的所有数都不超过10，且至少一个数大于0；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Main.solution(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for(int n : arr) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print(n + (n == arr[arr.length-1] ? "\n": " "));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(arr.toString());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> odd_count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">            sum += n;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) odd_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (odd_count&gt;<span class="number">1</span>) System.out.print(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((sum-arr[<span class="number">1</span>])==<span class="number">1</span> &amp;&amp; arr[<span class="number">1</span>] != <span class="number">0</span>) System.out.print(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String end = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    end = String.valueOf(i - <span class="number">1</span>);</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[i] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(String.valueOf(i - <span class="number">1</span>));</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(String.valueOf(i - <span class="number">1</span>));</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(sb + end + sb.reverse());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;牛客练习赛71，题一：&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2020/10/10/回文数（java）/one.png&quot; alt=&quot;题目描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>链表操作(java)</title>
    <link href="http://yoursite.com/2020/09/29/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C-java/"/>
    <id>http://yoursite.com/2020/09/29/链表操作-java/</id>
    <published>2020-09-29T11:19:39.125Z</published>
    <updated>2020-09-29T11:26:12.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表的各种操作"><a href="#链表的各种操作" class="headerlink" title="链表的各种操作"></a>链表的各种操作</h3><p>概念：一种重要的数据结构，储存带院是不连续的，每个结点由两部分组成：<br>储存的数值+前序结点和后序结点的指针，既有前序结点和指针又有后序结点的指针的链表称为双向链表，<br>只包含后序指针的链表为单链表。</p><a id="more"></a><h4 id="链表结点的实体类"><a href="#链表结点的实体类" class="headerlink" title="链表结点的实体类"></a>链表结点的实体类</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    ListNode next = <span class="literal">null</span>;  <span class="comment">//下一个结点</span></span><br><span class="line">    int <span class="keyword">data</span>;  <span class="comment">//结点数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ListNode(int <span class="keyword">data</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span> = <span class="keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ListNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.util.LinkMouseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ListNodeOperation &#123;</span><br><span class="line">    ListNode head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表添加结点</span></span><br><span class="line"><span class="comment">     * 找到链表的末尾结点，把新添加的数据作为末尾结点的后续结点</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addListNode(<span class="keyword">int</span> data) &#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(data);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.<span class="keyword">next</span> = newNode;</span><br><span class="line">        newNode.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> printLink() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.<span class="keyword">print</span>(cur.data + (cur.<span class="keyword">next</span> == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="string">" "</span>));</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表删除结点；</span></span><br><span class="line"><span class="comment">     * 把待删除前的一个结点的next指向下一个结点。</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> deleteListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">// 判断链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.data == val) &#123;  <span class="comment">// 若删除头指针</span></span><br><span class="line">            head = head.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode pre = head;</span><br><span class="line">        ListNode temp = head.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;  <span class="comment">// 遍历链表</span></span><br><span class="line">            <span class="keyword">if</span> (temp.data == val) &#123;</span><br><span class="line">                pre.<span class="keyword">next</span> = temp.<span class="keyword">next</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = temp;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回链表长度</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length() &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">count</span>++;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表结点排序，并返回排序后的头结点；</span></span><br><span class="line"><span class="comment">     * 选择排序算法，即每次都选出未排序结点中最小的结点，与第一个未排序的结点交换</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode LinkSort() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode nextNode = cur.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">while</span> (nextNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.data &gt;= nextNode.data) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = cur.data;</span><br><span class="line">                    cur.data = nextNode.data;</span><br><span class="line">                    nextNode.data = temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                nextNode = nextNode.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除重复元素；</span></span><br><span class="line"><span class="comment">     * 需要额外的储存空间hashtable,调用hashtable.containsKey()来判断重复结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> distinctLink() &#123;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        Hashtable&lt;Integer, Integer&gt; hb = <span class="keyword">new</span> Hashtable&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (hb.containsKey(temp.data)) &#123;  <span class="comment">// 如果hashtable中已存在该结点，则跳过该结点</span></span><br><span class="line">                pre.<span class="keyword">next</span> = temp.<span class="keyword">next</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果hashtable中不存在该结点，将结点存到hashtable中</span></span><br><span class="line">                hb.put(temp.data, <span class="number">1</span>);</span><br><span class="line">                pre = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> deleteDuplecate() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = cur.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp.data == cur.data) &#123;</span><br><span class="line">                    temp.<span class="keyword">next</span> = temp.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp = temp.<span class="keyword">next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回倒数第k个结点；</span></span><br><span class="line"><span class="comment">     * 两个指针，第一个指针向前移动k-1次，之后两个指针共同前进；</span></span><br><span class="line"><span class="comment">     * 当前面的指针到达末尾时，后面的指针所在的位置就是倒数第k个位置</span></span><br><span class="line"><span class="comment">     * @param k</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findReverNode(<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k-<span class="number">1</span>; ++i) first = first.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (first.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.<span class="keyword">next</span>;</span><br><span class="line">            second = second.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找正数第k个元素</span></span><br><span class="line"><span class="comment">     * @param k</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findNode (<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( k &lt; <span class="number">1</span> || k &gt; length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k-<span class="number">1</span>; ++i) &#123;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表，在反转指针前必须保存下个结点的指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reserveLink() &#123;</span><br><span class="line">        ListNode curNode = head;</span><br><span class="line">        ListNode preNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (curNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode nextNode = curNode.<span class="keyword">next</span>;</span><br><span class="line">            curNode.<span class="keyword">next</span> = preNode;</span><br><span class="line">            preNode = curNode;</span><br><span class="line">            curNode = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        head = preNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反向输出链表，三种方式：</span></span><br><span class="line"><span class="comment">     * 方法一：先反转链表，再输出链表，需要链表遍历两次。</span></span><br><span class="line"><span class="comment">     * 方法二：把链表中的数字放入栈中再输出，需要维护额外的栈空间</span></span><br><span class="line"><span class="comment">     * 方法三：依据方法二中栈的思想，通过递归来实现，递归起始就是将先执行的数据压入栈中，再一次出栈。</span></span><br><span class="line"><span class="comment">     * @param node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reservePrt(ListNode node) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            reservePrt(node.<span class="keyword">next</span>);</span><br><span class="line">            System.out.<span class="keyword">print</span>(node.data + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找单链表的中间结点：</span></span><br><span class="line"><span class="comment">     * 方法一：先求出链表的长度，再遍历1/2链表长度，寻找出链表的中间结点</span></span><br><span class="line"><span class="comment">     * 方法二：用两个指针遍历链表，一个快指针，一个慢指针，</span></span><br><span class="line"><span class="comment">     * 快指针每次向前移动2个结点，慢指针一次向前移动一个结点；</span></span><br><span class="line"><span class="comment">     * 当快指针移动到链表的末尾，慢指针所在的位置即为中间结点所在的位置。</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findMiddleNode() &#123;</span><br><span class="line">        ListNode slowPoint = head;</span><br><span class="line">        ListNode quickPoint = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// quickPoint.next == null 是链表结点个数为奇数时，快指针已经走到最后</span></span><br><span class="line">        <span class="comment">// quickPoint.next.next == null 是链表结点数为偶数时，快指针已经走到倒数第二个结点</span></span><br><span class="line">        <span class="comment">// 链表结点个数为奇数时，返回的是中间结点；链表结点个数为偶数时，返回的是中间两个结点中的前一个</span></span><br><span class="line">        <span class="keyword">while</span> (quickPoint.<span class="keyword">next</span> != <span class="keyword">null</span> &amp;&amp; quickPoint.<span class="keyword">next</span>.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slowPoint = slowPoint.<span class="keyword">next</span>;</span><br><span class="line">            quickPoint = quickPoint.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断链表是否有环；</span></span><br><span class="line"><span class="comment">     * 设置快指针和慢指针，慢指针每次走一步，快指针每次走两步</span></span><br><span class="line"><span class="comment">     * 当快指针与慢指针相等时，就说明该链表有环</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isRinged() &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode slowNode = head;</span><br><span class="line">        ListNode quickNode = head;</span><br><span class="line">        <span class="keyword">while</span> (quickNode.<span class="keyword">next</span> != <span class="keyword">null</span> &amp;&amp; quickNode.<span class="keyword">next</span>.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slowNode = slowNode.<span class="keyword">next</span>;</span><br><span class="line">            quickNode = quickNode.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">if</span> (quickNode == slowNode) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个链表是否相交；</span></span><br><span class="line"><span class="comment">     * 两个链表相交，则他们的尾结点一定相同，比较两个链表的尾结点是否相同即可</span></span><br><span class="line"><span class="comment">     * @param head1</span></span><br><span class="line"><span class="comment">     * @param head2</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isCross(ListNode head1, ListNode head2) &#123;</span><br><span class="line">        ListNode temp1 = head1;</span><br><span class="line">        ListNode temp2 = head2;</span><br><span class="line">        <span class="keyword">while</span> (temp1.<span class="keyword">next</span> != <span class="keyword">null</span>) temp1 = temp1.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp2.<span class="keyword">next</span> != <span class="keyword">null</span>) temp2 = temp2.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (temp1 == temp2) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果两个链表相交，求链表相交的起始点；</span></span><br><span class="line"><span class="comment">     * 首先判断链表是否相交，如果两个链表不相交，则求相交起点没有意义</span></span><br><span class="line"><span class="comment">     * 求出两个链表长度之差，length = len1 - len2</span></span><br><span class="line"><span class="comment">     * 让较长的链表先走len步</span></span><br><span class="line"><span class="comment">     * 然后两个链表同步向前移动，每移动一次就比较他们的结点是否相等，第一个相等的结点即为他们的第一个相交点</span></span><br><span class="line"><span class="comment">     * @param listNodeOperation1</span></span><br><span class="line"><span class="comment">     * @param listNodeOperation2</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findFirstCrossPoint(ListNodeOperation listNodeOperation1, ListNodeOperation listNodeOperation2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCross(listNodeOperation1.head,listNodeOperation2.head)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = listNodeOperation1.length();</span><br><span class="line">            <span class="keyword">int</span> len2 = listNodeOperation2.length();</span><br><span class="line">            ListNode cur1 = listNodeOperation1.head;</span><br><span class="line">            ListNode cur2 = listNodeOperation2.head;</span><br><span class="line">            <span class="keyword">int</span> length = len1 - len2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) cur1 = cur1.<span class="keyword">next</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) cur2 = cur2.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.<span class="keyword">next</span>;</span><br><span class="line">                cur2 = cur2.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链表的各种操作&quot;&gt;&lt;a href=&quot;#链表的各种操作&quot; class=&quot;headerlink&quot; title=&quot;链表的各种操作&quot;&gt;&lt;/a&gt;链表的各种操作&lt;/h3&gt;&lt;p&gt;概念：一种重要的数据结构，储存带院是不连续的，每个结点由两部分组成：&lt;br&gt;储存的数值+前序结点和后序结点的指针，既有前序结点和指针又有后序结点的指针的链表称为双向链表，&lt;br&gt;只包含后序指针的链表为单链表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字</title>
    <link href="http://yoursite.com/2020/09/24/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/09/24/旋转数组的最小数字/</id>
    <published>2020-09-24T06:59:56.751Z</published>
    <updated>2020-11-09T08:47:16.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组[3,4,5,1,2]为[1,2,3,4,5]的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 </p><a id="more"></a><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入一个非递减排序的数组的一个旋转，所有元素都大于0</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出改旋转数组的最小元素，若数组大小为0，返回0。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>二分查找</strong></p><p>二分查找不仅仅只适用于在有序数组上，如果能够明确二分之后，答案存在于二分的某一侧，就可以使用二分。</p><p>这种二分查找的难点就难在，<code>arr[mid]</code>跟谁进行比较。</p><p>我们的目的是：当进行一次比较的时候，一定能够确定答案就在mid的某一侧，一次比较为<code>arr[mid]</code>跟谁比的问题。</p><p>一般的比较原则是：</p><ul><li>如果有目标值target，那么直接让<code>arr[mid]</code>和target比较即可。</li><li>如果没有目标值，一般可以考虑<strong>端点</strong></li></ul><p>这里我们把target看作是右端点，来进行分析，那就要分析以下三种情况，看是否可以达到上述目标。</p><ol><li><p>情况1，<code>arr[mid] &gt; target: 4 5 6 1 2 3</code></p><ul><li><code>arr[mid] = 6</code>，右端点为3，<code>arr[mid] &gt; target</code>，说明<code>[first ... mid]</code>都是 &gt;= <code>target</code>的，因为原始数组是非递减的，所以可以确定答案为<code>[mid+1 .. last]</code>之间，所以<code>first = mid + 1</code></li></ul></li><li><p>情况2，<code>arr[mid] &lt; target: 5 6 1 2 3 4</code></p><ul><li><code>arr[mid] = 1</code>，<code>target</code>为右端点4，<code>arr[mid] &lt; target</code>，说明答案肯定不在<code>[mid+1 ... last]</code>，但是<code>arr[mid]</code>有可能是答案，所以答案在<code>[first,mid]</code>区间，所以<code>last = mid</code>；</li></ul></li><li><p>情况3，<code>arr[mid] == target</code>:</p><ul><li><p>如果是1 0 1 1 1，<code>arr[mid] = target = 1</code>，答案在左边</p></li><li><p>如果是1 1 1 0 1，<code>arr[mid] = target = 1</code>，答案在右边</p><p>所以这种情况，不能确定答案在左边还是右边，那么就让<code>last = last - 1</code>，慢慢的缩小区间，同时也不会错过答案。</p></li></ul></li></ol><hr><p>举个栗子：</p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/one.png" alt></div></p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/two.png" alt></div></p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/three.png" alt></div></p><hr><p>python3(3.5.2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        lenArray = len(rotateArray)</span><br><span class="line">        <span class="keyword">if</span> lenArray == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            first = <span class="number">0</span></span><br><span class="line">            last = lenArray<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> first &lt; last:</span><br><span class="line">                mid = int((first + last) / <span class="number">2</span> <span class="keyword">if</span> (first + last) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> (first + last - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> (rotateArray[mid] &gt; rotateArray[last]):</span><br><span class="line">                    first = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> (rotateArray[mid] &lt; rotateArray[last]):</span><br><span class="line">                    last = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    last -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rotateArray[first]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组[3,4,5,1,2]为[1,2,3,4,5]的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>xxx.github.io 拒绝访问</title>
    <link href="http://yoursite.com/2020/09/24/xxx-github-io-%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2020/09/24/xxx-github-io-拒绝访问/</id>
    <published>2020-09-24T02:14:01.185Z</published>
    <updated>2020-09-24T04:03:29.692Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>hexo 搭建个人博客中<code>hexo s -g</code>能在本地<code>localhost:4000</code>看到生成的博客页面，但是<code>hexo d -g</code>之后出现</p><p><code>xxxx.github.io</code>拒绝了我们的请求，无法访问此网站</p><a id="more"></a><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/one.png" alt="拒绝访问"></div></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在本地dos先<code>ping</code>一下个人博客地址，</p><p>若<code>loss = 0%</code>时，很可能就是出现了访问被服务端拦截，也就是被墙了。</p><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/two.png" alt="ping xxx.github.io"></div></p><p>此时只需要<a href="https://jingyan.baidu.com/article/b87fe19e4e1faf5218356839.html" target="_blank" rel="noopener">修改一下本地DNS</a>就为<code>114.114.114.114</code>就可以了。</p><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/three.png" alt="修改本地DNS"></div></p><p>若<code>loss = 100%</code>就是博客部署有问题，检查与github仓库是否连接，查看ssh密钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;hexo 搭建个人博客中&lt;code&gt;hexo s -g&lt;/code&gt;能在本地&lt;code&gt;localhost:4000&lt;/code&gt;看到生成的博客页面，但是&lt;code&gt;hexo d -g&lt;/code&gt;之后出现&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xxxx.github.io&lt;/code&gt;拒绝了我们的请求，无法访问此网站&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>考研这一路上</title>
    <link href="http://yoursite.com/2019/12/24/%E8%80%83%E7%A0%94%E8%BF%99%E4%B8%80%E8%B7%AF%E4%B8%8A/"/>
    <id>http://yoursite.com/2019/12/24/考研这一路上/</id>
    <published>2019-12-24T02:23:18.656Z</published>
    <updated>2020-09-24T03:20:31.640Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>阈值分割</title>
    <link href="http://yoursite.com/2019/08/23/%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2/"/>
    <id>http://yoursite.com/2019/08/23/阈值分割/</id>
    <published>2019-08-23T05:20:32.378Z</published>
    <updated>2019-03-09T08:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="otsu阈值分割算法及其改进"><a href="#otsu阈值分割算法及其改进" class="headerlink" title="otsu阈值分割算法及其改进"></a>otsu阈值分割算法及其改进</h2><h3 id="一、阈值分割简介"><a href="#一、阈值分割简介" class="headerlink" title="一、阈值分割简介"></a>一、阈值分割简介</h3><p>阈值分隔是一种区域分割技术，它适用于物体与背景有较强对比的景物分割。它计算简单，而且总能用封闭而且连通的边界定义不交叠的区域。当使用阈值规则进行图像分割时，所有灰度值大于或等于某阈值的像素都被判属于物体。 一维Otsu算法有计算简洁、稳定、自适应强等优点，被广泛用于图像分割中。但一维Otsu算法没有考虑图像像素点之间的关系，当图像中有噪声时，会导致分割的效果不理想。因此，刘健庄等人在1993年提出了二维的Otsu算法，提升了算法的抗噪声能力。</p><a id="more"></a><h3 id="二、算法思想及其过程："><a href="#二、算法思想及其过程：" class="headerlink" title="二、算法思想及其过程："></a>二、算法思想及其过程：</h3><blockquote><p>1、统计灰度级中每个像素在整幅图像中的个数。<br>2、计算每个像素在整幅图像的概率分布。<br>3、对灰度级进行遍历搜索，计算当前灰度值下前景背景类间概率。<br>4、通过目标函数计算出类内与类间方差下对应的阈值。</p></blockquote><p>由上述Ostu的基本原理得知，经典的OTSU算法能够很好的分割图像中直方图波峰和波谷不明显的图像，但计算量比较大，即遍历整个图像X的灰度值，并计算每个灰度值的类间方差，然后找出其中最大值，才最终得到最佳阈值，当图像X的尺寸增加时，该算法的计算量急剧增加，效率不高。下面来介绍一种改进的Ostu算法，即二维的Ostu算法。</p><h3 id="三、二维Otsu算法"><a href="#三、二维Otsu算法" class="headerlink" title="三、二维Otsu算法"></a>三、二维Otsu算法</h3><p>同时考虑像素的灰度值分布和它们邻域像素的平均灰度值分布，因此形成的阈值是一个二维矢量，最佳的阈值在一个二维的测度准则下确定最大值时得到。</p><p>（1）设图像I(x,y),的灰度级为L级，那么图像的邻域平均灰度也分为L级。<br>（2）设f(x,y)为像素点(x,y)的灰度值，g(x,y)为像素点(x,y)为中心的K*K的像素点集合的灰度平均值。令f(x,y)=i,g(x,y)=j，然后就形成了一个二元组(i,j)。<br>（3）设二元组（i,j）出现的次数为fij，然后求出二元组对应的概率密度Pij，Pij=fij/N, i,j=1,2，…，L，其中N为图像像素点总数。<br>（4）任意选取一个阈值向量(s,t)选取的阈值向量将图像的二维直方图划分为4个区域，B、C区域代表图像的前景和背景，A、D区域代表噪声点。<br>（5）设C、B两个区域对应的概率分别为w1，w2，对应的均值矢量为u1，u2。整个图片所对应的均值矢量为uT。</p><p><div align="center"><img src="/2019/08/23/阈值分割/one.png" alt title="二维Otsu算法"></div></p><h3 id="四、基于模拟退火的Otsu阈值分割算法"><a href="#四、基于模拟退火的Otsu阈值分割算法" class="headerlink" title="四、基于模拟退火的Otsu阈值分割算法"></a>四、基于模拟退火的Otsu阈值分割算法</h3><h4 id="4-1、模拟退火算法的原理"><a href="#4-1、模拟退火算法的原理" class="headerlink" title="4.1、模拟退火算法的原理"></a>4.1、模拟退火算法的原理</h4><p>模拟退火算法本质上也是一种贪心算法，在每一次迭代时总体上都选择一个当前最优解，但在它搜索的过程中引入了适当的随机因素，能够以一定的概率接受一个恶化解，因而能跳出局部最优的陷阱，求的全局最优解。<br>假设f(x)为优化函数，g(x)为状态产生函数，R为可行解空间，模拟退火的基本描述如下，<br>1、任选一初始状态，计算其目标函数值f(x)，并选择初始控制温度，T0和markov链的长度；<br>2、在R中产生一个随机扰动，令x1=g(x)，计算其目标函数值f(x1)；<br>3、根据状态接受函数判断是否接受，如果f(x1) &lt; f(x0)，则接受新状态x1为当前状态否则按Metropolis准则判决是否接受x1，若接受，则令当前状态等于x1，若不接受，则令当前状态等于x0；<br>4、根据某个收敛准则，判断抽样过程是否终止，是则转5，否则转2；<br>5、按照某个温度冷却方案降低控制温度T；<br>6、根据某个收敛准则，判断模拟退火过程是否终止，是则转7，否则转2；<br>7、当前解作为最优解输出。</p><h4 id="4-2、模拟退火优化的图像和阈值分割算法"><a href="#4-2、模拟退火优化的图像和阈值分割算法" class="headerlink" title="4.2、模拟退火优化的图像和阈值分割算法"></a>4.2、模拟退火优化的图像和阈值分割算法</h4><p>算法的<strong>基本思想</strong>是：以模拟退火智能算法代替原OTSU算法的穷举运算，在解空间中跳跃的搜索图像分割的最佳阈值，减少传统算法的运算量，在获得较好的图像分割效果的基础上，提高算法的效率，Otsu-Sa算法首先绘制图像的直方图，并计算图像像素的灰度均值及累加概率，调用模拟退火算法计算最佳阈值。<br>Ostu-Sa算法的具体描述如下：<br>算法名称：Otsu-Sa<br>输入：原始图像<br>输出：二值化分割图像</p><h4 id="4-2-算法步骤"><a href="#4-2-算法步骤" class="headerlink" title="4.2 算法步骤"></a>4.2 算法步骤</h4><blockquote><p>一：绘制图像的直方图；<br>二：计算图像的灰度总均值；<br>三：计算前i个像素的灰度均值；<br>四：计算像素的累加概率；<br>五：选择优化函数，调用模拟退火算法Sa，计算最佳阈值；<br>六：以步骤五返回的最佳阈值对图像进行二值化分割；</p></blockquote><h3 id="五、处理结果"><a href="#五、处理结果" class="headerlink" title="五、处理结果"></a>五、处理结果</h3><h4 id="GUI导入图片后界面"><a href="#GUI导入图片后界面" class="headerlink" title=" GUI导入图片后界面 "></a><strong> GUI导入图片后界面 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo1.png" alt title="导入图片"></div></p></blockquote><h4 id="Otsu算法结果"><a href="#Otsu算法结果" class="headerlink" title=" Otsu算法结果 "></a><strong> Otsu算法结果 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo2.png" alt title="Otsu阈值分割"></div></p></blockquote><h4 id="二维Otsu算法结果"><a href="#二维Otsu算法结果" class="headerlink" title=" 二维Otsu算法结果 "></a><strong> 二维Otsu算法结果 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo3.png" alt="二维Otsu算法灰度直方图" title="二维Otsu算法灰度直方图"></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo4.png" alt="二维Otsu算法结果对比" title="二维Otsu算法结果对比"></div></p></blockquote><h3 id="六、所有代码及文件"><a href="#六、所有代码及文件" class="headerlink" title="六、所有代码及文件"></a>六、所有代码及文件</h3><p><a href="https://github.com/YiMoFan/Otsu" title="阈值分割" target="_blank" rel="noopener"><strong> 阈值分割 </strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;otsu阈值分割算法及其改进&quot;&gt;&lt;a href=&quot;#otsu阈值分割算法及其改进&quot; class=&quot;headerlink&quot; title=&quot;otsu阈值分割算法及其改进&quot;&gt;&lt;/a&gt;otsu阈值分割算法及其改进&lt;/h2&gt;&lt;h3 id=&quot;一、阈值分割简介&quot;&gt;&lt;a href=&quot;#一、阈值分割简介&quot; class=&quot;headerlink&quot; title=&quot;一、阈值分割简介&quot;&gt;&lt;/a&gt;一、阈值分割简介&lt;/h3&gt;&lt;p&gt;阈值分隔是一种区域分割技术，它适用于物体与背景有较强对比的景物分割。它计算简单，而且总能用封闭而且连通的边界定义不交叠的区域。当使用阈值规则进行图像分割时，所有灰度值大于或等于某阈值的像素都被判属于物体。 一维Otsu算法有计算简洁、稳定、自适应强等优点，被广泛用于图像分割中。但一维Otsu算法没有考虑图像像素点之间的关系，当图像中有噪声时，会导致分割的效果不理想。因此，刘健庄等人在1993年提出了二维的Otsu算法，提升了算法的抗噪声能力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>母牛的故事</title>
    <link href="http://yoursite.com/2019/08/23/%E6%AF%8D%E7%89%9B%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2019/08/23/母牛的故事/</id>
    <published>2019-08-23T05:20:32.376Z</published>
    <updated>2020-09-24T07:05:42.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，<br>每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，<br>n的含义如题目中描述。n=0表示输入数据的结束，不做处理。</p></blockquote><a id="more"></a><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>对于每个测试实例，输出在第n年的时候母牛的数量。<br>每个输出占一行。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote><p>2<br>4<br>5<br>0</p></blockquote><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote><p>2<br>4<br>6</p></blockquote><p>将每一年的牛数分为母牛数和小牛数，然后分别列举出前五年的母牛数和小牛数</p><table><thead><tr><th style="text-align:center">年份</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">母牛数</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">小牛数</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">3</td></tr></tbody></table><p>小牛每四年变为母牛，则第五年之后的每一年的母牛数就为前一年的母牛数加上第前三年的母牛数<br>（不是小牛数是因为这个时候的小牛数包括这一年的母牛数和前几年的母牛数，而这一年产生的小牛数就等于这一年的母牛数）,<br>a为母牛，b为小牛。则<code>a[i] = a[i-1]+a[i-3]</code><br>第五年之后的小牛数就为该年的母牛数前面算的为<code>a[i-1]+a[i-3]</code>加上前一年的小牛数<code>b[i-1]</code>在减去这一年从小牛变为母牛的数量<code>a[i-3]</code>。<br>所以<code>b[i] = a[i-1]+a[i-3]+b[i-1]-a[i-3] = a[i-1]+b[i-1]</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">10000</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[<span class="number">10000</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">3</span>) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[n<span class="number">-1</span>]+b[n<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; n; ++i) &#123;</span><br><span class="line">a[i] = a[i<span class="number">-1</span>] + a[i<span class="number">-3</span>];</span><br><span class="line">b[i] = b[i<span class="number">-1</span>] + a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[n<span class="number">-1</span>] + b[n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，&lt;br&gt;每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&amp;lt;n&amp;lt;55)，&lt;br&gt;n的含义如题目中描述。n=0表示输入数据的结束，不做处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="递推" scheme="http://yoursite.com/tags/%E9%80%92%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>数学建模国赛</title>
    <link href="http://yoursite.com/2019/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/08/23/数学建模国赛/</id>
    <published>2019-08-23T05:20:32.372Z</published>
    <updated>2019-08-30T09:12:19.306Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
      <category term="数学建模" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理</title>
    <link href="http://yoursite.com/2019/08/23/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/23/数字图像处理/</id>
    <published>2019-08-23T05:20:32.369Z</published>
    <updated>2020-09-24T04:03:11.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字图像处理基础"><a href="#数字图像处理基础" class="headerlink" title="数字图像处理基础"></a>数字图像处理基础</h2><p>首先是读取图片文件<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clc;<span class="built_in">close</span>;</span><br><span class="line"><span class="built_in">clear</span> all;</span><br><span class="line"></span><br><span class="line">num_I = imread(<span class="string">'pathname'</span>);</span><br><span class="line">imfinfo =(<span class="string">'pathname'</span>)  % 输出图像的基本信息</span><br></pre></td></tr></table></figure></p><p>其中pathname为路径名，最好为绝对路径，如果为相对路径必须让matlab的工作路径与图片路径一致。</p><a id="more"></a><p>然后就会的得到图像的图像矩阵，格式为uint8<br>如果为rgb图像就会是一个三维的矩阵，灰度图就是一个一维的图像矩阵。<br>所以只需要对图像的数字矩阵处理。</p><p>比如简单的将图像分割为四个部分</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">clc;close;</span><br><span class="line">clear all;</span><br><span class="line">num = imread(<span class="string">'cameraman.tif'</span>);</span><br><span class="line">[row,col] = <span class="built_in">size</span>(num);  <span class="comment">% 提取矩阵的行和列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span>:<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> jj = <span class="number">1</span>:<span class="number">2</span></span><br><span class="line">        <span class="comment">% 将图片分割成四部分组成一个元胞数组</span></span><br><span class="line">        image&#123;ii,jj&#125;=num((ii<span class="number">-1</span>)*col/<span class="number">2</span>+<span class="number">1</span>:ii*col/<span class="number">2</span>,(jj<span class="number">-1</span>)*col/<span class="number">2</span>+<span class="number">1</span>:jj*col/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(image&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(image&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(image&#123;<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(image&#123;<span class="number">2</span>,<span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure><p>基本的方法就是将原图像矩阵分割成相同大小的四个子矩阵。</p><p>还有图像的加减乘除运算：<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Z</span>=imadd(<span class="keyword">X</span>,<span class="keyword">Y</span>);  %图像的加运算，<span class="keyword">X</span>,<span class="keyword">Y</span>是输入的两幅图像，其中一个可以是常数</span><br><span class="line"><span class="keyword">Z</span>=imsubtract(<span class="keyword">X</span>,<span class="keyword">Y</span>);  %图像的减运算，<span class="keyword">Y</span>可以是常数</span><br><span class="line"><span class="keyword">Z</span>=immiltiply(<span class="keyword">X</span>,y);  %图像的乘运算，<span class="keyword">Y</span>也可以是常数</span><br><span class="line"><span class="keyword">Z</span>=imdivide(<span class="keyword">X</span>,y);  %图像的除运算，<span class="keyword">Y</span>也可以是常数</span><br></pre></td></tr></table></figure></p><p>图像的输出为：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imshow(<span class="built_in">image</span>);  % <span class="built_in">image</span> 为图像矩阵</span><br></pre></td></tr></table></figure></p><p>然后就是图像类型格式转换的一些函数，主要的作用就是改变图像的格式，可以对图像矩阵进行处理。</p><p>常用的有：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I=rgb2gray(RGB)%将一副灰度图转换为真彩色图</span><br><span class="line">[X,map]=rgb2ind(RGB,n)%将RGB图转换为索引色图</span><br><span class="line">BW=im2bw(I,level)%将真彩色图或灰度图转换为二值图，level为阈值</span><br></pre></td></tr></table></figure></p><p>因为现阶段的图像处理一般都是对灰度图像的处理，所以一般都会用到<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image</span> = rgb2gray(I)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>然后统计图像的灰度值的分布称为直方图<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imhist<span class="comment">(img)</span>; <span class="meta">%</span> img 为矩阵图像的灰度值</span><br></pre></td></tr></table></figure></p><p>二值化图像就是图像矩阵中只有0和1两个元素，称为逻辑矩阵。<br>将一个图片转换为二值化图片的过程为图像二值化，确定阈值的方法为阈值分割。</p><p>介绍一种常用的方法为：<strong>otsu阈值分割算法</strong></p><blockquote><p>对图像I(x,y)，前景和背景的分割阈值记作T，<br>前景像素点数占整幅图像的比例为ω0，其平均灰度μ0；<br>背景像素点数占整幅图像的比例为ω1，其平均灰度μ1；<br>图像的总平均灰度记为μ=ω0∗μ0 +ω1∗μ1；<br>类间方差记为g。<br>假设：<br>背景较暗，且图像的大小为M×N，<br>图像中，<br>像素灰度值小于阈值T的像素个数记作N0，<br>像素灰度值大于阈值T的像素个数记作N1，<br>则有：</p></blockquote><p>　　　　　　ω0 = N0 / M×N ；      (1)</p><p>　　　　　　ω1 = N1 / M×N ；      (2)</p><p>　　　　　　N0 + N1 = M×N ；       (3)</p><p>　　　　　　ω0+ω1=1；           (4)</p><p>　　　　　　μ=ω0<em>μ0+ω1</em>μ1；  (5)</p><p>　　　　　　g =ω0(μ0-μ)^2+ω1(μ1-μ)^2；(6)</p><blockquote><p>将式(5)代入式(6),得到等价公式:</p></blockquote><p>　　　　　　g=ω0<em>ω1</em>(μ0-μ1)^2; 　(7)　这就是类间方差</p><blockquote><p>采用遍历的方法得到使类间方差g最大的阈值T,即为所求。</p></blockquote><p>在matlab中有一个函数可以直接运行：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I = imread('chepai.jpg')<span class="comment">;</span></span><br><span class="line">I = rgb2gray(<span class="name">I</span>)<span class="comment">;</span></span><br><span class="line">T2 = graythresh(<span class="name">I</span>)<span class="comment">;</span></span><br><span class="line">num2 = im2bw(<span class="name">I</span>,T2)<span class="comment">;</span></span><br><span class="line">imshow(<span class="name">num2</span>)</span><br></pre></td></tr></table></figure></p><h2 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h2><blockquote><p>1、数学建模的重要性，能参加的最好参加一下，涉及的知识面很广，提高眼界。<br>2、队友，不一定非要求理学院，计算机学院，经济学院<br>3、心态很重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数字图像处理基础&quot;&gt;&lt;a href=&quot;#数字图像处理基础&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理基础&quot;&gt;&lt;/a&gt;数字图像处理基础&lt;/h2&gt;&lt;p&gt;首先是读取图片文件&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clc;&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;clear&lt;/span&gt; all;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num_I = imread(&lt;span class=&quot;string&quot;&gt;&#39;pathname&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imfinfo =(&lt;span class=&quot;string&quot;&gt;&#39;pathname&#39;&lt;/span&gt;)  % 输出图像的基本信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中pathname为路径名，最好为绝对路径，如果为相对路径必须让matlab的工作路径与图片路径一致。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数字图像处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>我的简历</title>
    <link href="http://yoursite.com/2019/08/23/MyResume/"/>
    <id>http://yoursite.com/2019/08/23/MyResume/</id>
    <published>2019-08-23T05:20:32.365Z</published>
    <updated>2020-09-24T06:27:40.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyResume"><a href="#MyResume" class="headerlink" title="MyResume"></a>MyResume</h1><hr><h2 id="胥帆"><a href="#胥帆" class="headerlink" title="胥帆"></a>胥帆</h2><blockquote><p><strong>基本信息</strong>：<br>性别：男<br>出生年月：1999.05.01<br>学历：本科<br>专业：通信工程<br>Email: <a href="mailto:ctgu_xufan@foxmail.com" target="_blank" rel="noopener">ctgu_xufan@foxmail.com</a><br>个人博客：<a href="https://yimofan.github.io" target="_blank" rel="noopener">https://yimofan.github.io</a><br><a id="more"></a></p></blockquote><blockquote><ul><li>工科男一枚，程序员一只。</li><li>喜欢学习各种技术，热爱科研及编程。</li><li>热爱生活，积极进取。</li><li>性格随和，宽容大方。</li></ul></blockquote><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><table><thead><tr><th style="text-align:left">三峡大学</th><th style="text-align:left">专业：通信工程</th><th style="text-align:left">2016.9-2020.6 宜昌</th></tr></thead><tbody><tr><td style="text-align:left"><strong>平均成绩：89.05</strong></td><td style="text-align:left"><strong>专业排名：3/66</strong></td><td style="text-align:left"><strong>GPA：3.416/4.0</strong></td></tr></tbody></table><div align="center"></div><div style="float:left"></div><div style="float:right"></div><div style="float:left"></div><div align="center"></div><div style="float:right"></div><p><strong>论文发表</strong>：<a href="https://ieeexplore.ieee.org/document/8950159" target="_blank" rel="noopener">Z. Cai, Z. Xiong, K. Wan, Y. Xu and F. Xu, “A Node Selecting Approach for Traffic Network Based on Artificial Slime Mold,” in IEEE Access, vol. 8, pp. 8436-8448, 2020.</a> </p><h2 id="奖学金及学习情况"><a href="#奖学金及学习情况" class="headerlink" title="奖学金及学习情况"></a>奖学金及学习情况</h2><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">奖学金</th><th style="text-align:center">班级成绩排名</th><th style="text-align:center">年级成绩排名</th><th style="text-align:center">综测排名</th></tr></thead><tbody><tr><td style="text-align:center">2016-2017</td><td style="text-align:center">国家励志奖学金校二等奖学金</td><td style="text-align:center">1/36</td><td style="text-align:center">5/131</td><td style="text-align:center">5/131</td></tr><tr><td style="text-align:center">2017-2018</td><td style="text-align:center">国家励志奖学金校一等奖</td><td style="text-align:center">1/37</td><td style="text-align:center">3/66</td><td style="text-align:center">2/66</td></tr><tr><td style="text-align:center">2018-2019</td><td style="text-align:center">国家励志奖学金校二等奖</td><td style="text-align:center">2/37</td><td style="text-align:center">5/66</td><td style="text-align:center">5/66</td></tr><tr><td style="text-align:center">2019-2020</td><td style="text-align:center">国家励志奖学金校一等奖</td><td style="text-align:center">1/37</td><td style="text-align:center">3/66</td><td style="text-align:center">3/66</td></tr></tbody></table><h2 id="学科竞赛"><a href="#学科竞赛" class="headerlink" title="学科竞赛"></a>学科竞赛</h2><h4 id="国家级竞赛"><a href="#国家级竞赛" class="headerlink" title="国家级竞赛"></a>国家级竞赛</h4><ul><li>2019年美国大学生数学建模国家一等奖（Escape From the Louver）</li><li>2018年全国大学生电工数学建模竞赛国家一等奖（海南省主要城市房价的分析与预测）</li><li>2019年全国大学生电工数学建模竞赛国家二等奖（停车场车位的排布与规划）</li></ul><h4 id="省部级竞赛"><a href="#省部级竞赛" class="headerlink" title="省部级竞赛"></a>省部级竞赛</h4><ul><li>2017年高教杯全国大学生数学建模竞赛省二等奖（CT系统参数标定及成像）</li><li>2019年第十届湖北省蓝桥杯C/C++组二等奖</li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><ul><li><strong>去雾算法gui</strong>：<a href="https://github.com/YiMoFan/diqilun_gui" target="_blank" rel="noopener">去雾算法</a></li><li><strong>2018年国赛程序</strong>：<a href="https://github.com/YiMoFan/2018guosai" target="_blank" rel="noopener">国赛程序</a></li><li><strong>hexo搭建的个人博客</strong>：<a href="https://github.com/YiMoFan/YiMoFan.github.io" target="_blank" rel="noopener">个人博客</a></li><li><strong>蓝桥杯训练</strong>：<a href="https://github.com/YiMoFan/lanqiaobeixunlian" target="_blank" rel="noopener">蓝桥杯训练</a></li><li><strong>图像处理阈值分割</strong>：<a href="https://github.com/YiMoFan/Otsu" target="_blank" rel="noopener">阈值分割</a></li></ul><h2 id="资格证书"><a href="#资格证书" class="headerlink" title="资格证书"></a>资格证书</h2><blockquote><p> 1、通过了CET-4考试，具有较好的英文阅读能力，能阅读英文技术书籍和文档，能进行基本的口语交流。<br>2、计算机三级网络技术，具有一定计算机运行能力和知识。</p></blockquote><h2 id="担任职务"><a href="#担任职务" class="headerlink" title="担任职务"></a>担任职务</h2><blockquote><h3 id="启明星创新实验室软件组组长"><a href="#启明星创新实验室软件组组长" class="headerlink" title="启明星创新实验室软件组组长"></a><a href="https://baike.baidu.com/item/%E4%B8%89%E5%B3%A1%E5%A4%A7%E5%AD%A6%E5%90%AF%E6%98%8E%E6%98%9F%E5%88%9B%E6%96%B0%E5%AE%9E%E9%AA%8C%E5%AE%A4/18559411?fr=aladdin" target="_blank" rel="noopener">启明星创新实验室</a>软件组组长</h3><blockquote><p><strong>单位</strong>：<a href="https://www.ctguqmx.com/" target="_blank" rel="noopener">三峡大学计算机与信息学院启明星创新实验室</a><br><strong>时间</strong>：2017-2018<br><strong>职责</strong>：负责管理启明星工作室软件组的各项事务，包括规章制度的制定，人员招新管理，每周总结的例会及每周签到的监督，承接各老师给予的各项项目的制作等工作。<br><strong>收获</strong>：使自己在管理及与人交流方面的能力得到较高的提升，学会对自己进行自我控制，学会了每周对自己的学习成果进行总结，同时提升了自己的眼界，了解到许多在计算机软件方面的知识和结识了很多的大佬。</p></blockquote><h3 id="数学建模助理教练"><a href="#数学建模助理教练" class="headerlink" title="数学建模助理教练"></a>数学建模助理教练</h3><blockquote><p><strong>单位</strong>：三峡大学理学院<br><strong>时间</strong>：2018.3-2019.3<br><strong>职责</strong>：负责管理参加数学建模国赛队伍的培训，讲座及讲评论文。协助教练老师组安排数学建模国赛期间的各队伍的机位，后勤工作。<br><strong>收获</strong>：在教别人数学建模的知识的同时也巩固了自己所学到的数学建模的知识，在编程方面能够更加熟练的掌握各个算法的思路，在改卷的过程中也能评判出好文章的好处和差文章的不足，方便自己在以后比赛的过程中为文章添加更多的亮点。</p></blockquote></blockquote><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ol><li>具有较强的数学功底和数学分析能力，高等数学（上：99  下：93）和数值分析（99）都取得了较高的成绩， 参加了各类数学建模大型赛事幵都取得了成绩，之后还担仸了一年的数学建模助理教练，加强了自身的数学思 维和编程能力。熟悉数学建模中数学公式的建立和分析以及求解。 </li><li>本科阶段动手能力和编程能力较强，对各种技术和科研充满热情，做过部分的图像处理方面的研究，包括otsu 阈值分割算法及其的改进（课设：95 分），图像去雾算法的研究及程序的实现，看过何凯文的Guided Image Filtering及程序的实现</li><li>大学期间一直在启明星创新实验室中学习，在其严格的规章制度下每周都会参加算法竞赛幵举行周例会做周总 结，还自主通过hexo和github搭建了个人博客幵把自己所学知识进行更博。 </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MyResume&quot;&gt;&lt;a href=&quot;#MyResume&quot; class=&quot;headerlink&quot; title=&quot;MyResume&quot;&gt;&lt;/a&gt;MyResume&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;胥帆&quot;&gt;&lt;a href=&quot;#胥帆&quot; class=&quot;headerlink&quot; title=&quot;胥帆&quot;&gt;&lt;/a&gt;胥帆&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本信息&lt;/strong&gt;：&lt;br&gt;性别：男&lt;br&gt;出生年月：1999.05.01&lt;br&gt;学历：本科&lt;br&gt;专业：通信工程&lt;br&gt;Email: &lt;a href=&quot;mailto:ctgu_xufan@foxmail.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ctgu_xufan@foxmail.com&lt;/a&gt;&lt;br&gt;个人博客：&lt;a href=&quot;https://yimofan.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yimofan.github.io&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="简历" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>快速幂取模</title>
    <link href="http://yoursite.com/2019/08/23/%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/"/>
    <id>http://yoursite.com/2019/08/23/快速幂取模/</id>
    <published>2019-08-23T05:20:32.363Z</published>
    <updated>2020-09-24T07:04:01.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速幂取模"><a href="#快速幂取模" class="headerlink" title="快速幂取模"></a>快速幂取模</h2><p>我们先从简单的例子入手：求a^b mod c = 几。</p><a id="more"></a><p>算法1.首先直接地来设计这个算法：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">ans</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">1</span>;<span class="built_in">i</span>&lt;=b;<span class="built_in">i</span>++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> * a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> <span class="comment">% c;</span></span><br></pre></td></tr></table></figure></p><p>这个算法的时间复杂度体现在for循环中，为O（b）.这个算法存在着明显的问题，如果a和b过大，很容易就会溢出。</p><p>那么，我们先来看看第一个改进方案：在讲这个方案之前，要先有这样一个公式：</p><p>a^b mod c = (a mod c)^b mod c</p><p><img src="/2019/08/23/快速幂取模/one.png" alt></p><p>上面公式为下面公式的引理，即积的取余等于取余的积的取余。</p><p><img src="/2019/08/23/快速幂取模/two.png" alt></p><p>证明了以上的公式以后，我们可以先让a关于c取余，这样可以大大减少a的大小，</p><p>于是不用思考的进行了改进：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">ans</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = a <span class="comment">% c; //加上这一句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">1</span>;<span class="built_in">i</span>&lt;=b;<span class="built_in">i</span>++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> * a <span class="comment">% c;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> <span class="comment">% c;</span></span><br></pre></td></tr></table></figure></p><p>这个算法在时间复杂度上没有改进，仍为O(b)，不过已经好很多的，但是在c过大的条件下，还是很有可能超时，所以，我们推出以下的快速幂算法。</p><p>快速幂算法依赖于以下明显的公式，我就不证明了。</p><p><img src="/2019/08/23/快速幂取模/three.png" alt></p><p>有了上述两个公式后，我们可以得出以下的结论：</p><p>1.如果b是偶数，我们可以记k = a^2 mod c，那么求(k)^(b/2) mod c就可以了。</p><p>2.如果b是奇数，我们也可以记k = a^2 mod c，那么求((k)^(b/2) mod c × a ) mod c =((k)^(b/2) mod c * a) mod c 就可以了。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nt ans = <span class="number">1</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span> = a % c<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">if(b%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = (ans * a) mod c<span class="comment">; //如果是奇数，要多求一步，可以提前算到ans中</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">k</span> = (a*a) % c<span class="comment">; //我们取a2而不是a</span></span><br><span class="line"></span><br><span class="line">for(int i = <span class="number">1</span><span class="comment">;i&lt;=b/2;i++)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = (ans * k) % c<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = ans % c<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到，我们把时间复杂度变成了O(b/2).当然，这样子治标不治本。但我们可以看到，当我们令k = (a * a) mod c时，状态已经发生了变化，我们所要求的最终结果即为(k)b/2 mod c而不是原来的ab mod c，所以我们发现这个过程是可以迭代下去的。当然，对于奇数的情形会多出一项a mod c，所以为了完成迭代，当b是奇数时，我们通过</p><p>ans = (ans * a) % c;来弥补多出来的这一项，此时剩余的部分就可以进行迭代了。</p><p>形如上式的迭代下去后，当b=0时，所有的因子都已经相乘，算法结束。于是便可以在O（log b）的时间内完成了。于是，有了最终的算法：快速幂算法。</p><p><div align="right">——–摘自百度文库</div></p><hr><p>当几个数连续乘最后取模时，可以将每个数字先取模，最后在取模，即%对于*具有结合律，但是如果当用来取模的数本身就很大，采取上述方法就不行了，这个时候可以借鉴快速幂取模的方法，来达到取模的效果，即<strong>当快速幂的数据范围超过long long时，可以通过快速幂中套快速乘的方法防止溢出</strong>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(ans+a)%p;</span><br><span class="line">a=(a+a)%p;</span><br><span class="line">b=b&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Mode</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> base = a%p;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span> (b&amp;<span class="number">1</span>) ans=<span class="built_in">pow</span>(ans,base,p)%p;</span><br><span class="line">base =<span class="built_in">pow</span>(base,base,p)%p;</span><br><span class="line">b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;a,&amp;b,&amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Mode(a,b,p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速幂取模&quot;&gt;&lt;a href=&quot;#快速幂取模&quot; class=&quot;headerlink&quot; title=&quot;快速幂取模&quot;&gt;&lt;/a&gt;快速幂取模&lt;/h2&gt;&lt;p&gt;我们先从简单的例子入手：求a^b mod c = 几。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>买不到的数目</title>
    <link href="http://yoursite.com/2019/08/23/%E4%B9%B0%E4%B8%8D%E5%88%B0%E7%9A%84%E6%95%B0%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/08/23/买不到的数目/</id>
    <published>2019-08-23T05:20:32.360Z</published>
    <updated>2020-09-24T08:22:09.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。<br>小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买  10  颗糖。<br>你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。<br>本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>两个正整数，表示每种包装中糖的颗数(都不多于1000) </p></blockquote><a id="more"></a><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>一个正整数，表示最大不能买到的糖数 </p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote><p>4  7 </p></blockquote><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote><p>17</p></blockquote><p><strong> 方法一 </strong><br>对于题中的两个数a和b，假设较小的为a，只需要确定从a开始的第一次出现a个连续的可以被a和b组合出来的数。<br>因为这个之后的每个数都可以是这些数加a或者加b得到的，然后在将这连续的数中的第一个数减一就可以的<br>得到最大的不能组合出来的数。举个例子：<br>4和7，第一次出现的连续4个可以被组合的数是18,19,20,21，则之后的22=18+4,23=19+4，，，。最大的就是18-1=17。</p><p><strong> 方法二 </strong><br>对于题中的数a和b，可以确定的是他们的最大公倍数之后的数肯定是能够被组合的，所以可以通过从最大的公<br>倍数依次减一判断能否组合，（判断的方法：先判断能否被a或者被b整数，若不能，减a，判断能否被b整数，若<br>不能，再减a，知道该数小于a）；</p><p><strong> 方法三 </strong><br><strong><em> 扩展欧几里得 </em></strong>： 自然数a,b互质,则不能表示成ax+by（x,y为非负整数）的最大整数是ab-a-b。<br>证明：</p><p>a或者b是1的情况下容易证明.<br>以下情况都是a&gt;1且b&gt;1的情况.<br>首先证明ab-a-b不能表示成ax+by<br>假设ab-a-b=ax+by,那么ab=am+bn (m,n都大于等于1)<br>左边是a的倍数,右边am是a的倍数,那么要求bn也要是a的倍数<br>b不是a的倍数,只能要求n是a的倍数,这样的话,bn=bn’a&gt;=ba<br>那么am=ab-bn所以am1矛盾.<br>接着证明ab-a-b+i能表示成ax+by(i&gt;0)<br>因为ab互质,最大公约数就是1,根据辗转相减的方法知ma+nb=1,<br>不妨假设m&gt;0,n1(m=0意味着nb=1不可能的),所以ab-a-b+i(ma+nb)=(im-1)a+(a+in-1)b<br>im-1&gt;0,现在只要证明a+in-1&gt;=0,因为ima+inb=i<br>如果,|in|&gt;ja其中j&gt;0,那么ima=i+|in|b&gt;jab,所以im&gt;jb<br>所以ima+inb=(im-jb)a-(|in|-ja)b=i,说明|in|&gt;ja时,我们就能调整im,in使得|in|</p><p>二程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (b == <span class="number">0</span> ? a:(gcd(b,a%b)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bei</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a*b/gcd(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = bei(a,b);</span><br><span class="line"><span class="keyword">int</span> temp = ans;</span><br><span class="line"><span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp % a == <span class="number">0</span> || temp % b == <span class="number">0</span>)</span><br><span class="line">temp = --ans;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">temp -= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fun(a,b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。&lt;br&gt;小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买  10  颗糖。&lt;br&gt;你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。&lt;br&gt;本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;两个正整数，表示每种包装中糖的颗数(都不多于1000) &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
</feed>
