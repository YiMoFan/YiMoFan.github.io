<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胥帆</title>
  <icon>https://www.gravatar.com/avatar/f90a8deeb07db0e48636ee95a27b26f3</icon>
  <subtitle>不善言辞，胆小认生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-10T03:19:00.934Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>胥帆</name>
    <email>1747380107@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回文数（java）</title>
    <link href="http://yoursite.com/2020/10/10/%E5%9B%9E%E6%96%87%E6%95%B0%EF%BC%88java%EF%BC%89/"/>
    <id>http://yoursite.com/2020/10/10/回文数（java）/</id>
    <published>2020-10-10T03:04:41.737Z</published>
    <updated>2020-10-10T03:19:00.934Z</updated>
    
    <content type="html"><![CDATA[<p>牛客练习赛71，题一：</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><div align="center"><img src="/2020/10/10/回文数（java）/one.png" alt="题目描述"></div></p><a id="more"></a><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>一行10个自然数，分别表示数码0~9的出现次数</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>如果无解，只输出”-1”（不含引号）</p><p>否则，输出一个数表示最小的解</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote><p>输入</p><p>0 2 4 2 0 2 0 0 0 0</p><p>输出</p><p>1223553221</p></blockquote><blockquote><p>1 1 4 5 1 4 0 0 0 0</p><p>-1</p></blockquote><blockquote><p>4 0 2 3 0 0 0 2 0 0</p><p>20037373002</p></blockquote><blockquote><p>2 0 0 0 0 0 0 0 0 1</p><p>-1</p></blockquote><blockquote><p>1 0 0 0 0 0 0 0 0 0</p><p>0</p></blockquote><p>备注： 保证输入的所有数都不超过10，且至少一个数大于0；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Main.solution(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for(int n : arr) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print(n + (n == arr[arr.length-1] ? "\n": " "));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(arr.toString());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> odd_count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">            sum += n;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) odd_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (odd_count&gt;<span class="number">1</span>) System.out.print(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((sum-arr[<span class="number">1</span>])==<span class="number">1</span> &amp;&amp; arr[<span class="number">1</span>] != <span class="number">0</span>) System.out.print(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String end = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    end = String.valueOf(i - <span class="number">1</span>);</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[i] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(String.valueOf(i - <span class="number">1</span>));</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(String.valueOf(i - <span class="number">1</span>));</span><br><span class="line">                    arr[i]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(sb + end + sb.reverse());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;牛客练习赛71，题一：&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;/2020/10/10/回文数（java）/one.png&quot; alt=&quot;题目描述&quot;&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>链表操作(java)</title>
    <link href="http://yoursite.com/2020/09/29/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C-java/"/>
    <id>http://yoursite.com/2020/09/29/链表操作-java/</id>
    <published>2020-09-29T11:19:39.125Z</published>
    <updated>2020-09-29T11:26:12.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表的各种操作"><a href="#链表的各种操作" class="headerlink" title="链表的各种操作"></a>链表的各种操作</h3><p>概念：一种重要的数据结构，储存带院是不连续的，每个结点由两部分组成：<br>储存的数值+前序结点和后序结点的指针，既有前序结点和指针又有后序结点的指针的链表称为双向链表，<br>只包含后序指针的链表为单链表。</p><a id="more"></a><h4 id="链表结点的实体类"><a href="#链表结点的实体类" class="headerlink" title="链表结点的实体类"></a>链表结点的实体类</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    ListNode next = <span class="literal">null</span>;  <span class="comment">//下一个结点</span></span><br><span class="line">    int <span class="keyword">data</span>;  <span class="comment">//结点数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ListNode(int <span class="keyword">data</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span> = <span class="keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ListNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.util.LinkMouseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ListNodeOperation &#123;</span><br><span class="line">    ListNode head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表添加结点</span></span><br><span class="line"><span class="comment">     * 找到链表的末尾结点，把新添加的数据作为末尾结点的后续结点</span></span><br><span class="line"><span class="comment">     * @param data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addListNode(<span class="keyword">int</span> data) &#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(data);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.<span class="keyword">next</span> = newNode;</span><br><span class="line">        newNode.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> printLink() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.<span class="keyword">print</span>(cur.data + (cur.<span class="keyword">next</span> == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="string">" "</span>));</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表删除结点；</span></span><br><span class="line"><span class="comment">     * 把待删除前的一个结点的next指向下一个结点。</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> deleteListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">// 判断链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.data == val) &#123;  <span class="comment">// 若删除头指针</span></span><br><span class="line">            head = head.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode pre = head;</span><br><span class="line">        ListNode temp = head.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;  <span class="comment">// 遍历链表</span></span><br><span class="line">            <span class="keyword">if</span> (temp.data == val) &#123;</span><br><span class="line">                pre.<span class="keyword">next</span> = temp.<span class="keyword">next</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = temp;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回链表长度</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length() &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">count</span>++;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表结点排序，并返回排序后的头结点；</span></span><br><span class="line"><span class="comment">     * 选择排序算法，即每次都选出未排序结点中最小的结点，与第一个未排序的结点交换</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode LinkSort() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode nextNode = cur.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">while</span> (nextNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.data &gt;= nextNode.data) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = cur.data;</span><br><span class="line">                    cur.data = nextNode.data;</span><br><span class="line">                    nextNode.data = temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                nextNode = nextNode.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除重复元素；</span></span><br><span class="line"><span class="comment">     * 需要额外的储存空间hashtable,调用hashtable.containsKey()来判断重复结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> distinctLink() &#123;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        Hashtable&lt;Integer, Integer&gt; hb = <span class="keyword">new</span> Hashtable&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (hb.containsKey(temp.data)) &#123;  <span class="comment">// 如果hashtable中已存在该结点，则跳过该结点</span></span><br><span class="line">                pre.<span class="keyword">next</span> = temp.<span class="keyword">next</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果hashtable中不存在该结点，将结点存到hashtable中</span></span><br><span class="line">                hb.put(temp.data, <span class="number">1</span>);</span><br><span class="line">                pre = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> deleteDuplecate() &#123;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = cur.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp.data == cur.data) &#123;</span><br><span class="line">                    temp.<span class="keyword">next</span> = temp.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp = temp.<span class="keyword">next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回倒数第k个结点；</span></span><br><span class="line"><span class="comment">     * 两个指针，第一个指针向前移动k-1次，之后两个指针共同前进；</span></span><br><span class="line"><span class="comment">     * 当前面的指针到达末尾时，后面的指针所在的位置就是倒数第k个位置</span></span><br><span class="line"><span class="comment">     * @param k</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findReverNode(<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k-<span class="number">1</span>; ++i) first = first.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (first.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.<span class="keyword">next</span>;</span><br><span class="line">            second = second.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找正数第k个元素</span></span><br><span class="line"><span class="comment">     * @param k</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findNode (<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( k &lt; <span class="number">1</span> || k &gt; length()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k-<span class="number">1</span>; ++i) &#123;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表，在反转指针前必须保存下个结点的指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reserveLink() &#123;</span><br><span class="line">        ListNode curNode = head;</span><br><span class="line">        ListNode preNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (curNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode nextNode = curNode.<span class="keyword">next</span>;</span><br><span class="line">            curNode.<span class="keyword">next</span> = preNode;</span><br><span class="line">            preNode = curNode;</span><br><span class="line">            curNode = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        head = preNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反向输出链表，三种方式：</span></span><br><span class="line"><span class="comment">     * 方法一：先反转链表，再输出链表，需要链表遍历两次。</span></span><br><span class="line"><span class="comment">     * 方法二：把链表中的数字放入栈中再输出，需要维护额外的栈空间</span></span><br><span class="line"><span class="comment">     * 方法三：依据方法二中栈的思想，通过递归来实现，递归起始就是将先执行的数据压入栈中，再一次出栈。</span></span><br><span class="line"><span class="comment">     * @param node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reservePrt(ListNode node) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            reservePrt(node.<span class="keyword">next</span>);</span><br><span class="line">            System.out.<span class="keyword">print</span>(node.data + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找单链表的中间结点：</span></span><br><span class="line"><span class="comment">     * 方法一：先求出链表的长度，再遍历1/2链表长度，寻找出链表的中间结点</span></span><br><span class="line"><span class="comment">     * 方法二：用两个指针遍历链表，一个快指针，一个慢指针，</span></span><br><span class="line"><span class="comment">     * 快指针每次向前移动2个结点，慢指针一次向前移动一个结点；</span></span><br><span class="line"><span class="comment">     * 当快指针移动到链表的末尾，慢指针所在的位置即为中间结点所在的位置。</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findMiddleNode() &#123;</span><br><span class="line">        ListNode slowPoint = head;</span><br><span class="line">        ListNode quickPoint = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// quickPoint.next == null 是链表结点个数为奇数时，快指针已经走到最后</span></span><br><span class="line">        <span class="comment">// quickPoint.next.next == null 是链表结点数为偶数时，快指针已经走到倒数第二个结点</span></span><br><span class="line">        <span class="comment">// 链表结点个数为奇数时，返回的是中间结点；链表结点个数为偶数时，返回的是中间两个结点中的前一个</span></span><br><span class="line">        <span class="keyword">while</span> (quickPoint.<span class="keyword">next</span> != <span class="keyword">null</span> &amp;&amp; quickPoint.<span class="keyword">next</span>.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slowPoint = slowPoint.<span class="keyword">next</span>;</span><br><span class="line">            quickPoint = quickPoint.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断链表是否有环；</span></span><br><span class="line"><span class="comment">     * 设置快指针和慢指针，慢指针每次走一步，快指针每次走两步</span></span><br><span class="line"><span class="comment">     * 当快指针与慢指针相等时，就说明该链表有环</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isRinged() &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode slowNode = head;</span><br><span class="line">        ListNode quickNode = head;</span><br><span class="line">        <span class="keyword">while</span> (quickNode.<span class="keyword">next</span> != <span class="keyword">null</span> &amp;&amp; quickNode.<span class="keyword">next</span>.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slowNode = slowNode.<span class="keyword">next</span>;</span><br><span class="line">            quickNode = quickNode.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">if</span> (quickNode == slowNode) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个链表是否相交；</span></span><br><span class="line"><span class="comment">     * 两个链表相交，则他们的尾结点一定相同，比较两个链表的尾结点是否相同即可</span></span><br><span class="line"><span class="comment">     * @param head1</span></span><br><span class="line"><span class="comment">     * @param head2</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isCross(ListNode head1, ListNode head2) &#123;</span><br><span class="line">        ListNode temp1 = head1;</span><br><span class="line">        ListNode temp2 = head2;</span><br><span class="line">        <span class="keyword">while</span> (temp1.<span class="keyword">next</span> != <span class="keyword">null</span>) temp1 = temp1.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp2.<span class="keyword">next</span> != <span class="keyword">null</span>) temp2 = temp2.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (temp1 == temp2) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果两个链表相交，求链表相交的起始点；</span></span><br><span class="line"><span class="comment">     * 首先判断链表是否相交，如果两个链表不相交，则求相交起点没有意义</span></span><br><span class="line"><span class="comment">     * 求出两个链表长度之差，length = len1 - len2</span></span><br><span class="line"><span class="comment">     * 让较长的链表先走len步</span></span><br><span class="line"><span class="comment">     * 然后两个链表同步向前移动，每移动一次就比较他们的结点是否相等，第一个相等的结点即为他们的第一个相交点</span></span><br><span class="line"><span class="comment">     * @param listNodeOperation1</span></span><br><span class="line"><span class="comment">     * @param listNodeOperation2</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode findFirstCrossPoint(ListNodeOperation listNodeOperation1, ListNodeOperation listNodeOperation2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCross(listNodeOperation1.head,listNodeOperation2.head)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = listNodeOperation1.length();</span><br><span class="line">            <span class="keyword">int</span> len2 = listNodeOperation2.length();</span><br><span class="line">            ListNode cur1 = listNodeOperation1.head;</span><br><span class="line">            ListNode cur2 = listNodeOperation2.head;</span><br><span class="line">            <span class="keyword">int</span> length = len1 - len2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) cur1 = cur1.<span class="keyword">next</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) cur2 = cur2.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.<span class="keyword">next</span>;</span><br><span class="line">                cur2 = cur2.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链表的各种操作&quot;&gt;&lt;a href=&quot;#链表的各种操作&quot; class=&quot;headerlink&quot; title=&quot;链表的各种操作&quot;&gt;&lt;/a&gt;链表的各种操作&lt;/h3&gt;&lt;p&gt;概念：一种重要的数据结构，储存带院是不连续的，每个结点由两部分组成：&lt;br&gt;储存的数值+前序结点和后序结点的指针，既有前序结点和指针又有后序结点的指针的链表称为双向链表，&lt;br&gt;只包含后序指针的链表为单链表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字</title>
    <link href="http://yoursite.com/2020/09/24/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/09/24/旋转数组的最小数字/</id>
    <published>2020-09-24T06:59:56.751Z</published>
    <updated>2020-09-24T11:19:43.355Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组[3,4,5,1,2]为[1,2,3,4,5]的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 </p><a id="more"></a><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入一个非递减排序的数组的一个旋转，所有元素都大于0</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出改旋转数组的最小元素，若数组大小为0，返回0。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>二分查找</strong></p><p>二分查找不仅仅只适用于在有序数组上，如果能够明确二分之后，答案存在于二分的某一侧，就可以使用二分。</p><p>这种二分查找的难点就难在，<code>arr[mid]</code>跟谁进行比较。</p><p>我们的目的是：当进行一次比较的时候，一定能够确定答案就在mid的某一侧，一次比较为<code>arr[mid]</code>跟谁比的问题。</p><p>一般的比较原则是：</p><ul><li>如果有目标值target，那么直接让<code>arr[mid]</code>和target比较即可。</li><li>如果没有目标值，一般可以考虑<strong>端点</strong></li></ul><p>这里我们把target看作是右端点，来进行分析，那就要分析以下三种情况，看是否可以达到上述目标。</p><ol><li><p>情况1，<code>arr[mid] &gt; target: 4 5 6 1 2 3</code></p><ul><li><code>arr[mid] = 6</code>，右端点为3，<code>arr[mid] &gt; target</code>，说明<code>[first ... mid]</code>都是 &gt;= <code>target</code>的，因为原始数组是非递减的，所以可以确定答案为<code>[mid+1 .. last]</code>之间，所以<code>first = mid + 1</code></li></ul></li><li><p>情况2，<code>arr[mid] &lt; target: 5 6 1 2 3 4</code></p><ul><li><code>arr[mid] = 1</code>，<code>target</code>为右端点4，<code>arr[mid] &lt; target</code>，说明答案肯定不在<code>[mid+1 ... last]</code>，但是<code>arr[mid]</code>有可能是答案，所以答案在<code>[first,mid]</code>区间，所以<code>last = mid</code>；</li></ul></li><li><p>情况3，<code>arr[mid] == target</code>:</p><ul><li><p>如果是1 0 1 1 1，<code>arr[mid] = target = 1</code>，答案在左边</p></li><li><p>如果是1 1 1 0 1，<code>arr[mid] = target = 1</code>，答案在右边</p><p>所以这种情况，不能确定答案在左边还是右边，那么就让<code>last = last - 1</code>，慢慢的缩小区间，同时也不会错过答案。</p></li></ul></li></ol><hr><p>举个栗子：</p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/one.png" alt></div></p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/two.png" alt></div></p><p><div align="center"><img src="/2020/09/24/旋转数组的最小数字/three.png" alt></div></p><hr><p>python3(3.5.2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        lenArray = len(rotateArray)</span><br><span class="line">        <span class="keyword">if</span> lenArray == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            first = <span class="number">0</span></span><br><span class="line">            last = lenArray<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> first &lt; last:</span><br><span class="line">                mid = int((first + last) / <span class="number">2</span> <span class="keyword">if</span> (first + last) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> (first + last - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> (rotateArray[mid] &gt; rotateArray[last]):</span><br><span class="line">                    first = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> (rotateArray[mid] &lt; rotateArray[last]):</span><br><span class="line">                    last = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    last -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rotateArray[first]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组[3,4,5,1,2]为[1,2,3,4,5]的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="剑指Offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>xxx.github.io 拒绝访问</title>
    <link href="http://yoursite.com/2020/09/24/xxx-github-io-%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2020/09/24/xxx-github-io-拒绝访问/</id>
    <published>2020-09-24T02:14:01.185Z</published>
    <updated>2020-09-24T04:03:29.692Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>hexo 搭建个人博客中<code>hexo s -g</code>能在本地<code>localhost:4000</code>看到生成的博客页面，但是<code>hexo d -g</code>之后出现</p><p><code>xxxx.github.io</code>拒绝了我们的请求，无法访问此网站</p><a id="more"></a><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/one.png" alt="拒绝访问"></div></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在本地dos先<code>ping</code>一下个人博客地址，</p><p>若<code>loss = 0%</code>时，很可能就是出现了访问被服务端拦截，也就是被墙了。</p><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/two.png" alt="ping xxx.github.io"></div></p><p>此时只需要<a href="https://jingyan.baidu.com/article/b87fe19e4e1faf5218356839.html" target="_blank" rel="noopener">修改一下本地DNS</a>就为<code>114.114.114.114</code>就可以了。</p><p><div align="center"><img src="/2020/09/24/xxx-github-io-拒绝访问/three.png" alt="修改本地DNS"></div></p><p>若<code>loss = 100%</code>就是博客部署有问题，检查与github仓库是否连接，查看ssh密钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;hexo 搭建个人博客中&lt;code&gt;hexo s -g&lt;/code&gt;能在本地&lt;code&gt;localhost:4000&lt;/code&gt;看到生成的博客页面，但是&lt;code&gt;hexo d -g&lt;/code&gt;之后出现&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xxxx.github.io&lt;/code&gt;拒绝了我们的请求，无法访问此网站&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>考研这一路上</title>
    <link href="http://yoursite.com/2019/12/24/%E8%80%83%E7%A0%94%E8%BF%99%E4%B8%80%E8%B7%AF%E4%B8%8A/"/>
    <id>http://yoursite.com/2019/12/24/考研这一路上/</id>
    <published>2019-12-24T02:23:18.656Z</published>
    <updated>2020-09-24T03:20:31.640Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>阈值分割</title>
    <link href="http://yoursite.com/2019/08/23/%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2/"/>
    <id>http://yoursite.com/2019/08/23/阈值分割/</id>
    <published>2019-08-23T05:20:32.378Z</published>
    <updated>2019-03-09T08:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="otsu阈值分割算法及其改进"><a href="#otsu阈值分割算法及其改进" class="headerlink" title="otsu阈值分割算法及其改进"></a>otsu阈值分割算法及其改进</h2><h3 id="一、阈值分割简介"><a href="#一、阈值分割简介" class="headerlink" title="一、阈值分割简介"></a>一、阈值分割简介</h3><p>阈值分隔是一种区域分割技术，它适用于物体与背景有较强对比的景物分割。它计算简单，而且总能用封闭而且连通的边界定义不交叠的区域。当使用阈值规则进行图像分割时，所有灰度值大于或等于某阈值的像素都被判属于物体。 一维Otsu算法有计算简洁、稳定、自适应强等优点，被广泛用于图像分割中。但一维Otsu算法没有考虑图像像素点之间的关系，当图像中有噪声时，会导致分割的效果不理想。因此，刘健庄等人在1993年提出了二维的Otsu算法，提升了算法的抗噪声能力。</p><a id="more"></a><h3 id="二、算法思想及其过程："><a href="#二、算法思想及其过程：" class="headerlink" title="二、算法思想及其过程："></a>二、算法思想及其过程：</h3><blockquote><p>1、统计灰度级中每个像素在整幅图像中的个数。<br>2、计算每个像素在整幅图像的概率分布。<br>3、对灰度级进行遍历搜索，计算当前灰度值下前景背景类间概率。<br>4、通过目标函数计算出类内与类间方差下对应的阈值。</p></blockquote><p>由上述Ostu的基本原理得知，经典的OTSU算法能够很好的分割图像中直方图波峰和波谷不明显的图像，但计算量比较大，即遍历整个图像X的灰度值，并计算每个灰度值的类间方差，然后找出其中最大值，才最终得到最佳阈值，当图像X的尺寸增加时，该算法的计算量急剧增加，效率不高。下面来介绍一种改进的Ostu算法，即二维的Ostu算法。</p><h3 id="三、二维Otsu算法"><a href="#三、二维Otsu算法" class="headerlink" title="三、二维Otsu算法"></a>三、二维Otsu算法</h3><p>同时考虑像素的灰度值分布和它们邻域像素的平均灰度值分布，因此形成的阈值是一个二维矢量，最佳的阈值在一个二维的测度准则下确定最大值时得到。</p><p>（1）设图像I(x,y),的灰度级为L级，那么图像的邻域平均灰度也分为L级。<br>（2）设f(x,y)为像素点(x,y)的灰度值，g(x,y)为像素点(x,y)为中心的K*K的像素点集合的灰度平均值。令f(x,y)=i,g(x,y)=j，然后就形成了一个二元组(i,j)。<br>（3）设二元组（i,j）出现的次数为fij，然后求出二元组对应的概率密度Pij，Pij=fij/N, i,j=1,2，…，L，其中N为图像像素点总数。<br>（4）任意选取一个阈值向量(s,t)选取的阈值向量将图像的二维直方图划分为4个区域，B、C区域代表图像的前景和背景，A、D区域代表噪声点。<br>（5）设C、B两个区域对应的概率分别为w1，w2，对应的均值矢量为u1，u2。整个图片所对应的均值矢量为uT。</p><p><div align="center"><img src="/2019/08/23/阈值分割/one.png" alt title="二维Otsu算法"></div></p><h3 id="四、基于模拟退火的Otsu阈值分割算法"><a href="#四、基于模拟退火的Otsu阈值分割算法" class="headerlink" title="四、基于模拟退火的Otsu阈值分割算法"></a>四、基于模拟退火的Otsu阈值分割算法</h3><h4 id="4-1、模拟退火算法的原理"><a href="#4-1、模拟退火算法的原理" class="headerlink" title="4.1、模拟退火算法的原理"></a>4.1、模拟退火算法的原理</h4><p>模拟退火算法本质上也是一种贪心算法，在每一次迭代时总体上都选择一个当前最优解，但在它搜索的过程中引入了适当的随机因素，能够以一定的概率接受一个恶化解，因而能跳出局部最优的陷阱，求的全局最优解。<br>假设f(x)为优化函数，g(x)为状态产生函数，R为可行解空间，模拟退火的基本描述如下，<br>1、任选一初始状态，计算其目标函数值f(x)，并选择初始控制温度，T0和markov链的长度；<br>2、在R中产生一个随机扰动，令x1=g(x)，计算其目标函数值f(x1)；<br>3、根据状态接受函数判断是否接受，如果f(x1) &lt; f(x0)，则接受新状态x1为当前状态否则按Metropolis准则判决是否接受x1，若接受，则令当前状态等于x1，若不接受，则令当前状态等于x0；<br>4、根据某个收敛准则，判断抽样过程是否终止，是则转5，否则转2；<br>5、按照某个温度冷却方案降低控制温度T；<br>6、根据某个收敛准则，判断模拟退火过程是否终止，是则转7，否则转2；<br>7、当前解作为最优解输出。</p><h4 id="4-2、模拟退火优化的图像和阈值分割算法"><a href="#4-2、模拟退火优化的图像和阈值分割算法" class="headerlink" title="4.2、模拟退火优化的图像和阈值分割算法"></a>4.2、模拟退火优化的图像和阈值分割算法</h4><p>算法的<strong>基本思想</strong>是：以模拟退火智能算法代替原OTSU算法的穷举运算，在解空间中跳跃的搜索图像分割的最佳阈值，减少传统算法的运算量，在获得较好的图像分割效果的基础上，提高算法的效率，Otsu-Sa算法首先绘制图像的直方图，并计算图像像素的灰度均值及累加概率，调用模拟退火算法计算最佳阈值。<br>Ostu-Sa算法的具体描述如下：<br>算法名称：Otsu-Sa<br>输入：原始图像<br>输出：二值化分割图像</p><h4 id="4-2-算法步骤"><a href="#4-2-算法步骤" class="headerlink" title="4.2 算法步骤"></a>4.2 算法步骤</h4><blockquote><p>一：绘制图像的直方图；<br>二：计算图像的灰度总均值；<br>三：计算前i个像素的灰度均值；<br>四：计算像素的累加概率；<br>五：选择优化函数，调用模拟退火算法Sa，计算最佳阈值；<br>六：以步骤五返回的最佳阈值对图像进行二值化分割；</p></blockquote><h3 id="五、处理结果"><a href="#五、处理结果" class="headerlink" title="五、处理结果"></a>五、处理结果</h3><h4 id="GUI导入图片后界面"><a href="#GUI导入图片后界面" class="headerlink" title=" GUI导入图片后界面 "></a><strong> GUI导入图片后界面 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo1.png" alt title="导入图片"></div></p></blockquote><h4 id="Otsu算法结果"><a href="#Otsu算法结果" class="headerlink" title=" Otsu算法结果 "></a><strong> Otsu算法结果 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo2.png" alt title="Otsu阈值分割"></div></p></blockquote><h4 id="二维Otsu算法结果"><a href="#二维Otsu算法结果" class="headerlink" title=" 二维Otsu算法结果 "></a><strong> 二维Otsu算法结果 </strong></h4><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo3.png" alt="二维Otsu算法灰度直方图" title="二维Otsu算法灰度直方图"></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/阈值分割/jieguo4.png" alt="二维Otsu算法结果对比" title="二维Otsu算法结果对比"></div></p></blockquote><h3 id="六、所有代码及文件"><a href="#六、所有代码及文件" class="headerlink" title="六、所有代码及文件"></a>六、所有代码及文件</h3><p><a href="https://github.com/YiMoFan/Otsu" title="阈值分割" target="_blank" rel="noopener"><strong> 阈值分割 </strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;otsu阈值分割算法及其改进&quot;&gt;&lt;a href=&quot;#otsu阈值分割算法及其改进&quot; class=&quot;headerlink&quot; title=&quot;otsu阈值分割算法及其改进&quot;&gt;&lt;/a&gt;otsu阈值分割算法及其改进&lt;/h2&gt;&lt;h3 id=&quot;一、阈值分割简介&quot;&gt;&lt;a href=&quot;#一、阈值分割简介&quot; class=&quot;headerlink&quot; title=&quot;一、阈值分割简介&quot;&gt;&lt;/a&gt;一、阈值分割简介&lt;/h3&gt;&lt;p&gt;阈值分隔是一种区域分割技术，它适用于物体与背景有较强对比的景物分割。它计算简单，而且总能用封闭而且连通的边界定义不交叠的区域。当使用阈值规则进行图像分割时，所有灰度值大于或等于某阈值的像素都被判属于物体。 一维Otsu算法有计算简洁、稳定、自适应强等优点，被广泛用于图像分割中。但一维Otsu算法没有考虑图像像素点之间的关系，当图像中有噪声时，会导致分割的效果不理想。因此，刘健庄等人在1993年提出了二维的Otsu算法，提升了算法的抗噪声能力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>母牛的故事</title>
    <link href="http://yoursite.com/2019/08/23/%E6%AF%8D%E7%89%9B%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2019/08/23/母牛的故事/</id>
    <published>2019-08-23T05:20:32.376Z</published>
    <updated>2020-09-24T07:05:42.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，<br>每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，<br>n的含义如题目中描述。n=0表示输入数据的结束，不做处理。</p></blockquote><a id="more"></a><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>对于每个测试实例，输出在第n年的时候母牛的数量。<br>每个输出占一行。</p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote><p>2<br>4<br>5<br>0</p></blockquote><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote><p>2<br>4<br>6</p></blockquote><p>将每一年的牛数分为母牛数和小牛数，然后分别列举出前五年的母牛数和小牛数</p><table><thead><tr><th style="text-align:center">年份</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">母牛数</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">小牛数</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">3</td></tr></tbody></table><p>小牛每四年变为母牛，则第五年之后的每一年的母牛数就为前一年的母牛数加上第前三年的母牛数<br>（不是小牛数是因为这个时候的小牛数包括这一年的母牛数和前几年的母牛数，而这一年产生的小牛数就等于这一年的母牛数）,<br>a为母牛，b为小牛。则<code>a[i] = a[i-1]+a[i-3]</code><br>第五年之后的小牛数就为该年的母牛数前面算的为<code>a[i-1]+a[i-3]</code>加上前一年的小牛数<code>b[i-1]</code>在减去这一年从小牛变为母牛的数量<code>a[i-3]</code>。<br>所以<code>b[i] = a[i-1]+a[i-3]+b[i-1]-a[i-3] = a[i-1]+b[i-1]</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">10000</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[<span class="number">10000</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">3</span>) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[n<span class="number">-1</span>]+b[n<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; n; ++i) &#123;</span><br><span class="line">a[i] = a[i<span class="number">-1</span>] + a[i<span class="number">-3</span>];</span><br><span class="line">b[i] = b[i<span class="number">-1</span>] + a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,a[n<span class="number">-1</span>] + b[n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，&lt;br&gt;每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&amp;lt;n&amp;lt;55)，&lt;br&gt;n的含义如题目中描述。n=0表示输入数据的结束，不做处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="递推" scheme="http://yoursite.com/tags/%E9%80%92%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>数学建模国赛</title>
    <link href="http://yoursite.com/2019/08/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%9B%BD%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/08/23/数学建模国赛/</id>
    <published>2019-08-23T05:20:32.372Z</published>
    <updated>2019-08-30T09:12:19.306Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
      <category term="数学建模" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理</title>
    <link href="http://yoursite.com/2019/08/23/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/23/数字图像处理/</id>
    <published>2019-08-23T05:20:32.369Z</published>
    <updated>2020-09-24T04:03:11.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字图像处理基础"><a href="#数字图像处理基础" class="headerlink" title="数字图像处理基础"></a>数字图像处理基础</h2><p>首先是读取图片文件<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clc;<span class="built_in">close</span>;</span><br><span class="line"><span class="built_in">clear</span> all;</span><br><span class="line"></span><br><span class="line">num_I = imread(<span class="string">'pathname'</span>);</span><br><span class="line">imfinfo =(<span class="string">'pathname'</span>)  % 输出图像的基本信息</span><br></pre></td></tr></table></figure></p><p>其中pathname为路径名，最好为绝对路径，如果为相对路径必须让matlab的工作路径与图片路径一致。</p><a id="more"></a><p>然后就会的得到图像的图像矩阵，格式为uint8<br>如果为rgb图像就会是一个三维的矩阵，灰度图就是一个一维的图像矩阵。<br>所以只需要对图像的数字矩阵处理。</p><p>比如简单的将图像分割为四个部分</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">clc;close;</span><br><span class="line">clear all;</span><br><span class="line">num = imread(<span class="string">'cameraman.tif'</span>);</span><br><span class="line">[row,col] = <span class="built_in">size</span>(num);  <span class="comment">% 提取矩阵的行和列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span>:<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> jj = <span class="number">1</span>:<span class="number">2</span></span><br><span class="line">        <span class="comment">% 将图片分割成四部分组成一个元胞数组</span></span><br><span class="line">        image&#123;ii,jj&#125;=num((ii<span class="number">-1</span>)*col/<span class="number">2</span>+<span class="number">1</span>:ii*col/<span class="number">2</span>,(jj<span class="number">-1</span>)*col/<span class="number">2</span>+<span class="number">1</span>:jj*col/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(image&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(image&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(image&#123;<span class="number">2</span>,<span class="number">1</span>&#125;);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(image&#123;<span class="number">2</span>,<span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure><p>基本的方法就是将原图像矩阵分割成相同大小的四个子矩阵。</p><p>还有图像的加减乘除运算：<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Z</span>=imadd(<span class="keyword">X</span>,<span class="keyword">Y</span>);  %图像的加运算，<span class="keyword">X</span>,<span class="keyword">Y</span>是输入的两幅图像，其中一个可以是常数</span><br><span class="line"><span class="keyword">Z</span>=imsubtract(<span class="keyword">X</span>,<span class="keyword">Y</span>);  %图像的减运算，<span class="keyword">Y</span>可以是常数</span><br><span class="line"><span class="keyword">Z</span>=immiltiply(<span class="keyword">X</span>,y);  %图像的乘运算，<span class="keyword">Y</span>也可以是常数</span><br><span class="line"><span class="keyword">Z</span>=imdivide(<span class="keyword">X</span>,y);  %图像的除运算，<span class="keyword">Y</span>也可以是常数</span><br></pre></td></tr></table></figure></p><p>图像的输出为：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imshow(<span class="built_in">image</span>);  % <span class="built_in">image</span> 为图像矩阵</span><br></pre></td></tr></table></figure></p><p>然后就是图像类型格式转换的一些函数，主要的作用就是改变图像的格式，可以对图像矩阵进行处理。</p><p>常用的有：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I=rgb2gray(RGB)%将一副灰度图转换为真彩色图</span><br><span class="line">[X,map]=rgb2ind(RGB,n)%将RGB图转换为索引色图</span><br><span class="line">BW=im2bw(I,level)%将真彩色图或灰度图转换为二值图，level为阈值</span><br></pre></td></tr></table></figure></p><p>因为现阶段的图像处理一般都是对灰度图像的处理，所以一般都会用到<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image</span> = rgb2gray(I)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>然后统计图像的灰度值的分布称为直方图<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imhist<span class="comment">(img)</span>; <span class="meta">%</span> img 为矩阵图像的灰度值</span><br></pre></td></tr></table></figure></p><p>二值化图像就是图像矩阵中只有0和1两个元素，称为逻辑矩阵。<br>将一个图片转换为二值化图片的过程为图像二值化，确定阈值的方法为阈值分割。</p><p>介绍一种常用的方法为：<strong>otsu阈值分割算法</strong></p><blockquote><p>对图像I(x,y)，前景和背景的分割阈值记作T，<br>前景像素点数占整幅图像的比例为ω0，其平均灰度μ0；<br>背景像素点数占整幅图像的比例为ω1，其平均灰度μ1；<br>图像的总平均灰度记为μ=ω0∗μ0 +ω1∗μ1；<br>类间方差记为g。<br>假设：<br>背景较暗，且图像的大小为M×N，<br>图像中，<br>像素灰度值小于阈值T的像素个数记作N0，<br>像素灰度值大于阈值T的像素个数记作N1，<br>则有：</p></blockquote><p>　　　　　　ω0 = N0 / M×N ；      (1)</p><p>　　　　　　ω1 = N1 / M×N ；      (2)</p><p>　　　　　　N0 + N1 = M×N ；       (3)</p><p>　　　　　　ω0+ω1=1；           (4)</p><p>　　　　　　μ=ω0<em>μ0+ω1</em>μ1；  (5)</p><p>　　　　　　g =ω0(μ0-μ)^2+ω1(μ1-μ)^2；(6)</p><blockquote><p>将式(5)代入式(6),得到等价公式:</p></blockquote><p>　　　　　　g=ω0<em>ω1</em>(μ0-μ1)^2; 　(7)　这就是类间方差</p><blockquote><p>采用遍历的方法得到使类间方差g最大的阈值T,即为所求。</p></blockquote><p>在matlab中有一个函数可以直接运行：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I = imread('chepai.jpg')<span class="comment">;</span></span><br><span class="line">I = rgb2gray(<span class="name">I</span>)<span class="comment">;</span></span><br><span class="line">T2 = graythresh(<span class="name">I</span>)<span class="comment">;</span></span><br><span class="line">num2 = im2bw(<span class="name">I</span>,T2)<span class="comment">;</span></span><br><span class="line">imshow(<span class="name">num2</span>)</span><br></pre></td></tr></table></figure></p><h2 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h2><blockquote><p>1、数学建模的重要性，能参加的最好参加一下，涉及的知识面很广，提高眼界。<br>2、队友，不一定非要求理学院，计算机学院，经济学院<br>3、心态很重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数字图像处理基础&quot;&gt;&lt;a href=&quot;#数字图像处理基础&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理基础&quot;&gt;&lt;/a&gt;数字图像处理基础&lt;/h2&gt;&lt;p&gt;首先是读取图片文件&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clc;&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;clear&lt;/span&gt; all;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num_I = imread(&lt;span class=&quot;string&quot;&gt;&#39;pathname&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imfinfo =(&lt;span class=&quot;string&quot;&gt;&#39;pathname&#39;&lt;/span&gt;)  % 输出图像的基本信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中pathname为路径名，最好为绝对路径，如果为相对路径必须让matlab的工作路径与图片路径一致。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数字图像处理" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>我的简历</title>
    <link href="http://yoursite.com/2019/08/23/MyResume/"/>
    <id>http://yoursite.com/2019/08/23/MyResume/</id>
    <published>2019-08-23T05:20:32.365Z</published>
    <updated>2020-09-24T06:27:40.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyResume"><a href="#MyResume" class="headerlink" title="MyResume"></a>MyResume</h1><hr><h2 id="胥帆"><a href="#胥帆" class="headerlink" title="胥帆"></a>胥帆</h2><blockquote><p><strong>基本信息</strong>：<br>性别：男<br>出生年月：1999.05.01<br>学历：本科<br>专业：通信工程<br>Email: <a href="mailto:ctgu_xufan@foxmail.com" target="_blank" rel="noopener">ctgu_xufan@foxmail.com</a><br>个人博客：<a href="https://yimofan.github.io" target="_blank" rel="noopener">https://yimofan.github.io</a><br><a id="more"></a></p></blockquote><blockquote><ul><li>工科男一枚，程序员一只。</li><li>喜欢学习各种技术，热爱科研及编程。</li><li>热爱生活，积极进取。</li><li>性格随和，宽容大方。</li></ul></blockquote><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><table><thead><tr><th style="text-align:left">三峡大学</th><th style="text-align:left">专业：通信工程</th><th style="text-align:left">2016.9-2020.6 宜昌</th></tr></thead><tbody><tr><td style="text-align:left"><strong>平均成绩：89.05</strong></td><td style="text-align:left"><strong>专业排名：3/66</strong></td><td style="text-align:left"><strong>GPA：3.416/4.0</strong></td></tr></tbody></table><div align="center"></div><div style="float:left"></div><div style="float:right"></div><div style="float:left"></div><div align="center"></div><div style="float:right"></div><p><strong>论文发表</strong>：<a href="https://ieeexplore.ieee.org/document/8950159" target="_blank" rel="noopener">Z. Cai, Z. Xiong, K. Wan, Y. Xu and F. Xu, “A Node Selecting Approach for Traffic Network Based on Artificial Slime Mold,” in IEEE Access, vol. 8, pp. 8436-8448, 2020.</a> </p><h2 id="奖学金及学习情况"><a href="#奖学金及学习情况" class="headerlink" title="奖学金及学习情况"></a>奖学金及学习情况</h2><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">奖学金</th><th style="text-align:center">班级成绩排名</th><th style="text-align:center">年级成绩排名</th><th style="text-align:center">综测排名</th></tr></thead><tbody><tr><td style="text-align:center">2016-2017</td><td style="text-align:center">国家励志奖学金校二等奖学金</td><td style="text-align:center">1/36</td><td style="text-align:center">5/131</td><td style="text-align:center">5/131</td></tr><tr><td style="text-align:center">2017-2018</td><td style="text-align:center">国家励志奖学金校一等奖</td><td style="text-align:center">1/37</td><td style="text-align:center">3/66</td><td style="text-align:center">2/66</td></tr><tr><td style="text-align:center">2018-2019</td><td style="text-align:center">国家励志奖学金校二等奖</td><td style="text-align:center">2/37</td><td style="text-align:center">5/66</td><td style="text-align:center">5/66</td></tr><tr><td style="text-align:center">2019-2020</td><td style="text-align:center">国家励志奖学金校一等奖</td><td style="text-align:center">1/37</td><td style="text-align:center">3/66</td><td style="text-align:center">3/66</td></tr></tbody></table><h2 id="学科竞赛"><a href="#学科竞赛" class="headerlink" title="学科竞赛"></a>学科竞赛</h2><h4 id="国家级竞赛"><a href="#国家级竞赛" class="headerlink" title="国家级竞赛"></a>国家级竞赛</h4><ul><li>2019年美国大学生数学建模国家一等奖（Escape From the Louver）</li><li>2018年全国大学生电工数学建模竞赛国家一等奖（海南省主要城市房价的分析与预测）</li><li>2019年全国大学生电工数学建模竞赛国家二等奖（停车场车位的排布与规划）</li></ul><h4 id="省部级竞赛"><a href="#省部级竞赛" class="headerlink" title="省部级竞赛"></a>省部级竞赛</h4><ul><li>2017年高教杯全国大学生数学建模竞赛省二等奖（CT系统参数标定及成像）</li><li>2019年第十届湖北省蓝桥杯C/C++组二等奖</li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><ul><li><strong>去雾算法gui</strong>：<a href="https://github.com/YiMoFan/diqilun_gui" target="_blank" rel="noopener">去雾算法</a></li><li><strong>2018年国赛程序</strong>：<a href="https://github.com/YiMoFan/2018guosai" target="_blank" rel="noopener">国赛程序</a></li><li><strong>hexo搭建的个人博客</strong>：<a href="https://github.com/YiMoFan/YiMoFan.github.io" target="_blank" rel="noopener">个人博客</a></li><li><strong>蓝桥杯训练</strong>：<a href="https://github.com/YiMoFan/lanqiaobeixunlian" target="_blank" rel="noopener">蓝桥杯训练</a></li><li><strong>图像处理阈值分割</strong>：<a href="https://github.com/YiMoFan/Otsu" target="_blank" rel="noopener">阈值分割</a></li></ul><h2 id="资格证书"><a href="#资格证书" class="headerlink" title="资格证书"></a>资格证书</h2><blockquote><p> 1、通过了CET-4考试，具有较好的英文阅读能力，能阅读英文技术书籍和文档，能进行基本的口语交流。<br>2、计算机三级网络技术，具有一定计算机运行能力和知识。</p></blockquote><h2 id="担任职务"><a href="#担任职务" class="headerlink" title="担任职务"></a>担任职务</h2><blockquote><h3 id="启明星创新实验室软件组组长"><a href="#启明星创新实验室软件组组长" class="headerlink" title="启明星创新实验室软件组组长"></a><a href="https://baike.baidu.com/item/%E4%B8%89%E5%B3%A1%E5%A4%A7%E5%AD%A6%E5%90%AF%E6%98%8E%E6%98%9F%E5%88%9B%E6%96%B0%E5%AE%9E%E9%AA%8C%E5%AE%A4/18559411?fr=aladdin" target="_blank" rel="noopener">启明星创新实验室</a>软件组组长</h3><blockquote><p><strong>单位</strong>：<a href="https://www.ctguqmx.com/" target="_blank" rel="noopener">三峡大学计算机与信息学院启明星创新实验室</a><br><strong>时间</strong>：2017-2018<br><strong>职责</strong>：负责管理启明星工作室软件组的各项事务，包括规章制度的制定，人员招新管理，每周总结的例会及每周签到的监督，承接各老师给予的各项项目的制作等工作。<br><strong>收获</strong>：使自己在管理及与人交流方面的能力得到较高的提升，学会对自己进行自我控制，学会了每周对自己的学习成果进行总结，同时提升了自己的眼界，了解到许多在计算机软件方面的知识和结识了很多的大佬。</p></blockquote><h3 id="数学建模助理教练"><a href="#数学建模助理教练" class="headerlink" title="数学建模助理教练"></a>数学建模助理教练</h3><blockquote><p><strong>单位</strong>：三峡大学理学院<br><strong>时间</strong>：2018.3-2019.3<br><strong>职责</strong>：负责管理参加数学建模国赛队伍的培训，讲座及讲评论文。协助教练老师组安排数学建模国赛期间的各队伍的机位，后勤工作。<br><strong>收获</strong>：在教别人数学建模的知识的同时也巩固了自己所学到的数学建模的知识，在编程方面能够更加熟练的掌握各个算法的思路，在改卷的过程中也能评判出好文章的好处和差文章的不足，方便自己在以后比赛的过程中为文章添加更多的亮点。</p></blockquote></blockquote><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ol><li>具有较强的数学功底和数学分析能力，高等数学（上：99  下：93）和数值分析（99）都取得了较高的成绩， 参加了各类数学建模大型赛事幵都取得了成绩，之后还担仸了一年的数学建模助理教练，加强了自身的数学思 维和编程能力。熟悉数学建模中数学公式的建立和分析以及求解。 </li><li>本科阶段动手能力和编程能力较强，对各种技术和科研充满热情，做过部分的图像处理方面的研究，包括otsu 阈值分割算法及其的改进（课设：95 分），图像去雾算法的研究及程序的实现，看过何凯文的Guided Image Filtering及程序的实现</li><li>大学期间一直在启明星创新实验室中学习，在其严格的规章制度下每周都会参加算法竞赛幵举行周例会做周总 结，还自主通过hexo和github搭建了个人博客幵把自己所学知识进行更博。 </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MyResume&quot;&gt;&lt;a href=&quot;#MyResume&quot; class=&quot;headerlink&quot; title=&quot;MyResume&quot;&gt;&lt;/a&gt;MyResume&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;胥帆&quot;&gt;&lt;a href=&quot;#胥帆&quot; class=&quot;headerlink&quot; title=&quot;胥帆&quot;&gt;&lt;/a&gt;胥帆&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本信息&lt;/strong&gt;：&lt;br&gt;性别：男&lt;br&gt;出生年月：1999.05.01&lt;br&gt;学历：本科&lt;br&gt;专业：通信工程&lt;br&gt;Email: &lt;a href=&quot;mailto:ctgu_xufan@foxmail.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ctgu_xufan@foxmail.com&lt;/a&gt;&lt;br&gt;个人博客：&lt;a href=&quot;https://yimofan.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yimofan.github.io&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="简历" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>快速幂取模</title>
    <link href="http://yoursite.com/2019/08/23/%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/"/>
    <id>http://yoursite.com/2019/08/23/快速幂取模/</id>
    <published>2019-08-23T05:20:32.363Z</published>
    <updated>2020-09-24T07:04:01.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速幂取模"><a href="#快速幂取模" class="headerlink" title="快速幂取模"></a>快速幂取模</h2><p>我们先从简单的例子入手：求a^b mod c = 几。</p><a id="more"></a><p>算法1.首先直接地来设计这个算法：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">ans</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">1</span>;<span class="built_in">i</span>&lt;=b;<span class="built_in">i</span>++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> * a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> <span class="comment">% c;</span></span><br></pre></td></tr></table></figure></p><p>这个算法的时间复杂度体现在for循环中，为O（b）.这个算法存在着明显的问题，如果a和b过大，很容易就会溢出。</p><p>那么，我们先来看看第一个改进方案：在讲这个方案之前，要先有这样一个公式：</p><p>a^b mod c = (a mod c)^b mod c</p><p><img src="/2019/08/23/快速幂取模/one.png" alt></p><p>上面公式为下面公式的引理，即积的取余等于取余的积的取余。</p><p><img src="/2019/08/23/快速幂取模/two.png" alt></p><p>证明了以上的公式以后，我们可以先让a关于c取余，这样可以大大减少a的大小，</p><p>于是不用思考的进行了改进：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">ans</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = a <span class="comment">% c; //加上这一句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">1</span>;<span class="built_in">i</span>&lt;=b;<span class="built_in">i</span>++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> * a <span class="comment">% c;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">ans</span> <span class="comment">% c;</span></span><br></pre></td></tr></table></figure></p><p>这个算法在时间复杂度上没有改进，仍为O(b)，不过已经好很多的，但是在c过大的条件下，还是很有可能超时，所以，我们推出以下的快速幂算法。</p><p>快速幂算法依赖于以下明显的公式，我就不证明了。</p><p><img src="/2019/08/23/快速幂取模/three.png" alt></p><p>有了上述两个公式后，我们可以得出以下的结论：</p><p>1.如果b是偶数，我们可以记k = a^2 mod c，那么求(k)^(b/2) mod c就可以了。</p><p>2.如果b是奇数，我们也可以记k = a^2 mod c，那么求((k)^(b/2) mod c × a ) mod c =((k)^(b/2) mod c * a) mod c 就可以了。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nt ans = <span class="number">1</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span> = a % c<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">if(b%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = (ans * a) mod c<span class="comment">; //如果是奇数，要多求一步，可以提前算到ans中</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">k</span> = (a*a) % c<span class="comment">; //我们取a2而不是a</span></span><br><span class="line"></span><br><span class="line">for(int i = <span class="number">1</span><span class="comment">;i&lt;=b/2;i++)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = (ans * k) % c<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ans</span> = ans % c<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到，我们把时间复杂度变成了O(b/2).当然，这样子治标不治本。但我们可以看到，当我们令k = (a * a) mod c时，状态已经发生了变化，我们所要求的最终结果即为(k)b/2 mod c而不是原来的ab mod c，所以我们发现这个过程是可以迭代下去的。当然，对于奇数的情形会多出一项a mod c，所以为了完成迭代，当b是奇数时，我们通过</p><p>ans = (ans * a) % c;来弥补多出来的这一项，此时剩余的部分就可以进行迭代了。</p><p>形如上式的迭代下去后，当b=0时，所有的因子都已经相乘，算法结束。于是便可以在O（log b）的时间内完成了。于是，有了最终的算法：快速幂算法。</p><p><div align="right">——–摘自百度文库</div></p><hr><p>当几个数连续乘最后取模时，可以将每个数字先取模，最后在取模，即%对于*具有结合律，但是如果当用来取模的数本身就很大，采取上述方法就不行了，这个时候可以借鉴快速幂取模的方法，来达到取模的效果，即<strong>当快速幂的数据范围超过long long时，可以通过快速幂中套快速乘的方法防止溢出</strong>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=(ans+a)%p;</span><br><span class="line">a=(a+a)%p;</span><br><span class="line">b=b&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Mode</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> base = a%p;</span><br><span class="line"><span class="keyword">while</span>(b) &#123;</span><br><span class="line"><span class="keyword">if</span> (b&amp;<span class="number">1</span>) ans=<span class="built_in">pow</span>(ans,base,p)%p;</span><br><span class="line">base =<span class="built_in">pow</span>(base,base,p)%p;</span><br><span class="line">b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;a,&amp;b,&amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Mode(a,b,p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速幂取模&quot;&gt;&lt;a href=&quot;#快速幂取模&quot; class=&quot;headerlink&quot; title=&quot;快速幂取模&quot;&gt;&lt;/a&gt;快速幂取模&lt;/h2&gt;&lt;p&gt;我们先从简单的例子入手：求a^b mod c = 几。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>买不到的数目</title>
    <link href="http://yoursite.com/2019/08/23/%E4%B9%B0%E4%B8%8D%E5%88%B0%E7%9A%84%E6%95%B0%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/08/23/买不到的数目/</id>
    <published>2019-08-23T05:20:32.360Z</published>
    <updated>2020-09-24T08:22:09.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。<br>小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买  10  颗糖。<br>你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。<br>本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>两个正整数，表示每种包装中糖的颗数(都不多于1000) </p></blockquote><a id="more"></a><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><blockquote><p>一个正整数，表示最大不能买到的糖数 </p></blockquote><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote><p>4  7 </p></blockquote><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote><p>17</p></blockquote><p><strong> 方法一 </strong><br>对于题中的两个数a和b，假设较小的为a，只需要确定从a开始的第一次出现a个连续的可以被a和b组合出来的数。<br>因为这个之后的每个数都可以是这些数加a或者加b得到的，然后在将这连续的数中的第一个数减一就可以的<br>得到最大的不能组合出来的数。举个例子：<br>4和7，第一次出现的连续4个可以被组合的数是18,19,20,21，则之后的22=18+4,23=19+4，，，。最大的就是18-1=17。</p><p><strong> 方法二 </strong><br>对于题中的数a和b，可以确定的是他们的最大公倍数之后的数肯定是能够被组合的，所以可以通过从最大的公<br>倍数依次减一判断能否组合，（判断的方法：先判断能否被a或者被b整数，若不能，减a，判断能否被b整数，若<br>不能，再减a，知道该数小于a）；</p><p><strong> 方法三 </strong><br><strong><em> 扩展欧几里得 </em></strong>： 自然数a,b互质,则不能表示成ax+by（x,y为非负整数）的最大整数是ab-a-b。<br>证明：</p><p>a或者b是1的情况下容易证明.<br>以下情况都是a&gt;1且b&gt;1的情况.<br>首先证明ab-a-b不能表示成ax+by<br>假设ab-a-b=ax+by,那么ab=am+bn (m,n都大于等于1)<br>左边是a的倍数,右边am是a的倍数,那么要求bn也要是a的倍数<br>b不是a的倍数,只能要求n是a的倍数,这样的话,bn=bn’a&gt;=ba<br>那么am=ab-bn所以am1矛盾.<br>接着证明ab-a-b+i能表示成ax+by(i&gt;0)<br>因为ab互质,最大公约数就是1,根据辗转相减的方法知ma+nb=1,<br>不妨假设m&gt;0,n1(m=0意味着nb=1不可能的),所以ab-a-b+i(ma+nb)=(im-1)a+(a+in-1)b<br>im-1&gt;0,现在只要证明a+in-1&gt;=0,因为ima+inb=i<br>如果,|in|&gt;ja其中j&gt;0,那么ima=i+|in|b&gt;jab,所以im&gt;jb<br>所以ima+inb=(im-jb)a-(|in|-ja)b=i,说明|in|&gt;ja时,我们就能调整im,in使得|in|</p><p>二程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (b == <span class="number">0</span> ? a:(gcd(b,a%b)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bei</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a*b/gcd(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = bei(a,b);</span><br><span class="line"><span class="keyword">int</span> temp = ans;</span><br><span class="line"><span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp % a == <span class="number">0</span> || temp % b == <span class="number">0</span>)</span><br><span class="line">temp = --ans;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">temp -= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fun(a,b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。&lt;br&gt;小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买  10  颗糖。&lt;br&gt;你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。&lt;br&gt;本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;两个正整数，表示每种包装中糖的颗数(都不多于1000) &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>DSB-SC通信系统的设计与实现</title>
    <link href="http://yoursite.com/2019/08/23/DSB-SC%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/23/DSB-SC通信系统的设计与实现/</id>
    <published>2019-08-23T05:20:32.357Z</published>
    <updated>2019-03-07T07:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DSB-SC通信系统的设计与实现"><a href="#DSB-SC通信系统的设计与实现" class="headerlink" title="DSB-SC通信系统的设计与实现"></a>DSB-SC通信系统的设计与实现</h2><h3 id="一、课程设计主要内容"><a href="#一、课程设计主要内容" class="headerlink" title="一、课程设计主要内容"></a>一、课程设计主要内容</h3><p>DSB-SC通信系统(含调制、加性信道、解调系统等单元)的设计与实现；（要 求：信源、载波、高斯白噪声等的参数自己设定；设计结果要有已调信号的时域波形、频谱、解调信号波形、频谱等）</p><a id="more"></a><h3 id="二、设计原理"><a href="#二、设计原理" class="headerlink" title="二、设计原理"></a>二、设计原理</h3><h4 id="2-1-调制"><a href="#2-1-调制" class="headerlink" title="2.1 调制"></a>2.1 调制</h4><p>调制在通信过程中起着极其重要的作用：无线电通信是通过空间辐射方式传输号的，调制过程可以将信号的频谱搬移到容易一电磁波形式辐射的较高频范围；此外，调制过程可以将不同的信号通过频谱搬移托付至不同频率的载波上，实现多路复用，不至于互相干扰。<br>设调制函数为f(t) ，载 波 函 数 为 cos(Wct)，则调制后的函数表达式为SDSB(t) = f(t)cosWct，<br>振幅调制是一种实用很广的连续波调制方式。调幅信号X(t)主要有调制信号和载波信号组成。调幅器原理如图1所示：</p><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/one.png" alt="调幅器原理框图" title="调幅器原理框图"><br>其中载波信号C(t)用于搭载有用信号，其频率较高。幅度调制信号含有有用信息，其频率比较低。</div></p><h4 id="2-2解调"><a href="#2-2解调" class="headerlink" title="2.2解调"></a>2.2解调</h4><p>相干解调就是将得到的调制后信号乘以载波函数， 然后通过低通滤波器， 就可以恢复出原始信号。 将原始信号做 fft 变换就可以得到其频率特性。其原理框图为：</p><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/two.png" alt="解调器原理框图" title="解调器原理框图"></div></p><h4 id="2-3频谱分析"><a href="#2-3频谱分析" class="headerlink" title="2.3频谱分析"></a>2.3频谱分析</h4><p>当制信号f(t)为确定信号时，已调信号的频谱为 SDSB = 1/2F(W-Wc)+1/2F(W+Wc)</p><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/three.png" alt="双边带调幅频谱图" title="双边带调幅频谱图"></div></p><h3 id="三、设计思路及程序代码"><a href="#三、设计思路及程序代码" class="headerlink" title="三、设计思路及程序代码"></a>三、设计思路及程序代码</h3><blockquote><p>1、设定该通信系统的各类参数。<br>2、设定调制信号并绘出调制信号的波形，计算出该调制信号的频谱并绘出频谱图，设定载波并画出载波波形和载波频谱图，然后将调制信号与载波相乘设定已调信号并画出已调信号的波形和频谱图。<br>3、设定信道噪声参数并画出噪声频谱，然后将噪声与已调信号相加画出信号中有噪声的信号波形和频谱，并根据该信号的频谱设定接收端理想的带通滤波器的参数画出该带通滤波器的传输函数。<br>4、将信道中的信号通过带通滤波器画出通过滤波器之后的接收波形及其频谱，然后将该波形进行相干解调，与本地载波相乘得到混频信号画出波形及其频谱。<br>5、设定混频之后的理想低通滤波器的参数并画出其传输函数波形，然后将混频信号通过低通滤波器得到接收信号画出信号波形及其频谱与调制信号进行比较。</p></blockquote><p><strong> 程序 </strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">close all;</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 系统参数设定</span></span><br><span class="line">a0 = <span class="number">1</span>;  <span class="comment">% 调制信号的幅度</span></span><br><span class="line">fw = <span class="number">50</span>;  <span class="comment">% 调制信号频率</span></span><br><span class="line">fc = <span class="number">100</span>;  <span class="comment">% 载波频率</span></span><br><span class="line">t0 = <span class="number">0.15</span>;  <span class="comment">% 信号时长</span></span><br><span class="line">snr = <span class="number">30</span>;  <span class="comment">% 解调器输入信噪比</span></span><br><span class="line">dt = (<span class="number">4</span>/fc)*<span class="number">0.001</span>;  <span class="comment">% 系统的时域采样间隔</span></span><br><span class="line">fs = <span class="number">1</span>/dt;  <span class="comment">% 系统采样频率</span></span><br><span class="line">df = <span class="number">0.2</span>;  <span class="comment">% 所需的频率分辨率</span></span><br><span class="line">t = <span class="number">0</span>:dt:t0;</span><br><span class="line">len = <span class="built_in">length</span>(t);</span><br><span class="line">snr_lin = <span class="number">10</span>^(snr/<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 调制信号波形及频谱</span></span><br><span class="line">mt = a0*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fw*t);  <span class="comment">% 调制信号</span></span><br><span class="line">[Mmt,m,df1,f] = T2F(mt,dt,df,fs);  <span class="comment">% 调制信号的频谱</span></span><br><span class="line">[Bw] = signalband(Mmt,df,t0);  <span class="comment">% 调制信号的等效带宽</span></span><br><span class="line">f_start = fc-Bw;</span><br><span class="line">f_cutoff = fc + Bw;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,mt,<span class="string">'r'</span>);  <span class="comment">% 调制信号的波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'调制信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(mt)*<span class="number">1.1</span> <span class="built_in">max</span>(mt)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(Mmt)),<span class="string">'r'</span>);  <span class="comment">% 调制信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);ylabel(<span class="string">'调制信号的频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fw <span class="number">2</span>*fw <span class="built_in">min</span>(<span class="built_in">abs</span>(Mmt)) <span class="built_in">max</span>(<span class="built_in">abs</span>(Mmt)*<span class="number">1.1</span>)]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">ct = <span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fc*t);  <span class="comment">% 载波</span></span><br><span class="line"><span class="built_in">plot</span>(t,ct,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'载波'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(ct)*<span class="number">1.1</span> <span class="built_in">max</span>(ct)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">[C,ct,df1,f] = T2F(ct,dt,df,fs);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(C)),<span class="string">'r'</span>)  <span class="comment">% 载波频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);ylabel(<span class="string">'载波频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(C)) <span class="built_in">max</span>(<span class="built_in">abs</span>(C))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">u = mt(<span class="number">1</span>:len).*ct(<span class="number">1</span>:len);</span><br><span class="line"><span class="built_in">plot</span>(t,u,<span class="string">'r'</span>);  <span class="comment">% 已调信号</span></span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,mt,<span class="string">'k--'</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,-mt,<span class="string">'k--'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'已调信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(u)*<span class="number">1.1</span> <span class="built_in">max</span>(u)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">[U,u,df1,f] = T2F(u,dt,df,fs);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(U)),<span class="string">'r'</span>)  <span class="comment">% 已调信号频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);ylabel(<span class="string">'已调信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*(fc+fw) <span class="number">2</span>*(fc+fw) <span class="built_in">min</span>(<span class="built_in">abs</span>(U)) <span class="built_in">max</span>(<span class="built_in">abs</span>(U))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 已调信号送入信道</span></span><br><span class="line">signal_power = power_x(u(<span class="number">1</span>:len)); <span class="comment">%已调信号的平均功率</span></span><br><span class="line">noise_power=(signal_power*fs)/(snr_lin*(<span class="number">2</span>* Bw));<span class="comment">%求出噪声方差（噪声均值为0）</span></span><br><span class="line">noise_std = <span class="built_in">sqrt</span>(noise_power); <span class="comment">%噪声标准偏差</span></span><br><span class="line">noise = noise_std*<span class="built_in">randn</span>(<span class="number">1</span>,len); <span class="comment">%产生噪声</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,noise,<span class="string">'r'</span>);<span class="comment">% 画出噪声波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'噪声信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(noise) <span class="built_in">max</span>(noise)*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">[noisef,noise,df1,f]=T2F(noise,dt,df,fs);<span class="comment">%噪声频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(noisef)),<span class="string">'r'</span>)<span class="comment">% 画出噪声频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'噪声频谱'</span>);</span><br><span class="line">s_dsb=u(<span class="number">1</span>:len)+noise(<span class="number">1</span>:len);<span class="comment">%叠加了噪声的已调信号</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">%画出叠加了噪声的已调信号波形</span></span><br><span class="line"><span class="built_in">plot</span>(t,s_dsb,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'信道中的信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(s_dsb) <span class="built_in">max</span>(s_dsb)]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">[s_dsb_f,s_dsb,df1,f]=T2F(s_dsb,dt,df,fs);<span class="comment">%求出叠加了噪声的已调信号频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(s_dsb_f)),<span class="string">'r'</span>)<span class="comment">% 画出叠加了噪声的已调信号频谱</span></span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(s_dsb_f)) <span class="built_in">max</span>(<span class="built_in">abs</span>(s_dsb_f))*<span class="number">1.1</span>]);</span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'信道中信号频谱'</span>);</span><br><span class="line">[H,f]=bp_f(<span class="built_in">length</span>(s_dsb),f_start,f_cutoff,df1,fs,<span class="number">1</span>);<span class="comment">%求带通滤波器</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(H)),<span class="string">'r'</span>)<span class="comment">% 画出带通滤波器</span></span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(H)) <span class="built_in">max</span>(<span class="built_in">abs</span>(H))*<span class="number">1.1</span>]);</span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'带通滤波器'</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 接收信号输入带通和解调器</span></span><br><span class="line">DEM = H.*s_dsb_f; <span class="comment">%滤波器输出的频谱</span></span><br><span class="line">[dem]=F2T(DEM,fs);<span class="comment">%滤波器的输出波形</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)<span class="comment">%经过理想带通滤波器后的信号波形</span></span><br><span class="line"><span class="built_in">plot</span>(t,dem(<span class="number">1</span>:len),<span class="string">'r'</span>)<span class="comment">%画出经过理想带通滤波器后的信号波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'理想BPF输出信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(dem(<span class="number">1</span>:len)) <span class="built_in">max</span>(dem(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br><span class="line">[demf,dem,df1,f]=T2F(dem(<span class="number">1</span>:len),dt,df,fs);<span class="comment">%求经过理想带通滤波器后信号频谱</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(demf)),<span class="string">'r'</span>);<span class="comment">% 画出经过理想带通滤波器后信号频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'理想BPF输出信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(demf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(demf))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,ct(<span class="number">1</span>:len),<span class="string">'r'</span>);</span><br><span class="line"><span class="comment">% axis([0 t0 -1.2 1.2]);</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'本地载波'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(ct(<span class="number">1</span>:len))*<span class="number">1.1</span> <span class="built_in">max</span>(ct(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)  <span class="comment">% 载波频谱</span></span><br><span class="line">[C,ct,df1,f]=T2F(ct(<span class="number">1</span>:len),dt,df,fs);</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(C)),<span class="string">'r'</span>)  <span class="comment">% 画出载波频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'本地载波频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(C))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(C))*<span class="number">1.1</span>]);</span><br><span class="line">der=dem(<span class="number">1</span>:len).*ct(<span class="number">1</span>:len);<span class="comment">%混频</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>)<span class="comment">%画出混频后的信号</span></span><br><span class="line"><span class="built_in">plot</span>(t,der,<span class="string">'r'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(der)*<span class="number">1.1</span> <span class="built_in">max</span>(der)*<span class="number">1.1</span>]);</span><br><span class="line"><span class="comment">% axis([0 t0 -R R]);</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'混频后的信号'</span>);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">[derf,der,df1,f]=T2F(der,dt,df,fs);<span class="comment">%求混频后的信号频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(derf)),<span class="string">'r'</span>)<span class="comment">%画出混频后的信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'混频后信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(derf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(derf))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">%% 混频信号输入低通滤波器</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>)</span><br><span class="line">[LPF,f]=lp_f(<span class="built_in">length</span>(der),Bw,df1,fs,<span class="number">2</span>);<span class="comment">%求低通滤波器</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(LPF)),<span class="string">'r'</span>);<span class="comment">% 画出理想低通滤波器</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'理想LPF'</span>);</span><br><span class="line">axis([<span class="number">-2</span>*fc <span class="number">2</span>*fc <span class="built_in">min</span>(<span class="built_in">abs</span>(LPF))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(LPF))*<span class="number">1.1</span>]);</span><br><span class="line">DM = LPF.*derf; <span class="comment">%理想低通滤波器输出的频谱</span></span><br><span class="line">[dm]=F2T(DM,fs);<span class="comment">%滤波器的输出波形</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,dm(<span class="number">1</span>:len),<span class="string">'r'</span>);<span class="comment">%画出经过低通滤波器后的解调出的波形</span></span><br><span class="line"><span class="comment">% axis([0 t0 -R R]);</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'LPF输出信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(dm(<span class="number">1</span>:len))*<span class="number">1.1</span> <span class="built_in">max</span>(dm(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">[dmf,dm,df1,f]=T2F(dm(<span class="number">1</span>:len),dt,df,fs);<span class="comment">%求LPF输出信号的频谱</span></span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(dmf)),<span class="string">'r'</span>);<span class="comment">%画出LPF输出信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'LPF输出信号频谱'</span>);</span><br><span class="line">axis([<span class="number">-1.5</span>*fw <span class="number">1.5</span>*fw <span class="built_in">min</span>(<span class="built_in">abs</span>(dmf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(dmf))*<span class="number">1.1</span>]);</span><br><span class="line">dmd=dm(<span class="number">1</span>:len)-<span class="built_in">mean</span>(dm(<span class="number">1</span>:len));</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,dmd,<span class="string">'r'</span>);<span class="comment">%画出恢复信号(去除直流分量)</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'恢复信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(dmd)*<span class="number">1.1</span> <span class="built_in">max</span>(dmd)*<span class="number">1.1</span>]);</span><br><span class="line">[dmdf,dmd,df1,f]=T2F(dmd,dt,df,fs);<span class="comment">%求恢复信号的频谱</span></span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">plot</span>(f,fftshift(<span class="built_in">abs</span>(dmdf)),<span class="string">'r'</span>);<span class="comment">%画出恢复信号的频谱</span></span><br><span class="line">xlabel(<span class="string">'f'</span>);</span><br><span class="line">ylabel(<span class="string">'恢复信号的频谱'</span>);</span><br><span class="line">axis([<span class="number">-1.5</span>*fw <span class="number">1.5</span>*fw <span class="built_in">min</span>(<span class="built_in">abs</span>(dmdf))*<span class="number">1.1</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(dmdf))*<span class="number">1.1</span>]);</span><br><span class="line"> </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,m(<span class="number">1</span>:len),<span class="string">'r'</span>);<span class="comment">% 画出调制信号波形</span></span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'调制信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> <span class="number">4</span>/fw <span class="built_in">min</span>(m(<span class="number">1</span>:len))*<span class="number">1.1</span> <span class="built_in">max</span>(m(<span class="number">1</span>:len))*<span class="number">1.1</span>]);</span><br></pre></td></tr></table></figure></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[H,f]</span>=<span class="title">bp_f</span><span class="params">(n,f_start,f_cutoff,df1,fs,p)</span></span></span><br><span class="line"><span class="comment">%带通滤波器函数 输入设计的滤波器参数，产生带通滤波器频率特性函数H和频率向量f</span></span><br><span class="line"><span class="comment">%------------------------输入参数</span></span><br><span class="line"><span class="comment">%n 带通滤波器的输入信号长度</span></span><br><span class="line"><span class="comment">%f_start 通带起始频率</span></span><br><span class="line"><span class="comment">%f_cutoff 带通滤波器的截止频率</span></span><br><span class="line"><span class="comment">%df1 频率分辨率</span></span><br><span class="line"><span class="comment">%fs 抽样频率</span></span><br><span class="line"><span class="comment">%p 滤波器幅度</span></span><br><span class="line"><span class="comment">%----------------------输出(返回)参数</span></span><br><span class="line"><span class="comment">%H 带通滤波器频率响应</span></span><br><span class="line"><span class="comment">%f 频率向量</span></span><br><span class="line"><span class="comment">%设计滤波器</span></span><br><span class="line">n_cutoff = <span class="built_in">floor</span>(f_cutoff/df1);</span><br><span class="line">n_start = <span class="built_in">floor</span>(f_start/df1);</span><br><span class="line">f = [<span class="number">0</span>:df1:df1*(n<span class="number">-1</span>)] -fs/<span class="number">2</span>; <span class="comment">%频率向量</span></span><br><span class="line">H = <span class="built_in">zeros</span>(<span class="built_in">size</span>(f));</span><br><span class="line">H(n_start+<span class="number">1</span>:n_cutoff) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff-n_start);</span><br><span class="line">H(<span class="built_in">length</span>(f) - n_cutoff+<span class="number">1</span>:<span class="built_in">length</span>(f)-n_start) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff-n_start);</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[m]</span>=<span class="title">F2T</span><span class="params">(M,fs)</span></span></span><br><span class="line"><span class="comment">%-------------------------输入参数</span></span><br><span class="line"><span class="comment">%M：信号的频谱</span></span><br><span class="line"><span class="comment">%fs:系统采样频率</span></span><br><span class="line"><span class="comment">%--------------------输出(返回)参数</span></span><br><span class="line"><span class="comment">%m:傅里叶逆变换后的信号，注意其长度为2的整数次幂，利用其画波形时，要注意选取m的一部分，选取长度和所给时间序列t的长度要一致，plot(t,m(1:length(t)))，否则会出错。</span></span><br><span class="line">m = <span class="built_in">real</span>(ifft(M))*fs;</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function [M,m,df]=fftseq(m,ts,df)</span><br><span class="line">%各参数含义与子函数T2F中的完全相同，完成</span><br><span class="line">fs = 1/ts;</span><br><span class="line">if nargin ==2</span><br><span class="line">n1 =0;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">n1 = fs/df;</span><br><span class="line">end</span><br><span class="line">n2 = length(m);</span><br><span class="line">n = 2^(max(nextpow2(n1),nextpow2(n2)));</span><br><span class="line">M = fft(m,n);</span><br><span class="line">m = [m,zeros(1,n-n2)];</span><br><span class="line">df = fs/n;</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[H,f]</span>=<span class="title">lp_f</span><span class="params">(n,f_cutoff,df1,fs,p)</span></span></span><br><span class="line"><span class="comment">%低通滤波器函数 输入设计的滤波器参数，产生低通滤波器频率特性函数H和频率向量f</span></span><br><span class="line"><span class="comment">%------------------------输入参数</span></span><br><span class="line"><span class="comment">%n 低通滤波器的输入信号长度</span></span><br><span class="line"><span class="comment">%f_cutoff 低通滤波器的截止频率</span></span><br><span class="line"><span class="comment">%df1 频率分辨率</span></span><br><span class="line"><span class="comment">%fs 抽样频率</span></span><br><span class="line"><span class="comment">%p 滤波器幅度</span></span><br><span class="line"><span class="comment">%---------------------输出(返回)参数</span></span><br><span class="line"><span class="comment">%H 低通滤波器频率响应</span></span><br><span class="line"><span class="comment">%f 频率向量</span></span><br><span class="line">n_cutoff = <span class="built_in">floor</span>(f_cutoff/df1); <span class="comment">%设计滤波器</span></span><br><span class="line">f = [<span class="number">0</span>:df1:df1*(n<span class="number">-1</span>)] -fs/<span class="number">2</span>; <span class="comment">%频率向量</span></span><br><span class="line">H = <span class="built_in">zeros</span>(<span class="built_in">size</span>(f));</span><br><span class="line">H(<span class="number">1</span>:n_cutoff) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff);</span><br><span class="line">H(<span class="built_in">length</span>(f) - n_cutoff+<span class="number">1</span>:<span class="built_in">length</span>(f)) = p*<span class="built_in">ones</span>(<span class="number">1</span>,n_cutoff);</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function p=power_x(<span class="keyword">x</span>)</span><br><span class="line"><span class="symbol">%x</span>:输入信号</span><br><span class="line"><span class="symbol">%p</span>:返回信号的<span class="keyword">x</span>功率</span><br><span class="line">p=(norm(<span class="keyword">x</span>).^<span class="number">2</span>)./length(<span class="keyword">x</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[Bw_eq]</span>=<span class="title">signalband</span><span class="params">(sf,df,T)</span></span></span><br><span class="line"><span class="comment">%计算信号等效带宽</span></span><br><span class="line"><span class="comment">%sf：信号频谱</span></span><br><span class="line"><span class="comment">%df:频率分辨率</span></span><br><span class="line"><span class="comment">%T：信号持续时间</span></span><br><span class="line">sf_max=<span class="built_in">max</span>(<span class="built_in">abs</span>(sf));</span><br><span class="line">Bw_eq=sum(<span class="built_in">abs</span>(sf).^<span class="number">2</span>)*df/T/sf_max.^<span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function [M,m,df1,f]=T2F(m,ts,df,fs)</span><br><span class="line"><span class="tag">%</span>------------------------输入参数</span><br><span class="line"><span class="tag">%<span class="selector-tag">m</span></span>:信号</span><br><span class="line"><span class="tag">%<span class="selector-tag">ts</span></span>:系统时域采样间隔</span><br><span class="line"><span class="tag">%<span class="selector-tag">df</span></span>:所需的频率分辨率</span><br><span class="line"><span class="tag">%<span class="selector-tag">fs</span></span>:系统采样频率</span><br><span class="line"><span class="tag">%</span>---------------------输出(返回)参数</span><br><span class="line"><span class="tag">%<span class="selector-tag">M</span></span>:傅里叶变换后的频谱序列</span><br><span class="line"><span class="tag">%<span class="selector-tag">m</span></span>: 输入信号参与过傅里叶变换后对应的序列，需要注意的是，该序列与输入信号m的区别，其长度是不一样的，输入的m长度不一定是2的整数次幂，而傅里叶变换要求输入信号长度为2的整数次幂，故傅里叶变换前需对输入的m信号进行补零，其长度有所增加，故输出参数中的m为补零后的输入信号，其长度与输入参数m不一样，但与M,f长度是一样的，并且，其与时间序列t所对应的序列m(1:length(t))与输入参数中的m是一致的。</span><br><span class="line"><span class="tag">%<span class="selector-tag">df1</span></span>:返回的频率分辨率</span><br><span class="line"><span class="tag">%<span class="selector-tag">f</span></span>:与M相对应的频率序列</span><br><span class="line">[M,m,df1]=fftseq(m,ts,df);</span><br><span class="line">f = [0:df1:df1*(length(m)-1)] -fs/2; %频率向量</span><br><span class="line">M=M/fs;</span><br></pre></td></tr></table></figure><h3 id="四、设计结果"><a href="#四、设计结果" class="headerlink" title="四、设计结果"></a>四、设计结果</h3><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo1.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo2.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo3.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/DSB-SC通信系统的设计与实现/jieguo4.png" alt></div></p></blockquote><h3 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h3><p>设定调制信号是频率为50的正弦信号，载波是频率为100的余弦信号，由于软件仿真中是用的数字信号代替的<br>模拟信号，故得到的频谱图为频率在+50和-50的频谱图，又因为此处为了更加清楚的观察调制信号和载波的频谱图，<br>所以此处我限制坐标范围为-100到100，所以看到的为不准确的频谱图，载波频谱图亦是如此。然后将载波与调制信<br>号相乘得到已调信号的波形图并作出其包络，可以清楚的观察其频谱图，然后设定高斯噪声的参数并与已调信号<br> 相加得到加噪信号并作出频谱图，然后得到的理想带通滤波器的中心频率为-100和100，带宽为200，然后将加噪信<br>号通过带通滤波器得到的波形与已调信号几乎一致，然后与本地载波相乘得到混频信号并观察其频谱，然后设定<br>低通滤波器的中心频率为0，带宽为100，并将混频信号通过该低通滤波器得到恢复信号并作出其频谱图与调制信号<br>几乎一致，故该仿真结果正确。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DSB-SC通信系统的设计与实现&quot;&gt;&lt;a href=&quot;#DSB-SC通信系统的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;DSB-SC通信系统的设计与实现&quot;&gt;&lt;/a&gt;DSB-SC通信系统的设计与实现&lt;/h2&gt;&lt;h3 id=&quot;一、课程设计主要内容&quot;&gt;&lt;a href=&quot;#一、课程设计主要内容&quot; class=&quot;headerlink&quot; title=&quot;一、课程设计主要内容&quot;&gt;&lt;/a&gt;一、课程设计主要内容&lt;/h3&gt;&lt;p&gt;DSB-SC通信系统(含调制、加性信道、解调系统等单元)的设计与实现；（要 求：信源、载波、高斯白噪声等的参数自己设定；设计结果要有已调信号的时域波形、频谱、解调信号波形、频谱等）&lt;/p&gt;
    
    </summary>
    
    
      <category term="通信原理" scheme="http://yoursite.com/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>AMI/HDB3编译码设计与实现</title>
    <link href="http://yoursite.com/2019/08/23/AMI-HDB3%E7%BC%96%E8%AF%91%E7%A0%81%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/23/AMI-HDB3编译码设计与实现/</id>
    <published>2019-08-23T05:20:32.355Z</published>
    <updated>2019-03-07T07:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AMI-HDB3编译码设计与实现"><a href="#AMI-HDB3编译码设计与实现" class="headerlink" title="AMI/HDB3编译码设计与实现"></a>AMI/HDB3编译码设计与实现</h2><h3 id="一、课程设计主要内容"><a href="#一、课程设计主要内容" class="headerlink" title="一、课程设计主要内容"></a>一、课程设计主要内容</h3><p>熟悉AMI/HDB3码的编译码规则，了解AMI/HDB3码编译码的实现方法，运用MATLAB实现AMI/HDB3码编译码的仿真并分析。</p><a id="more"></a><h3 id="二、设计原理"><a href="#二、设计原理" class="headerlink" title="二、设计原理"></a>二、设计原理</h3><p>AMI码的全称是传号交替反转码。这是一种将消息代码0（空号）和1（传号）按如下规则进行编码的码：代码的0仍变换为传输码的0，而把代码中的1交替地变换为传输码的＋1、－1、＋1、－1…<br>由于AMI码的信号交替反转，故由它决定的基带信号将出现正负脉冲交替，而0电位保持不变的规律。由此看出，这种基带信号无直流成分，且只有很小的低频成分，因而它特别适宜在不允许这些成分通过的信道中传输。<br>从AMI码的编码规则看出，它已从一个二进制符号序列变成了一个三进制符号序列，而且也是一个二进制符号变换成一个三进制符号。把一个二进制符号变换成一个三进制符号所构成的码称为1B／1T码型。<br>AMI码除有上述特点外，还有编译码电路简单及便于观察误码情况等优点，它是一种基本的线路码，并得到广泛采用。但是，AMI码有一个重要缺点，即当它用来获取定时信息时，由于它可能出现长的连0串，因而会造成提取定时信号的困难。<br>为了保持AMI码的优点而克服其缺点，人们提出了许多改进的方法，HDB3码就是其中有代表性的一种。<br>  HDB3码是三阶高密度码的简称。HDB3码保留了AMI码所有的优点（如前所述），还可将连“0”码限制在3个以内，克服了AMI码出现长连“0”过多，对提取定时钟不利的缺点。HDB3码的功率谱基本上与AMI码类似。由于HDB3码诸多优点，所以CCITT建议把HDB3码作为PCM传输系统的线路码型。<br>    如何由二进制码转换成HDB3码呢？<br><strong> HDB3码编码规则如下 </strong>：<br>1．二进制序列中的“0”码在HDB3码中仍编为“0”码，但当出现四个连“0”码时，用取代节000V或B00V代替四个连“0”码。取代节中的V码、B码均代表“1”码，它们可正可负（即V+=＋1，V-=－1，B+=＋1，B-=－1）。<br>2．取代节的安排顺序是：先用000V，当它不能用时，再用B00V。000V取代节的安排要满足以下两个要求：<br>（1）各取代节之间的V码要极性交替出现（为了保证传号码极性交替出现，不引入直流成份）。<br>（2）V码要与前一个传号码的极性相同（为了在接收端能识别出哪个是原始传号码，哪个是V码？以恢复成原二进制码序列）。<br>    当上述两个要求能同时满足时，用000V代替原二进制码序列中的4个连“0”（用000V+或000V-）；而当上述两个要求不能同时满足时，则改用B00V（B+00V+或B-00V-，实质上是将取代节000V中第一个“0”码改成B码）。<br>3．HDB3码序列中的传号码（包括“1”码、V码和B码）除V码外要满足极性交替出现的原则。</p><h3 id="三、设计思路及程序代码"><a href="#三、设计思路及程序代码" class="headerlink" title="三、设计思路及程序代码"></a>三、设计思路及程序代码</h3><blockquote><p>1、随机生成一组数列。<br>2、使其中的1交替变为1和-1实现AMI码的编码。<br>3、将AMI码中4个0的情况按照HDB3码的编码规则实现HDB3码的编码。<br>4、将AMI码中的所以的-1变为1实现AMI码的译码。<br>5、判断HDB3码中两个0和三个0的情况并做比较实现HDB3码的译码。</p></blockquote><p><strong> 程序 </strong>：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">N = <span class="number">20</span>;</span><br><span class="line">yuanma = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,N));</span><br><span class="line">len_yuan = <span class="built_in">length</span>(yuanma);</span><br><span class="line">yuanma_4 = yuanma(<span class="number">4</span>);</span><br><span class="line"><span class="comment">%% AMI 编码</span></span><br><span class="line">AMI = <span class="built_in">zeros</span>(<span class="number">1</span>,len_yuan);</span><br><span class="line">v = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:len_yuan</span><br><span class="line">    <span class="keyword">if</span> yuanma(<span class="built_in">i</span>) == <span class="number">1</span></span><br><span class="line">        AMI(<span class="built_in">i</span>) = v;</span><br><span class="line">        v = v*(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'原码：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(yuanma);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'AMI码：'</span>)</span><br><span class="line"><span class="built_in">disp</span>(AMI);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% HDB3 编码</span></span><br><span class="line">HDB3 = AMI;</span><br><span class="line">v = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">4</span>:len_yuan</span><br><span class="line">    <span class="keyword">if</span> HDB3(<span class="built_in">i</span>) == <span class="number">0</span> &amp;&amp; HDB3(<span class="built_in">i</span><span class="number">-1</span>) == <span class="number">0</span> &amp;&amp; HDB3(<span class="built_in">i</span><span class="number">-2</span>) == <span class="number">0</span> &amp;&amp; HDB3(<span class="built_in">i</span><span class="number">-3</span>) == <span class="number">0</span></span><br><span class="line">        HDB3(<span class="built_in">i</span>) = v;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="built_in">i</span>+<span class="number">1</span>:len_yuan</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(HDB3(<span class="built_in">j</span>)) == <span class="number">1</span></span><br><span class="line">               <span class="keyword">if</span> flag &amp;&amp; HDB3(<span class="built_in">j</span>)*HDB3(<span class="built_in">i</span>) &lt; <span class="number">0</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   flag = <span class="number">0</span>;</span><br><span class="line">                   HDB3(<span class="built_in">j</span>) = HDB3(<span class="built_in">j</span>)*(<span class="number">-1</span>);</span><br><span class="line">               <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">i</span><span class="number">-4</span> &gt; <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> HDB3(<span class="built_in">i</span><span class="number">-4</span>)*HDB3(<span class="built_in">i</span>) &lt; <span class="number">0</span></span><br><span class="line">                <span class="comment">% HDB3(i-3) = HDB3(i)*3/2;</span></span><br><span class="line">                HDB3(<span class="built_in">i</span><span class="number">-3</span>) = HDB3(<span class="built_in">i</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        v = v*(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'HDB3码：'</span>)</span><br><span class="line"><span class="built_in">disp</span>(HDB3);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% AMI解码</span></span><br><span class="line">jie_AMI = <span class="built_in">abs</span>(AMI);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'AMI解码：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(jie_AMI);</span><br><span class="line"> </span><br><span class="line"><span class="comment">%% HDB3解码</span></span><br><span class="line">jie_HDB3 = HDB3;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">3</span>:len_yuan<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> jie_HDB3(<span class="built_in">i</span>) == <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) ~= <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span><span class="number">-1</span>) == <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">i</span><span class="number">-3</span> &lt;=<span class="number">0</span>)</span><br><span class="line">            jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) = yuanma_4;</span><br><span class="line">        <span class="keyword">elseif</span> (jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) == <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span><span class="number">-3</span>)*jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) &gt; <span class="number">0</span>)</span><br><span class="line">            jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">elseif</span> jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) ~= <span class="number">0</span> &amp;&amp; jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) * jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) &gt; <span class="number">0</span></span><br><span class="line">            jie_HDB3(<span class="built_in">i</span><span class="number">-2</span>) = <span class="number">0</span>;</span><br><span class="line">            jie_HDB3(<span class="built_in">i</span>+<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">jie_HDB3 = <span class="built_in">abs</span>(jie_HDB3);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'HDB3解码：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(jie_HDB3);</span><br></pre></td></tr></table></figure></p><h3 id="四、设计结果"><a href="#四、设计结果" class="headerlink" title="四、设计结果"></a>四、设计结果</h3><p><img src="/2019/08/23/AMI-HDB3编译码设计与实现/one.png" alt="实验结果" title="实验结果"></p><h3 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h3><p>当原码随机成上述序列时，AMI码符合编码规则使其中的1交替变成1和-1,，故AMI码编码正确，<br>HDB3码中出现第一次四个零时将最后的一个零变为+v与前面第一个非零的1极性相同，故不<br>需要加B，当第二次出现四个0时，将最后一个0变为-v，此时的极性与前面一个非零的-1相同，<br>故不需要加B，所以HDB3码的编码正确。AMI码的译码中将其中所有的-1变为1得到的译码与原码<br>一致，故AMI码的译码正确。HDB3码的译码中出现三个0时第四个数的极性与前一个非0的数极<br>性一致，故将第四个非0的数置0，当出现第二次三个0时，第四个非0的数与前一个数的极性<br>一致，故将第四个非0的数置0，所以HDB3码的译码与原码一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AMI-HDB3编译码设计与实现&quot;&gt;&lt;a href=&quot;#AMI-HDB3编译码设计与实现&quot; class=&quot;headerlink&quot; title=&quot;AMI/HDB3编译码设计与实现&quot;&gt;&lt;/a&gt;AMI/HDB3编译码设计与实现&lt;/h2&gt;&lt;h3 id=&quot;一、课程设计主要内容&quot;&gt;&lt;a href=&quot;#一、课程设计主要内容&quot; class=&quot;headerlink&quot; title=&quot;一、课程设计主要内容&quot;&gt;&lt;/a&gt;一、课程设计主要内容&lt;/h3&gt;&lt;p&gt;熟悉AMI/HDB3码的编译码规则，了解AMI/HDB3码编译码的实现方法，运用MATLAB实现AMI/HDB3码编译码的仿真并分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="通信原理" scheme="http://yoursite.com/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2PSK通信系统的设计与实现</title>
    <link href="http://yoursite.com/2019/08/23/2PSK%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/23/2PSK通信系统的设计与实现/</id>
    <published>2019-08-23T05:20:32.352Z</published>
    <updated>2019-03-09T06:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2PSK通信系统的设计与实现"><a href="#2PSK通信系统的设计与实现" class="headerlink" title="2PSK通信系统的设计与实现"></a>2PSK通信系统的设计与实现</h2><h3 id="一、课程设计主要内容"><a href="#一、课程设计主要内容" class="headerlink" title="一、课程设计主要内容"></a>一、课程设计主要内容</h3><p>2PSK通信系统（含调制、加性信道、解调系统等单元）的设计与实现；根据通信原理，设计出各个模块的参数，观察仿真并进行波形分析及系统的性能分析。</p><a id="more"></a><h3 id="二、设计原理"><a href="#二、设计原理" class="headerlink" title="二、设计原理"></a>二、设计原理</h3><h4 id="2-1-2PSK信号的定义"><a href="#2-1-2PSK信号的定义" class="headerlink" title="2.1 2PSK信号的定义"></a>2.1 2PSK信号的定义</h4><p>2PSK二进制移相键控方式，是键控的载波相位按基带脉冲序列的规律而改变的一种数字调制方式。就是根据数字基带信号的两个电平(或符号)使载波相位在两个不同的数值之间切换的一种相位调制方法。两个载波相位通常相差180度，此时称为反向键控(PSK),也称为绝对相移方式。</p><h4 id="2-2-2PSK信号的调制方法"><a href="#2-2-2PSK信号的调制方法" class="headerlink" title="2.2 2PSK信号的调制方法"></a>2.2 2PSK信号的调制方法</h4><p>2psk的调制方法有模拟调制和数字键控法两种，分别如图1、图2所示。2PSK的产生：模拟法和数字键控法，就模拟调制法而言，与产生2ASK信号的方法比较，只是对s(t)要求不同，因此2PSK信号可以看作是双极性基带信号作用下的DSB调幅信号。而就键控法来说，用数字基带信号s(t)控制开关电路，选择不同相位的载波输出，这时s(t)为单极性NRZ或双极性NRZ脉冲序列信号均可。</p><p>2PSK信号与2ASK信号的时域表达式在形式上是完全相同的，所不同的只是两者基带信号s(t)的构成，一个由双极性NRZ码组成，另一个由单极性NRZ码组成。因此，求2PSK信号的功率谱密度时，也可采用与求2ASK信号功率谱密度相同的方法。</p><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/one.png" alt="2psk模拟调制法 &quot;2psk模拟调制法&quot;"></div></p><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/two.png" alt="2psk检控调制法 &quot;2psk键控调制法&quot;"></div></p><h3 id="三、设计思路及程序代码"><a href="#三、设计思路及程序代码" class="headerlink" title="三、设计思路及程序代码"></a>三、设计思路及程序代码</h3><blockquote><p>1、设定2PSK通信系统中的各类参数。<br>2、随机生成一个基带信号并进行码变换，画出基带信号的波形及其频谱，求出等效带宽，设定载波并画出载波波形及其频谱，然后将基带信号与载波相乘得到已调信号画出波形及其频谱。<br>3、设定高斯噪声的参数画出噪声波形及其频谱图，然后将噪声与已调信号相加得到加噪信号画出波形图及其频谱图，然后设定带通滤波器的参数并画出带通滤波器的传输函数。<br>4、将加噪信号通过带通滤波器得到接收信号画出波形及其频谱图，然后将该接收信号与本地载波相乘进行相干解调画出混频信号的波形及其频谱图。<br>5、设定理想低通滤波器的参数并画出该滤波器的传输函数，将混频信号通过理想低通滤波器得到输出信号，画出波形及其频谱图，然后对输出信号进行抽样判决得到输出的双极性基带信号，然后对该信号进行码变换得到原基带信号。</p></blockquote><p><strong> 程序 </strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span>;  <span class="comment">% 基带信号码元数</span></span><br><span class="line">t0 = <span class="number">5</span>;  <span class="comment">% 时域信号时长</span></span><br><span class="line">t = <span class="built_in">linspace</span>(<span class="number">0</span>,t0,t0*<span class="number">1000</span>);</span><br><span class="line">fc = <span class="number">2</span>;  <span class="comment">% 载波频率</span></span><br><span class="line">fm = n/t0;  <span class="comment">% 码元速率</span></span><br><span class="line">B = <span class="number">2</span>*fm;  <span class="comment">% 信号带宽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 产生基带和载波信号</span></span><br><span class="line">a = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,n));  <span class="comment">% 随机产生基带信号</span></span><br><span class="line">st1 = t;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">if</span> a(<span class="built_in">i</span>) &lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st1(<span class="built_in">j</span>) = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st1(<span class="built_in">j</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">st0 = st1;</span><br><span class="line">st0(st0==<span class="number">-1</span>)=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st0,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'单极性基带信号str1'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st0)*<span class="number">1.1</span> <span class="built_in">max</span>(st0)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st0)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st0)*<span class="number">1.1</span>);</span><br><span class="line">y_0 = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(t));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,y_0,<span class="string">'k--'</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st1,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'双极性基带信号str1'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st1)*<span class="number">1.1</span> <span class="built_in">max</span>(st1)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st1)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st1)*<span class="number">1.1</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,y_0,<span class="string">'k--'</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">s1 = <span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fc*t);</span><br><span class="line"><span class="built_in">plot</span>(t,s1,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'载波波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(s1)*<span class="number">1.1</span> <span class="built_in">max</span>(s1)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(s1)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(s1)*<span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 调制和加加性噪声</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">st2 = st1.*s1;</span><br><span class="line"><span class="built_in">plot</span>(t,st2,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'2PSK已调信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st2)*<span class="number">1.1</span> <span class="built_in">max</span>(st2)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st2)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st2)*<span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">st3 = st2+<span class="built_in">randn</span>(<span class="number">1</span>,<span class="built_in">length</span>(t));</span><br><span class="line"><span class="built_in">plot</span>(t,st3,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);ylabel(<span class="string">'2PSK已调信号加噪声信号'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st3)*<span class="number">1.1</span> <span class="built_in">max</span>(st3)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line"><span class="comment">% set(gca,'YTick',min(st3)*1.1:1:max(st3)*1.1);</span></span><br><span class="line">set(gca,<span class="string">'YTickLabel'</span>,&#123;<span class="built_in">floor</span>(<span class="built_in">min</span>(st3)*<span class="number">1.1</span>) <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="built_in">max</span>(st3)*<span class="number">1.1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 相干解调和抽样判决</span></span><br><span class="line">st4 = st3.*s1;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st4,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);title(<span class="string">'相干载波相乘后的波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st4)*<span class="number">1.1</span> <span class="built_in">max</span>(st4)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line"><span class="comment">% set(gca,'YTick',min(st4)*1.1:1:max(st4)*1.1);</span></span><br><span class="line">set(gca,<span class="string">'YTickLabel'</span>,&#123;<span class="built_in">floor</span>(<span class="built_in">min</span>(st4)*<span class="number">1.1</span>) <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="built_in">max</span>(st4)*<span class="number">1.1</span>&#125;);</span><br><span class="line"></span><br><span class="line">[f,af] = T2F(t,st4);</span><br><span class="line">[t,psk] = lpf(f,af,B);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,psk,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);title(<span class="string">'低通滤波后的波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(psk)*<span class="number">1.1</span> <span class="built_in">max</span>(psk)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line"><span class="comment">% set(gca,'YTick',min(st4)*1.1:1:max(st4)*1.1);</span></span><br><span class="line">set(gca,<span class="string">'YTickLabel'</span>,&#123;<span class="built_in">floor</span>(<span class="built_in">min</span>(psk)*<span class="number">1.1</span>) <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="built_in">max</span>(psk)*<span class="number">1.1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">    <span class="keyword">if</span> psk(<span class="number">1</span>,(<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+(<span class="built_in">length</span>(t)/n)/<span class="number">2</span>) &lt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st5(<span class="built_in">j</span>) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">length</span>(t)/n)*(<span class="built_in">i</span><span class="number">-1</span>)+<span class="number">1</span>:(<span class="built_in">length</span>(t)/n)*<span class="built_in">i</span></span><br><span class="line">            st5(<span class="built_in">j</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,st5,<span class="string">'r'</span>);</span><br><span class="line">xlabel(<span class="string">'t'</span>);title(<span class="string">'相干解调之后的波形'</span>);</span><br><span class="line">axis([<span class="number">0</span> t0 <span class="built_in">min</span>(st5)*<span class="number">1.1</span> <span class="built_in">max</span>(st5)*<span class="number">1.1</span>]);</span><br><span class="line">set(gca,<span class="string">'XTick'</span>,<span class="number">0</span>:<span class="number">0.5</span>:t0);</span><br><span class="line">set(gca,<span class="string">'YTick'</span>,<span class="built_in">min</span>(st5)*<span class="number">1.1</span>:<span class="number">1</span>:<span class="built_in">max</span>(st5)*<span class="number">1.1</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function [t,st]=F2T(f,sf)</span><br><span class="line">%脚本文件F2T.m定义了函数F2T，计算信号的反傅立叶变换。</span><br><span class="line">%This function calculate the time signal using ifft function for the input</span><br><span class="line"></span><br><span class="line">df = f(2)-f(1);</span><br><span class="line"></span><br><span class="line">Fmx = ( f(end)-f(1) +df);</span><br><span class="line"></span><br><span class="line">dt = 1/Fmx;</span><br><span class="line"></span><br><span class="line">N = length(sf);</span><br><span class="line"></span><br><span class="line">T = dt*N;</span><br><span class="line"></span><br><span class="line"><span class="section">%t=-T/2:dt:T/2-dt;</span></span><br><span class="line"></span><br><span class="line">t = 0:dt:T-dt;</span><br><span class="line"></span><br><span class="line">sff = fftshift(sf);</span><br><span class="line"></span><br><span class="line">st = Fmx*ifft(sff);</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function [t,st]=lpf(f,sf,B)</span><br><span class="line">%This function<span class="built_in"> filter </span>an input data using a lowpass filter</span><br><span class="line">%Inputs: f: frequency samples</span><br><span class="line">% sf: input data spectrum samples</span><br><span class="line">% B: lowpass bandwidth with a rectangle lowpass</span><br><span class="line">%Outputs: t: time samples</span><br><span class="line">% st: output data time samples</span><br><span class="line"></span><br><span class="line">df = f(2)-f(1);</span><br><span class="line"></span><br><span class="line">T = 1/df;</span><br><span class="line"></span><br><span class="line">hf = zeros(1,length(f));%全零矩阵</span><br><span class="line"></span><br><span class="line">bf = [-floor( B/df ): floor( B/df )] + floor( length(f)/2 );</span><br><span class="line"></span><br><span class="line">hf(bf)=1;</span><br><span class="line"></span><br><span class="line"><span class="attribute">yf</span>=hf.*sf;</span><br><span class="line"></span><br><span class="line">[t,st]=F2T(f,yf);</span><br><span class="line"></span><br><span class="line">st = real(st);</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function [f,sf]= T2F(<span class="built_in">t</span>,st)</span><br><span class="line">%利用FFT计算信号的频谱并与信号的真实频谱的抽样比较。</span><br><span class="line">%脚本文件T2F.m定义了函数T2F，计算信号的傅立叶变换。</span><br><span class="line">%Input is the <span class="built_in">time</span> <span class="built_in">and</span> the signal vectors,the length of <span class="built_in">time</span> must greater</span><br><span class="line">%than <span class="number">2</span></span><br><span class="line">%Output is the <span class="built_in">frequency</span> <span class="built_in">and</span> the signal spectrum</span><br><span class="line">dt = <span class="built_in">t</span>(<span class="number">2</span>)-<span class="built_in">t</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">T</span>=<span class="built_in">t</span>(end);</span><br><span class="line">df = <span class="number">1</span>/<span class="built_in">T</span>;</span><br><span class="line"><span class="built_in">N</span> = length(st);</span><br><span class="line">f=-<span class="built_in">N</span>/<span class="number">2</span>*df <span class="symbol">:</span> df <span class="symbol">:</span> <span class="built_in">N</span>/<span class="number">2</span>*df-df;</span><br><span class="line">sf = fft(st);</span><br><span class="line">sf = <span class="built_in">T</span>/<span class="built_in">N</span>*fftshift(sf);</span><br></pre></td></tr></table></figure><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo1.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo2.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo3.png" alt></div></p></blockquote><blockquote><p><div align="center"><img src="/2019/08/23/2PSK通信系统的设计与实现/jieguo4.png" alt></div></p></blockquote><h3 id="四、结果分析"><a href="#四、结果分析" class="headerlink" title="四、结果分析"></a>四、结果分析</h3><p>随机一个基带序列进行码变换转换为双极性基带信号并通过等间隔模拟成一个模拟基带信号，画出频谱图，然后设定本地载波画出波形及其频谱图，然后将基带信号与本地载波相乘得到已调基带信号为两个相位不同的正弦函数并画出其频谱图，然后设定一个高斯白噪声与原基带信号相加得到加性基带已调信号并画出其频谱图，然后设定带通滤波器并将加性已调基带信号通过该带通滤波器得到接收波形，然后将该接收波形与本地载波相乘得到混频信号，并设定低通滤波器得到通过低通滤波器之后的接收波形，然后对该信号进行抽样判决得到双极性的基带信号，最后对该双极性基带信号进行码变换转换为原单极性基带信号与原基带信号一致，故可验证该仿真结果正确。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2PSK通信系统的设计与实现&quot;&gt;&lt;a href=&quot;#2PSK通信系统的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;2PSK通信系统的设计与实现&quot;&gt;&lt;/a&gt;2PSK通信系统的设计与实现&lt;/h2&gt;&lt;h3 id=&quot;一、课程设计主要内容&quot;&gt;&lt;a href=&quot;#一、课程设计主要内容&quot; class=&quot;headerlink&quot; title=&quot;一、课程设计主要内容&quot;&gt;&lt;/a&gt;一、课程设计主要内容&lt;/h3&gt;&lt;p&gt;2PSK通信系统（含调制、加性信道、解调系统等单元）的设计与实现；根据通信原理，设计出各个模块的参数，观察仿真并进行波形分析及系统的性能分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="通信原理" scheme="http://yoursite.com/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
